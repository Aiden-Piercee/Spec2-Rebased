


//---------------------------------------------------------------------------------------
// PatchRoot.ad
//
// (ä¾‹)
// PatchRoot.ad
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// function
//---------------------------------------------------------------------------------------



module PatchRoot
{
    attribute sPatchSuccess = false;
    attribute sPatchRoot;

    method open(context)
    {
        sPatchRoot = SequenceUtil::ModalPage(context, ROOT);
        sPatchRoot.open();
        return self.sPatchSuccess;
    }

    method close(context)
    {
        if (self.sPatchSuccess)
        {
            context.disableInput();
            context.cursor_visible = false;
            ROOT.setFocus(ROOT);
            msg_push_ps_button.visible = true;
            ActorUtil::ResetActors(msg_push_ps_button);
        }
        else if (sPatchRoot != nil)
        {
            sPatchRoot.close();
            sPatchRoot = nil;
        }
    }

    method onInitialize(context)
    {
        context.pushEvent(main::menu::MScriptEvent(context, ROOT, "on_initialize"));
    }

    method on_initialize(context)
    {
        PatchLogic::initialize(true);
        self.sPatchSuccess = prepare(context);

        if (!self.sPatchSuccess)
        {
            PatchLogic::terminate(PatchLogic::ERROR_PREPARE);
            close(context);
            return;
        }

        self.sPatchSuccess = checkCapacity(context);
        if (!self.sPatchSuccess)
        {
            PatchLogic::terminate(PatchLogic::ERROR_CAPACITY);
            close(context);
            return;
        }

        self.sPatchSuccess = download(context);
        if (!self.sPatchSuccess)
        {
            PatchLogic::terminate(PatchLogic::ERROR_DOWNLOAD);
            close(context);
            return;
        }

        self.sPatchSuccess = install(context);
        PatchLogic::terminate(self.sPatchSuccess ? PatchLogic::ERROR_SUCCESS : PatchLogic::ERROR_INSTALL);
        close(context);
    }

    method prepare(context)
    {
        var prepare = PatchLogic::Prepare(ROOT);
        return prepare.execute(context, true);
    }

    method download(context)
    {
        var download = PatchLogic::Download(ROOT);
        return download.execute(context, true);
    }

    method install(context)
    {
        var install = PatchLogic::Install(ROOT);
        return install.execute(context, false);
    }

    method checkCapacity(context)
    {
        var sz_free = main::pdiext::MSystemPatch::freeKBSize();

        var sz_need = main::pdiext::MSystemPatch::needKBSize();
        if (sz_need > sz_free) {
            var sz_need_size = sz_need - sz_free;
            sz_need_size = (sz_need_size + 1023) / 1024;

            DialogUtil::openConfirmDialog(context, DialogUtil::OK, 
                context.translate(ROOT, "Network", "NOT_ENOUGH_DISK_SPACE").build(sz_need_size));
            return false;
        }
        return true;
    }

    method onFinalize(context)
    {

    }

    method onCancel(context)
    {
        return EVENTRESULT_FILTER;
    }
}