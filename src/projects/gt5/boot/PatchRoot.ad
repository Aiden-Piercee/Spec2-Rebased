


//---------------------------------------------------------------------------------------
// PatchRoot.ad
//
// (ä¾‹)
// PatchRoot.ad
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// function
//---------------------------------------------------------------------------------------



module PatchRoot
{
    static LOCAL_UPDATE_MODE = 0;

    attribute sPatchSuccess = false;
    attribute sMode = nil;

    method open(context, mode)
    {
        self.sMode =  mode;
        SequenceUtil::pushPage(context, PatchRoot);
        return self.sPatchSuccess;
    }

    method close(context)
    {
        SequenceUtil::popPage(context, PatchRoot);
        self.sMode = nil;
    }

    method onInitialize(context)
    {
        context.pushEvent(main::menu::MScriptEvent(context, PatchRoot, "on_initialize"));
    }

    method on_initialize(context)
    {
        if (self.sMode == LOCAL_UPDATE_MODE)
            self.local_update(context);
    }

    method local_update(context)
    {
        PatchLogic::initialize(false);

        self.sPatchSuccess = prepareSync();
        if (!self.sPatchSuccess)
        {
            PatchLogic::terminate(nil);
            close(context);
            return;
        }

        self.sPatchSuccess = checkCapacity(context);
        if (!self.sPatchSuccess)
        {
            PatchLogic::terminate(nil);
            close(context);
            return;
        }

        self.sPatchSuccess = install(context, true);
        PatchLogic::terminate(nil);
        close(context);
    }

    method prepareSync()
    {
        main::pdiext::MSystemPatch::startPrepare();
        main::pdiext::MSystemPatch::syncPrepare();
        return true;
    }

    method prepare(context)
    {
        var prepare = PatchLogic::Prepare(ROOT);
        return prepare.execute(context, true);
    }

    method install(context, cancelable)
    {
        var install = PatchLogic::Install(ROOT);
        return install.execute(context, cancelable);
    }

    method checkCapacity(context)
    {
        var sz_free = main::pdiext::MSystemPatch::freeKBSize();

        var sz_need = main::pdiext::MSystemPatch::needKBSize();
        if (sz_need > sz_free) {
            var sz_need_size = sz_need - sz_free;
            sz_need_size = (sz_need_size + 1023) / 1024;

            DialogUtil::openConfirmDialog(context, DialogUtil::OK, 
                context.translate(ROOT, "Network", "NOT_ENOUGH_DISK_SPACE").build(sz_need_size));
            return false;
        }
        return true;
    }

    method onFinalize(context)
    {

    }

    method onCancel(context)
    {
        return EVENTRESULT_FILTER;
    }
}