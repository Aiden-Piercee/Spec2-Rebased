













module BootRoot
{
    method onInitialize(context)
    {
        ROOT::ScalarInterpolator.stop();
        ROOT.visible = false;
        Loading.visible = false;
        msg_push_ps_button.visible = false;

        ActorUtil::ResetInterpolators(tint, true, true);
        context.pushEvent(main::menu::MScriptEvent(context, ROOT, "on_initialize"));
    }

    method on_initialize(context)
    {
        var boot_from = main::AppOpt["boot_from"];
        var boot_from_bdvd = boot_from == "bdvd";

        var appopt_create_gamedata = main::AppOpt["create_gamedata"];
        var create_gamedata = appopt_create_gamedata != nil && appopt_create_gamedata;

        var install_condition = main::AppOpt["install_condition"];
        var need_patch_update = install_condition == "need_patch_update";

        var hdd_access = false;
        if (boot_from_bdvd)
            hdd_access = true;

        var patch_size = 0;
        if (need_patch_update)
        {
            main::pdiext::MSystemPatch::clear();
            main::pdiext::MSystemPatch::startPrepare();
            main::pdiext::MSystemPatch::syncPrepare();
            patch_size = main::pdiext::MSystemPatch::needKBSize();
        }

        if (create_gamedata)
        {
            var filesize = patch_size + (32 * 1024);
            var dirname = main::StaticConfig::GameDataInfo::dir;

            var title = context.translate(ROOT, "GameDataGT5", "GAMEDATA_TITLE_WITHIN_128BYTES");
            var titleId = dirname;
            var version = context.translate(ROOT, "GameDataGT5", "GAMEDATA_VERSION_WITHIN_6BYTES");
            var icon0 = "icon/gt5/game_icon.png";

            var success = GameDataUtil::createGameData(context, dirname, title, titleId, version, filesize, icon0, nil);
            if (!success)
            {
                pdiext::WaitAdvertiseEnd();

                ROOT.visible = true;
                context.disableInput();

                context.cursor_visible = false;
                ROOT.setFocus(ROOT);

                msg_push_ps_button.visible = true;
                ActorUtil::ResetActors(msg_push_ps_button);
                return EVENTRESULT_FILTER;
            }
        }

        pdiext::WaitAdvertiseEnd();
        ROOT.visible = true;
        BootRoot::ScalarInterpolator.start();

        if (need_patch_update)
        {
            if (!hdd_access)
            {
                pdiext::WaitAdvertiseEnd();
                ROOT.visible = true;

                var text = context.translate(ROOT, "DONT_POWER_OFF");
                DialogUtil::openConfirmDialog(context, DialogUtil::OK, text);
            }

            var text = context.translate(ROOT, "YOU_NEED_INSTALL");
            var res  = DialogUtil::openConfirmDialog(context, DialogUtil::OK, text);
            res = PatchRoot.open(context, PatchRoot::LOCAL_UPDATE_MODE);
            if (!res)
            {
                pdiext::WaitAdvertiseEnd();

                ROOT.visible = true;
                context.disableInput();

                context.cursor_visible = false;
                ROOT.setFocus(ROOT);

                msg_push_ps_button.visible = true;
                ActorUtil::ResetActors(msg_push_ps_button);
                return EVENTRESULT_FILTER;
            }
        }

        bootstrap_module::execBootPhase3_step1(context);

        if (GAME_STATUS.user_profile.context.need_save == SaveDataUtilGT5::STATUSCODE::FAILED)
        {
            pdiext::WaitAdvertiseEnd();

            ROOT.visible = true;
            context.disableInput();

            context.cursor_visible = false;
            ROOT.setFocus(ROOT);

            msg_push_ps_button.visible = true;
            ActorUtil::ResetActors(msg_push_ps_button);
            return EVENTRESULT_FILTER;
        }

        if (GAME_STATUS.user_profile.option.extra_language != pdistd::Language::SYSTEM)
            PROJECT.reloadRtext();
        
        if (DataInstallUtil::isRecommended(true))
        {
            if (DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, context.translate(ROOT, "DO_YOU_INSTALL")
                .build(DataInstallUtil::getEstimatedGBForDisplay(),
                       DataInstallUtil::getEstimatedMinuteForDisplay())
            ))
            {
                DataInstallUtil::execute(context, ROOT, "OptionProject::MiscRoot");
            }
        }

        bootstrap_module::execBootPhase3_step2(context);
        EulaGuide.ScalarInterpolator.start();
        bootstrap_module::execBootPhase3_step3(context);
        BootProjectUtil::setScenefaceForCapture(SceneFaceForCapture);
        BootProjectUtil::GoNextSequence(context);
    }

    method onFinalize(context)
    {
        BootProjectUtil::setScenefaceForCapture(nil);
        Grim2Util::stopUpdater();
    }
}