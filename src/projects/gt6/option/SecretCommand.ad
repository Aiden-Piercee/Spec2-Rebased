



class SecretCommand
{
    attribute command_counter_;
    attribute keep_press_keys_;
    attribute sequential_command_;

    method __init__(keep_press_keys, sequential_command)
    {
        self.command_counter_ = 0;
        self.keep_press_keys_ = keep_press_keys;
        self.sequential_command_ = sequential_command;
    }

    method check(context, event)
    {
        var state = context.getUpdateContext().getPadButtonState(0);
        var press_keys_res = true;
        
        if (self.keep_press_keys_ != nil && self.keep_press_keys_.size > 0)
        {
            var press_keys_state = 0;
            foreach (var key in self.keep_press_keys_)
            {
                if ((state & key) == 0)
                {
                    press_keys_res = false;
                    break;
                }
            }
        }

        if (press_keys_res)
        {
            if (self.sequential_command_.size == 0)
                return true;

            if (self.command_counter_ < self.sequential_command_.size)
            {
                if (event.keysym == self.sequential_command_[self.command_counter_])
                    self.command_counter_++;
                else
                    self.command_counter_ = 0;

                if (self.command_counter_ >= self.sequential_command_.size)
                    return true;
            }
        }
        else
        {
            self.command_counter_ = 0;
        }

        return false;
    }
}

static sDevelopSettingsKeepPressKeys = [
    0x800, 0x1000
];

static sDevelopSettingsCommand = [
    CELL_PAD_CTRL_L3_UP,
    CELL_PAD_CTRL_L3_DOWN,
    CELL_PAD_CTRL_SELECT,
    CELL_PAD_CTRL_L3_UP,
    CELL_PAD_CTRL_L3_DOWN,
    CELL_PAD_CTRL_L3_DOWN,
    CELL_PAD_CTRL_SELECT,
    CELL_PAD_CTRL_L3_UP,
    CELL_PAD_CTRL_L3_DOWN,
    CELL_PAD_CTRL_L3_DOWN,
    CELL_PAD_CTRL_L3_DOWN,
    CELL_PAD_CTRL_SELECT,
    CELL_PAD_CTRL_START,
];

static sDevelopSettingsManager = SecretCommand(sDevelopSettingsKeepPressKeys, sDevelopSettingsCommand);