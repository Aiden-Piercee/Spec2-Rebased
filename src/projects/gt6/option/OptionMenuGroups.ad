static sIsOpenedDevelopSettings = false;
static sIsOpenedSpecialSettings = false;

function OpenDevelopSettings()
{
    sIsOpenedDevelopSettings = true;
}

function OpenSpecialSettings()
{
    sIsOpenedSpecialSettings = true;
}

module ItemAtr
{
    static NONE = 0;
    static SPECIAL_SETTINGS = 1 << 1;
    static DEVELOP_SETTINGS = 1 << 2;
    static CREATE_SPECIAL_SAVEDATA = 1 << 3;
    static PLAYER_1 = 1 << 4;
    static PLAYER_2 = 1 << 5;
}

class GroupClass
{
    attribute name;
    attribute items;
    attribute visible_flag_ref;

    method __init__(name, items)
    {
        self.name = name;
        self.items = items;
    }

    method isVisible()
    {
        for (var i = 0; i < self.items.size; i++)
        {
            var item_info = self.items[i][0];
            var is_special = ItemAtr::SPECIAL_SETTINGS & item_info.atr;
            var is_develop = ItemAtr::DEVELOP_SETTINGS & item_info.atr;

            if (!is_special && !is_develop)
                return true;

            if (is_special && sIsOpenedSpecialSettings)
                return true;

            if (is_develop && sIsOpenedDevelopSettings)
                return true;
        }

        return false;
    }
}

class ItemClass
{
    attribute name;
    attribute image;
    attribute root;
    attribute args;
    attribute atr;

    method __init__(name, image, root, args, atr)
    {
        self.name = name;
        self.image = image;
        self.root = root;
        self.args = args;
        self.atr = 0;
        if (atr != nil)
        {
            self.atr |= atr;
        }
    }

    method isVisible()
    {
        var is_special = ItemAtr::SPECIAL_SETTINGS & self.atr;
        var is_develop = ItemAtr::DEVELOP_SETTINGS & self.atr;

        if (is_special && !sIsOpenedSpecialSettings)
            return false;

        if (is_develop && !sIsOpenedDevelopSettings)
            return false;

        return true;
    }
}

static sP_Arcade = ItemClass("Arcade", "pict_Arcade", "RaceRoot", nil, ItemAtr::NONE);
static sP_RaceDisplay = ItemClass("RaceDisplay", "pict_Race", "RaceDisplayRoot", nil, ItemAtr::NONE);
static sP_Demo = ItemClass("Demo", "pict_Demo", "DemoRoot", nil, ItemAtr::NONE);
static sP_Opening = ItemClass("Opening", "pict_Opening", "MiscRoot", "Opening", ItemAtr::NONE);
static sP_Unit = ItemClass("Unit", "pict_Unit", "UnitRoot", nil, ItemAtr::NONE);
static sP_PlayerName = ItemClass("PlayerName", "pict_PlayerName", "PlayerNameRoot", nil, ItemAtr::NONE);
static sP_Language = ItemClass("Language", "pict_Misc", "LanguageResetRoot", nil, ItemAtr::NONE);
static sP_WCNT_vibe = ItemClass("WCNT_vibe", "pict_WCNT_vibe", "ControllerRoot", nil, ItemAtr::NONE);
static sP_WCNT_1P = ItemClass("WCNT", "pict_WCNT", "PS3ControllerRoot", 0, ItemAtr::PLAYER_1);
static sP_WCNT_2P = ItemClass("WCNT", "pict_WCNT", "PS3ControllerRoot", 1, ItemAtr::PLAYER_2);
static sP_Steering = ItemClass("Steering", "pict_Steering", "SteeringRoot", nil, ItemAtr::NONE);
static sP_DFGT_1P = ItemClass("DRIVING_FORCE_GT", "pict_DFGT", "DrivingForceGTRoot", 0, ItemAtr::PLAYER_1);
static sP_DFGT_2P = ItemClass("DRIVING_FORCE_GT", "pict_DFGT", "DrivingForceGTRoot", 1, ItemAtr::PLAYER_2);
static sP_T500RS_1P = ItemClass("THRUSTMASTER", "pict_T500RS", "ThrustmasterRoot", 0, ItemAtr::PLAYER_1);
static sP_T500RS_2P = ItemClass("THRUSTMASTER", "pict_T500RS", "ThrustmasterRoot", 1, ItemAtr::PLAYER_2);
static sP_T300RS_1P = ItemClass("THRUSTMASTER300", "pict_T300RS", "Thrustmaster300Root", 0, ItemAtr::PLAYER_1);
static sP_T300RS_2P = ItemClass("THRUSTMASTER300", "pict_T300RS", "Thrustmaster300Root", 1, ItemAtr::PLAYER_2);
static sP_G27_1P = ItemClass("G27", "pict_G27", "G27Root", 0, ItemAtr::PLAYER_1);
static sP_G27_2P = ItemClass("G27", "pict_G27", "G27Root", 1, ItemAtr::PLAYER_2);
static sP_G25_1P = ItemClass("G25", "pict_G25", "G25Root", 0, ItemAtr::PLAYER_1);
static sP_G25_2P = ItemClass("G25", "pict_G25", "G25Root", 1, ItemAtr::PLAYER_2);
static sP_GTF_pro_1P = ItemClass("GT_FORCE_PRO", "pict_GTF_pro", "GTForceProRoot", 0, ItemAtr::PLAYER_1);
static sP_GTF_pro_2P = ItemClass("GT_FORCE_PRO", "pict_GTF_pro", "GTForceProRoot", 1, ItemAtr::PLAYER_2);
static sP_GTF_1P = ItemClass("GT_FORCE", "pict_GTF", "GTForceRoot", 0, ItemAtr::PLAYER_1);
static sP_GTF_2P = ItemClass("GT_FORCE", "pict_GTF", "GTForceRoot", 1, ItemAtr::PLAYER_2);
static sP_DF_1P = ItemClass("DRIVING_FORCE", "pict_DF", "DrivingForceRoot", 0, ItemAtr::PLAYER_1);
static sP_DF_2P = ItemClass("DRIVING_FORCE", "pict_DF", "DrivingForceRoot", 1, ItemAtr::PLAYER_2);
static sP_GTF_rx_1P = ItemClass("GT_FORCE_RX", "pict_GTF_rx", "GTForceRXRoot", 0, ItemAtr::PLAYER_1);
static sP_GTF_rx_2P = ItemClass("GT_FORCE_RX", "pict_GTF_rx", "GTForceRXRoot", 1, ItemAtr::PLAYER_2);
// Gap
static sP_SND_volume = ItemClass("SND_volume", "pict_Sound", "SoundRoot", "SND_volume", ItemAtr::NONE);
static sP_SND_output = ItemClass("SND_output", "pict_Sound", "SoundRoot", "SND_output", ItemAtr::NONE);
static sP_SND_user_bgm = ItemClass("SND_user_bgm", "pict_Personal", "SoundRoot", "SND_user_bgm", ItemAtr::NONE);
// Gap
static sP_DISP_size = ItemClass("DISP_size", "pict_Display", "ScreenRoot", "DISP_size", ItemAtr::NONE);
static sP_DISP_output = ItemClass("DISP_output", "pict_Display", "ScreenRoot", "DISP_output", ItemAtr::NONE);
static sP_Stereogram = ItemClass("Stereogram", "pict_Stereogram", "StereogramRoot", nil, ItemAtr::NONE);
static sP_SimulView = ItemClass("SimulView", "pict_SimulView", "SimulViewRoot", nil, ItemAtr::NONE);
static sP_MultiMonitor = ItemClass("MultiMonitor", "pict_MultiMonitor", "MonitorRoot", nil, ItemAtr::NONE);
static sP_FT_ps_eye = ItemClass("FT_ps_eye", "pict_PlayStationEye", "PSEyeRoot", nil, ItemAtr::NONE);
static sP_NET_clear = ItemClass("NET_clear", "pict_Network", "NetworkRoot", "NET_clear", ItemAtr::NONE);
static sP_NET_eula = ItemClass("NET_eula", "pict_Network", "NetworkRoot", "NET_eula", ItemAtr::NONE);
static sP_Data_install = ItemClass("Data_install", "pict_Misc", "GameInstallRoot", nil, ItemAtr::NONE);
static sP_Data_salvage = ItemClass("Data_salvage", "pict_Misc", "MiscRoot", "Data_salvage", ItemAtr::NONE);
static sSP_secret = ItemClass("Special", "pict_Misc", "SecretRoot", nil, ItemAtr::SPECIAL_SETTINGS);
static sSP_limit_car = ItemClass("LimitCar", "pict_Misc", "FavoriteCarRoot", nil, ItemAtr::SPECIAL_SETTINGS);
static sSP_limit_course = ItemClass("LimitCourse", "pict_Misc", "FavoriteCourseRoot", nil, ItemAtr::SPECIAL_SETTINGS);
static sSP_limit_enemy = ItemClass("LimitEnemy", "pict_Misc", "FavoriteEnemyRoot", nil, ItemAtr::SPECIAL_SETTINGS);
static sSP_limit_democar = ItemClass("LimitDemoCar", "pict_Misc", "FavoriteDemoCarRoot", nil, ItemAtr::SPECIAL_SETTINGS);
static sSP_sp_savedata = ItemClass("SpecialSaveData", "pict_Misc", nil, nil, ItemAtr::SPECIAL_SETTINGS | ItemAtr::CREATE_SPECIAL_SAVEDATA);
static sDP_develop = ItemClass("Develop", "pict_Misc", "DebugOptionRoot", nil, ItemAtr::DEVELOP_SETTINGS);

module InsensitiveF
{
    static NONE = 0x00;
    static GT6 = 0x01; // Requires gt6 branch
    static DEMO = 0x02; // Requires demo branch
    static Academy = 0x04; // Requires academy branch
    static NO_GT6 = DEMO | Academy;
    static NO_3DTV = 0x08;
}

function CheckInsensitiveF(flag)
{
    if (flag == InsensitiveF::NONE)
        return false;

    if (flag & InsensitiveF::NO_3DTV)
        return !pdiext::MSystemConfiguration::is3DTVAvailable();

    if (GetVersionBranch() == "gt6")
        return (flag & InsensitiveF::GT6).toBool();
    else if (GetVersionBranch() == "demo")
        return (flag & InsensitiveF::DEMO).toBool();
    else if (GetVersionBranch() == "academy")
        return (flag & InsensitiveF::Academy).toBool();

    return false;
}

function GetLocalizedItemName(context, item_info)
{
    switch (item_info.name)
    {
        case "WCNT":
            return manager.translate("PS3PartName", "dualshock3_config").build(item_info.args + 1);
            break;

        case "DRIVING_FORCE_GT":
        case "DRIVING_FORCE":
        case "GT_FORCE":
        case "GT_FORCE_PRO":
        case "GT_FORCE_RX":
        case "THRUSTMASTER":
        case "THRUSTMASTER300":
        case "G25":
        case "G27":
            return manager.translate("SteeringPartName", item_info.name);
            break;

        default:
            return context.translate(OptionRoot, item_info.name);
            break;
    }
}

static sOptionMenuGroups;

function DefineMenuGroups_GT6()
{
    var g_Game = GroupClass("Group_Game", [
        [sP_Arcade, InsensitiveF::NO_GT6],
        [sP_RaceDisplay, InsensitiveF::NO_GT6],
        [sP_Demo, InsensitiveF::NO_GT6],
        [sP_Opening, InsensitiveF::NO_GT6],
        [sP_Unit, InsensitiveF::NO_GT6],
        [sP_PlayerName, InsensitiveF::NO_GT6],
    ]);

    var langs = pdistd::MLocale::getOutOfSystemLanguages();
    if (langs.size > 0)
        g_Game.items.push([sP_Language, InsensitiveF::NONE]);

    var g_WCNT = GroupClass("Group_WCNT", [
        [sP_WCNT_vibe, InsensitiveF::NONE],
        [sP_WCNT_1P, InsensitiveF::NONE],
        [sP_WCNT_2P, InsensitiveF::NO_GT6],
    ]);

    var g_Steering = GroupClass("Group_Steering", [
        [sP_Steering, InsensitiveF::NONE],
        [sP_T300RS_1P, InsensitiveF::NONE],
        [sP_T300RS_2P, InsensitiveF::NO_GT6],
        [sP_T500RS_1P, InsensitiveF::NONE],
        [sP_T500RS_2P, InsensitiveF::NO_GT6],
        [sP_DFGT_1P, InsensitiveF::NONE],
        [sP_DFGT_2P, InsensitiveF::NO_GT6],
        [sP_GTF_pro_1P, InsensitiveF::NONE],
        [sP_GTF_pro_2P, InsensitiveF::NO_GT6],
        [sP_G27_1P, InsensitiveF::NONE],
        [sP_G27_2P, InsensitiveF::NO_GT6],
        [sP_G25_1P, InsensitiveF::NONE],
        [sP_G25_2P, InsensitiveF::NO_GT6],
        [sP_GTF_rx_1P, InsensitiveF::NONE],
        [sP_GTF_rx_2P, InsensitiveF::NO_GT6],
        [sP_GTF_1P, InsensitiveF::NONE],
        [sP_GTF_2P, InsensitiveF::NO_GT6],
        [sP_DF_1P, InsensitiveF::NONE],
        [sP_DF_2P, InsensitiveF::NO_GT6],
    ]);

    var g_Sound = GroupClass("Group_Sound", [
        [sP_SND_volume, InsensitiveF::NONE],
        [sP_SND_output, InsensitiveF::NONE],
        [sP_SND_user_bgm, InsensitiveF::NO_GT6],
    ]);

    var g_Display = GroupClass("Group_Display", [
        [sP_DISP_size, InsensitiveF::NONE],
        [sP_DISP_output, InsensitiveF::NONE],
        [sP_Stereogram, InsensitiveF::NO_3DTV],
        [sP_MultiMonitor, InsensitiveF::NO_GT6],
    ]);

    var g_Facetracking = GroupClass("Group_Facetracking", [
        [sP_FT_ps_eye, InsensitiveF::NO_GT6],
    ]);

    var g_Network = GroupClass("Group_Network", [
        [sP_NET_clear, InsensitiveF::NO_GT6],
        [sP_NET_eula, InsensitiveF::NO_GT6],
    ]);

    var g_GameData = GroupClass("Group_GameData", [
        [sP_Data_salvage, InsensitiveF::NO_GT6],
    ]);

    if (pdiext::MSystemConfiguration::bootFromDisc())
        g_GameData.items.unshift([sP_Data_install, InsensitiveF::NONE]);

    var g_DP = GroupClass("Develop Settings", [
        [sDP_develop, InsensitiveF::NONE],
    ]);

    var g_SP = GroupClass("Special Settings", [
        [sSP_secret, InsensitiveF::NONE],
        [sSP_limit_car, InsensitiveF::NONE],
        [sSP_limit_course, InsensitiveF::NONE],
        [sSP_limit_enemy, InsensitiveF::NONE],
        [sSP_limit_democar, InsensitiveF::NONE],
        [sSP_sp_savedata, InsensitiveF::NONE],
    ]);

    sOptionMenuGroups = [
        [g_Game, InsensitiveF::NO_GT6],
        [g_WCNT, InsensitiveF::NONE],
        [g_Steering, InsensitiveF::NONE],
        [g_Sound, InsensitiveF::NONE],
        [g_Display, InsensitiveF::NONE],
        [g_GameData, InsensitiveF::NONE],
        [g_Network, InsensitiveF::NO_GT6],
    ];

    sOptionMenuGroups += [
        [g_DP, InsensitiveF::NONE],
        [g_SP, InsensitiveF::NONE],
    ];
}
