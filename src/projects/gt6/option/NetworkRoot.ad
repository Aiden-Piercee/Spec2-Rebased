













module NetworkRoot
{
    hidden.visible = false;

    static sOpenMode;

    method open(context, open_mode)
    {
        if (open_mode != nil)
            sOpenMode = open_mode;

        SettingFrame.appear();
        SequenceUtil::pushPage(context, self);
    }

    method close(context)
    {
        var delay_time = SettingFrame.hide();
        SequenceUtil::popPage(context, self, delay_time);
    }

    static sRegions = ["unknown", "ae", "ar", "at", "au", "be", "bg", "bh", "br", "ca", "ch", "cl", "co", "cy","cz", "de", "dk", "es", 
        "fi", "fr", "gb", "gr", "hk", "hr", "hu", "id", "ie", "il", "in", "is", "it", "jp", "kr", "kw", "lb", "lu", "mt", "mx",
        "my", "nl", "no", "nz", "om", "pe", "pl", "pt", "qa", "ro", "ru", "sa", "se", "sg", "si", "sk", "th", "tr", "tw", "ua", "us", "za", "pdi"];

    method reflect(context)
    {
        var option = main::GAME_STATUS.user_profile.option;
        var is_enabled = option.special_guest != nil && option.special_guest;
        SettingFrame::Pane::ScrolledBody::clip::space::SpecialGuestCheckBox::vbox::Reset.active = is_enabled;

        SettingFrame::Pane::ScrolledBody::clip::space::SpecialGuestUsername::Text.insensitive = !is_enabled;
        SettingFrame::Pane::ScrolledBody::clip::space::SpecialGuestUsername::Text::input.value = option.special_guest_name;

        SettingFrame::Pane::ScrolledBody::clip::space::SpecialGuestRegion::OptionMenu.insensitive = !is_enabled;
        if (option.special_guest_region != nil)
        {
            var regionIdx = sRegions.indexOf(option.special_guest_region);
            SettingFrame::Pane::ScrolledBody::clip::space::SpecialGuestRegion::OptionMenu.setIndex(context, regionIdx != -1 ? regionIdx : 0);
        }
        else
        {
            SettingFrame::Pane::ScrolledBody::clip::space::SpecialGuestRegion::OptionMenu.setIndex(0);
        }
    }

    method apply(context)
    {
        var is_enabled = SettingFrame::Pane::ScrolledBody::clip::space::SpecialGuestCheckBox::vbox::Reset.active;
        var option = main::GAME_STATUS.user_profile.option;
    
        option.special_guest = is_enabled;
        if (is_enabled)
        {
            option.special_guest_name = SettingFrame::Pane::ScrolledBody::clip::space::SpecialGuestUsername::Text::input.value
    
            var idx = SettingFrame::Pane::ScrolledBody::clip::space::SpecialGuestRegion::OptionMenu.index;
            option.special_guest_region = SettingFrame::Pane::ScrolledBody::clip::space::SpecialGuestRegion::OptionMenu.getItem(idx).country_code;
    
            PDINetwork.setUseNickname(true);
            PDINetwork.setPdiServerUserNickname(option.special_guest_name);
        }
        else
            PDINetwork.setUseNickname(false);
    }


    method onInitialize(context)
    {
        if (gDirectApplyMode)
            SettingFrame::Pane::Foot.visible = false;

        OptionProject.SetWidgetEnable(false, SettingFrame::Pane::ScrolledBody::clip::space.getChildList());

        var focus_w;
        switch (sOpenMode)
        {
            case "NET_lan_settings":
                SettingFrame::Pane::Head::label.text = "â˜† Special Guest Settings";

                var option_menu = SettingFrame::Pane::ScrolledBody::clip::space::SpecialGuestRegion::OptionMenu;
                option_menu.popup::vbox.clearChildren(context);
            
                foreach (var region in sRegions)
                {
                    var w = hidden::CountryPulldownItem.doCopy();
        
                    w.label.text = manager.translate("Country", region.upcase());
                    w.CountryFlag.image_path = "/piece/flag_ranking/%{region}.img";
                    w.CountryFlag.visible = true;
        
                    w.defineAttribute("country_code", region); // To grab the actual value
                    option_menu.popup::vbox.appendChild(context, w);
                }
        
                option_menu.applyAppend(context); // To properly render and reflect items added
                option_menu.setIndex(context, 0); // Set the selected index
                
                OptionProject.SetWidgetEnable(true, 
                    [ 
                        SettingFrame::Pane::ScrolledBody::clip::space::SpecialGuestCheckBox,
                        SettingFrame::Pane::ScrolledBody::clip::space::SpecialGuestUsername, 
                        SettingFrame::Pane::ScrolledBody::clip::space::SpecialGuestRegion
                    ]);

                focus_w = SettingFrame::Pane::ScrolledBody::clip::space::SpecialGuestCheckBox::vbox::Reset;
                break;

            case "NET_clear":
                SettingFrame::Pane::Head::label.text = context.translate(OptionRoot, "NET_clear");
                OptionProject.SetWidgetEnable(true, [SettingFrame::Pane::ScrolledBody::clip::space::ClearCache]);
                focus_w = SettingFrame::Pane::ScrolledBody::clip::space::ClearCache::vbox::ExecClear;
                break;

            case "NET_eula":
                SettingFrame::Pane::Head::label.text = context.translate(OptionRoot, "NET_eula");
                OptionProject.SetWidgetEnable(true, [SettingFrame::Pane::ScrolledBody::clip::space::ShowEULA]);
                focus_w = SettingFrame::Pane::ScrolledBody::clip::space::ShowEULA::vbox::Show;
                break;

        }

        reflect(context);

        SettingFrame.adjust_scrolled_body();
        NetworkRoot.setFocus(focus_w);
        SettingFrame::Pane::ScrolledBody::clip::space.parent.warp(focus_w);
    }

    method onCancel(context, event, item)
    {
        main::sound.play("cancel");
        if (gDirectApplyMode)
        {
            NetworkRoot.apply();
            NetworkRoot.close(context);
        }
        else
            NetworkRoot.setFocus(SettingFrame::Pane::Foot::Cancel);

        return 2;
    }

    module SettingFrame::Pane::ScrolledBody::clip::space
    {
        // Fired when pressing the "Enable Special Guest Settings"
        module SpecialGuestCheckBox::vbox::Reset
        {
            method onValueChanged(context)
            {
                SettingFrame::Pane::ScrolledBody::clip::space::SpecialGuestUsername::Text::input.insensitive = !self.active;
                SettingFrame::Pane::ScrolledBody::clip::space::SpecialGuestRegion::OptionMenu.insensitive = !self.active;
            }
        }

        module ClearCache::vbox::ExecClear
        {
            function onActivate(context)
            {
                main::sound.play("ok");

                var message_begin = context.translate(NetworkRoot, "clear_cache");
                var message_waiting = context.translate(NetworkRoot, "now_cleaning");
                var message_success = context.translate(NetworkRoot, "complete");
                var message_failed = nil;
                var func = main::Grim2.clearCacheAll;
                var arg = nil;

                DialogUtil::openConfirmExecDialog(context, message_begin,
                    message_waiting, message_success, message_failed, func, arg);
                return 2;
            }
        }

        module ShowEULA::vbox::Show
        {
            function onActivate(context)
            {
                main::sound.play("ok");
                LoginUtil::showNpEula(context);
                return 2;
            }
        }
    }


    module SettingFrame::Pane::Foot
    {
        module OK
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                NetworkRoot.apply();
                NetworkRoot.close(context);
                return 2;
            }
        }
       
        module Cancel
        {
            method onActivate(context)
            {
                main::sound.play("ok");
                NetworkRoot.close(context);
                return 2;
            }

            method onCancel(context)
            {
                main::sound.play("cancel");
                NetworkRoot.close(context);
                return 2;
            }
        }
    }
}