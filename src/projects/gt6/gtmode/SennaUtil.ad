













module SennaUtil
{
    method getEventIndex(gp, event_id)
    {
        for (var i = 0; i < gp.events.size; i++)
        {
            if (gp.events[i].event_id == event_id)
                return i;
        } 

        return nil;
    }

    method isCompleteEvent(event_id)
    {
        var result = RaceEventUtil::getResult(event_id);
        var is_complete = result >= gtengine::FinishResult::RANK_1 && result <= gtengine::FinishResult::RANK_3;
        return is_complete;
    }

    method isCompleteChapter(chapter)
    {
        var chapter_events = [
            1 : [1000473],
            2 : [1000474],
            3 : [1000476, 1000475],
            4 : nil,
        ];

        var event_id_list = chapter_events[chapter];
        if (event_id_list == nil)
            return true;

        var all_complete = true;
        foreach (var event_id in event_id_list)
        {
            var is_complete = isCompleteEvent(event_id);
            if (!is_complete)
            {
                all_complete = false;
                break;
            }
        }

        return all_complete;
    }

    method checkTrophyUnlock()
    {
        var event_id_list = [
            1000473,
            1000474,
            1000475,
            1000476,
        ];

        var is_complete = true;
        var is_all_gold = true;

        foreach (var event_id in event_id_list)
        {
            var result = RaceEventUtil::getResult(event_id);
            is_complete &= result >= gtengine::FinishResult::RANK_1 && result <= gtengine::FinishResult::RANK_3;
            is_all_gold &= result == gtengine::FinishResult::RANK_1;
        }

        if (is_complete)
        {
            PDINetwork.unlockTrophyAsync(gtengine::TrophyType::SPECIAL_SENNA);
            if (is_all_gold)
                PDINetwork.unlockTrophyAsync(gtengine::TrophyType::SPECIAL_SENNA2);
        }
    }

    method checkPresentCars(context, chapter)
    {
        var chapter_events_map = [
            1 : [1000473],
            2 : [1000474],
            3 : [1000475, 1000476],
            4 : [],
        ];

        var event_list = chapter_events_map[chapter];
        if (event_list == nil)
            return true;

        foreach (var event_id in event_list)
        {
            var present_list = GAME_STATUS.user_profile.record.event_present.getPresentListByEventId(event_id);
            if (present_list == nil || present_list.size == 0)
                break;

            foreach (var present in present_list)
            {
                if (present.itemcategory != 901)
                    continue;

                if (main::GAME_STATUS.user_profile.garage.isFull())
                {
                    sound.play("disable");
                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, 
                        manager.translate(CarShowroomRoot, "Message_GarageFullAtPresentCar"));
                    return;
                } 

                var cp = gtengine::MCarParameter(present.f_name);
                cp.setNewCar();

                GAME_STATUS.user_profile.record.event_present.updateGetStatus(present.event_id, present.present_index);

                var message;
                if (present.present_index != -1 && present.present_index < 3 && present.event_id < 90000000)
                {
                    var head_txt = "";
                    var gold = present.present_index == 0;
                    var silver = present.present_index == 1;
                    var bronze = present.present_index == 2;
                    
                    if (gold)
                    {
                        head_txt = manager.translate("RaceEvent", "THE_GOLD");
                    }
                    else if (silver)
                    {
                        head_txt = manager.translate("RaceEvent", "THE_SILVER");
                    }
                    else if (bronze)
                    {
                        head_txt = manager.translate("RaceEvent", "THE_BRONZE");
                    }

                    message = manager.translate("CommonGTMode", "PRESENT_SEASONAL_EVENT_CAR").build(head_txt);
                }
                else
                {
                    message = manager.translate("CommonGTMode", "PRESENT_CLEAR");
                }

                CarDeliveryRoot.openModal(context, CarDeliveryRoot::OPEN_MODE::PRESENT, cp, message, false);
            }
        }
    }
}