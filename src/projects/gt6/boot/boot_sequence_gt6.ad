














function boot_sequence_gt6(context)
{
    boot_sequence_common(context, "gt6");
}

function display_sequence_gt6(context, pc, initialize_thread)
{
    presents_sequence_common(context);


    while (!boot_state.init_save_data_done)
        yield;
    
    while (!boot_state.sequence_done)
        yield;

    if (boot_state.is_new_game || GAME_STATUS.user_profile.option.need_language_select)
    {
        var langs = pdistd::MLocale::getOutOfSystemLanguages();
        if (langs.size > 0)
        {
            LanguageSelectRoot.open(context, langs);
            while (!LanguageSelectRoot.isFinished())
                yield;
        }

        GAME_STATUS.user_profile.option.need_language_select = false;
    }
        
    if (!AdjustScreenRoot.isDone())
    {
        AdjustScreenRoot.open(context);
        while (!AdjustScreenRoot.isDone())
            yield;
    }
    

    log("[" + __FILE__ + ":" + __LINE__ + "]:" + "applySaveData");
    yield;
    applySaveData();

    showVoucherMessages(context);

    var skipOpening = !GAME_STATUS.user_profile.option.opening_after_autoload;
    if (boot_state.resume_gp != nil)
        skipOpening = true;

    if (!boot_state.is_new_game && !boot_state.recovery_save_data)
    {
        log("[" + __FILE__ + ":" + __LINE__ + "]:" + "BackupSave");
        doBackupSave(context);
    }
    
    if (!skipOpening)
    {
        MovieRoot.open(context);
        while (!MovieRoot.isFinished())
            yield;
    }
}

function start_project_gt6(context)
{
    if (boot_state.resume_gp != nil) {
        var gp = boot_state.resume_gp;
        GameParameterUtil::executeEvent(context, gp, GAME_STATUS);
        return;
    }

    if (TutorialUtil::isBegin("gttop", "introduction") && !AppOpt.defined("skip_tutorial"))
    {
        var fst = pdistd::ReadFile("/game_parameter/gt6/event/tutorial.xml");
        var xml_data = fst["buffer"];
        if (xml_data != nil) {
            var gp_list = GameParameterUtil::parseXML(xml_data);
            var gp = gp_list[0];
            var entry0 = gp.event.entry_set.entries[0];
            entry0.driver_parameter = main::Residence::create_player(false, 0);
            GameParameterUtil::executeEvent(context, gp, GAME_STATUS);
        }
        else
        {
            SequenceUtil::startProject(context, "gtmode");
        }
    }
    else
    {
        TutorialUtil::done("gttop", "introduction");
        if (!TutorialUtil::isDone("gttop", "get_first_car"))
            TutorialUtil::begin("gttop", "get_first_car");
        SequenceUtil::startProject(context, "gtmode");
    }
}