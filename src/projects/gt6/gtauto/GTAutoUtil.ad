

module SHOP_GENRE
{
    static TUNING_PARTS = 0;
    static CUSTOM_PARTS = 1;
    static RACING_GEAR = 2;
    static PAINT = 3;
    static PIT_SERVICE = 4;
}

module TUNING_PARTS_CATEGORY
{
    static TIRE = 0;
    static SUSPENSION = 1;
    static DRIVE_SYSTEM = 2;
    static POWER = 3;
    static BODY = 4;
}

static sTuningPartsCategoryLabels = [
    TUNING_PARTS_CATEGORY::TIRE: "Category_Tire",
    TUNING_PARTS_CATEGORY::SUSPENSION: "Category_Suspension",
    TUNING_PARTS_CATEGORY::DRIVE_SYSTEM: "Category_Drivetrain",
    TUNING_PARTS_CATEGORY::POWER: "Category_Power",
    TUNING_PARTS_CATEGORY::BODY: "Category_Body"
];

module CUSTOM_PARTS_CATEGORY
{
    static AERO_PARTS = 0;
    static WHEEL = 1;
    static METER = 2;
}

module PAINT_CATEGORY
{
    static BODY = 0;
    static WHEEL = 1;
    static BRAKE_CALIPER = 2;
    static CUSTOM_WING = 3;
}

module GTAutoUtil
{

    function getPartsTypeIndex(type_name)
    {
        if (type_name == "TIRE")
            type_name = "FRONT_TIRE";

        if (gtengine::CarPartsType.defined(type_name))
            return gtengine::CarPartsType[type_name];
        else
            return nil;
    }

    function getPartsIndex(type_name, parts_name)
    {
        var parts_enum = "PARTS_%{type_name}";
        if (gtengine.defined(parts_enum) && gtengine[parts_enum].defined(parts_name))
            return gtengine[parts_enum][parts_name];
        else
            return nil;
    }

    function getPartsPrice(cp, type_name, parts_name)
    {
        var parts_price_id = SPECDB.executeQuery1R1C("SELECT PartsPrice FROM GENERIC_CAR WHERE ID=?", [cp.getCarCode()]);
        var price = SPECDB.executeQuery1R1C("SELECT %{type_name}__%{parts_name} FROM PARTS_PRICE WHERE ID=?", [parts_price_id]);
        return price != nil ? price : -1;
    }

    function getPartsPrice2(cp, type_name, parts_name)
    {
        return SPECDB.executeQuery1R1C("SELECT p.%{type_name}__%{parts_name} FROM PARTS_PRICE p, GENERIC_CAR g WHERE g.PartsPrice=p.ID AND g.ID=?", [cp.getCarCode()])
    }

    function getPartsPriceText(cp, type_name, parts_name)
    {
        var price = getPartsPrice(cp, type_name, parts_name);
        return pdiext::MMisc::GetMoneyString(price);
    }

    function applyCarWash(cp)
    {
        cp.rainX = 0.0;
        cp.clearDirt();
    }

    function applyCarRepair(cp)
    {
        cp.clearScratch();
    }

    function applyCarWashAndRepair(cp)
    {
        cp.rainX = 0.0;
        cp.clearDirt();
        cp.clearScratch();
    }

    function getCarRepairCost(cp)
    {
        var scratch = cp.getScratchIndex();
        scratch /= 0.7;
        if (scratch > 1.0)
            scratch = 1.0;
            
        var cost = 500000 / 100 * scratch;
        cost = (cost.toInt() / (5000 / 100) * (5000 / 100)).toInt();
        if (cost < (50000 / 100))
            cost = 50000 / 100;
        return cost;
    }
}