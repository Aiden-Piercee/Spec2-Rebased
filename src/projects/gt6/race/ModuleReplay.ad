














async function getReplayInfo()
{
    var buf = await ORG.getReplayHeaderFromWorkPath();
    if (buf == nil)
        return nil;

    var info = gtengine::MReplayInfo();
    var success = info.initialize(buf);
    if (!success)
        return nil;

    return info;
}

function isValidReplay()
{
    var info = getReplayInfo();
    if (info == nil)
        return false;

    if (info.total_frame_num < 600)
        return false;

    return true;
}

function isCompleteReplay()
{
    var info = getReplayInfo();
    if (info == nil)
        return false;

    if (!info.race_complete)
        return false;

    return true;
}

function canStartReplay()
{
    return isValidReplay();
}

function doStartReplay(context, no_close_action)
{
    var root = context.getCurrentPage();
    var res = ORG.startReplayWithCurrentRace();
    if (!res)
    {
        main::sound.play("disable");
        var text = context.translate(root, "QuickMenu", "NO_REPLAY_TO_START");
        LeaveDetectUtil::suspend(context);
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, text);
        LeaveDetectUtil::resume(context);
        return false;
    }

    main::sound.play("ok");
    if (no_close_action == nil || !no_close_action)
    {
        RaceMenuUtil::closeAction(context);
    }

    if (StageData::chechStageDataIsValid(0))
    {
        SequenceUtil::setupTransition(context, CursorProject::ColorTransition);
        context.pageOutRootTransition();
        context.syncOutRootTransition();
        StageData::clearRaceStageData();
    }

    StageData::loadStageData(gSequenceCondition.gp.event.stage_data.countdown, gSequenceCondition.gp.event.stage_data.layout_type_countdown);

    if (StageData::checkStageData(gSequenceCondition.gp.event.stage_data.race_end))
    {
        StageData::loadStageData(gSequenceCondition.gp.event.stage_data.race_end, gSequenceCondition.gp.event.stage_data.layout_type_race_end, 1);
        var rp = main::ORG.getBackRaceParameter();
        rp.setEventV(0, gSequenceCondition.gp.event.stage_data.race_end[0].vcoord);
        main::ORG.setBackRaceParameter(rp);
    }

    gSequenceCondition.is_buffer_replay_mode = true;
    gSequenceCondition.is_spectator_mode = true;
    gSequenceCondition.is_demo_mode = true;
    gSequenceCondition.is_instant_replay = false;

    ORG.setApplicationTimeLimitNoStopAtPause(false);
    ORG.resetSpectatorCamera();

    SequenceUtil::startPage(context, OnboardMeterRoot, RaceRoot);
    SoundUtil::BGMFadeout(1.0);
    main::ORG.getRaceSound().start = false;

    return true;
}

function canSaveReplay()
{
    return isValidReplay();
}

static cansave_prev = false;
static cansave_next_time = 0L;

function canSaveReplayFast(force)
{
    var update = false;

    if (force != nil && force)
        update = true;
    else if (pdistd::GetSystemTimeMicroSecond() > cansave_next_time)
        update = true;
        
    if (update)
    {
        cansave_prev = isValidReplay();
        cansave_next_time = pdistd::GetSystemTimeMicroSecond() + (pdistd::MRandom::GetValue(45, 75) * 1000000).toLong();
    }

    return cansave_prev;
}

function doSaveReplay(context)
{
    var root = context.getCurrentPage();
    if (!canSaveReplay())
    {
        main::sound.play("disable");
        var text = context.translate(root, "QuickMenu", "NO_REPLAY_TO_SAVE");
        LeaveDetectUtil::suspend(context);
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, text);
        LeaveDetectUtil::resume(context);
        return false;
    }

    main::sound.play("ok");
    UIKitProject::SaveReplayRoot.open(context, ReplayFileUtil::MODE_REPLAY);
    return true;
}

function doSaveAttachReplay(context)
{
    var root = context.getCurrentPage();
    if (!canSaveReplay())
    {
        main::sound.play("disable");
        var text = context.translate(root, "QuickMenu", "NO_REPLAY_TO_SAVE");
        LeaveDetectUtil::suspend(context);
        DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, text);
        LeaveDetectUtil::resume(context);
        return false;
    }

    main::sound.play("ok");
    UIKitProject::SaveReplayRoot.open(context, ReplayFileUtil::MODE_ATTACH);
    return true;
}    

function getGhostReplayInfo(is_load_ghost)
{
    var buf;
    if (is_load_ghost != nil && is_load_ghost)
    {
        buf = ORG.getReplayHeaderFromLoadGhostPath();
    }
    else
    {
        buf = ORG.getReplayHeaderFromGhostPath();
    }

    if (buf == nil)
        return nil;

    var info = main::gtengine::MReplayInfo();
    var success = info.initialize(buf);
    if (!success)
        return nil;

    return info;
}

function isValidGhostReplay()
{
    var info = getGhostReplayInfo();
    if (info == nil)
        return false;
    else
        return true;
}

function canSaveGhost()
{
    return isValidGhostReplay();
} 
