










module KeyboardSwitcher
{
    function changeTarget(context, rank)
    {
        var game_mode = gSequenceCondition.game_mode;
        if (game_mode == gtengine::GameMode::ARCADE_STYLE_RACE)
            return;
            
        var order_list = ORG.getRace().getRankList();
        if (order_list.size < rank)
            return;

        var slot_id = order_list[rank - 1];
        if (slot_id < 0)
            return;

        ORG.setCameraTarget(0, slot_id);
    }

    function changeInfo(context, mode)
    {
        var racedisplay = OnboardMeterRoot::RaceDisplayFace;
        var course_map = OnboardMeterRoot::GT6::Common::MapClip::CourseMapFace;
        var option = GAME_STATUS.user_profile.option;
        var no_mirror = false;

        if (mode == "nothing")
        {
            racedisplay.dispmode = true;
            course_map.mapmode = 0;
            no_mirror = true;
        }
        else if (mode == "time_lap")
        {
            racedisplay.dispmode = false;
            racedisplay.time_disp = true;
            racedisplay.carmeter_disp = false;
            racedisplay.racername_disp = true;

            course_map.mapmode = option.race_map_view_mode;
        }
        else if (mode == "meter")
        {
            racedisplay.dispmode = false;
            racedisplay.time_disp = false;
            racedisplay.carmeter_disp = true;
            racedisplay.racername_disp = false;

            course_map.mapmode = 0;
        }
        else if (mode == "all")
        {
            racedisplay.dispmode = false;
            racedisplay.time_disp = true;
            racedisplay.carmeter_disp = true;
            racedisplay.racername_disp = true;

            course_map.mapmode = option.race_map_view_mode;
        }

        ORG.noDispBackMirror(no_mirror);
    }

    function changeCamera(context, camera_type, mount)
    {
        if (LiveTimingRoot.isActive(context))
            return;

        if (camera_type == gtengine::CameraType::ONBOARD &&
            !ORG.checkMountNum(ORG.getCameraTarget(0), mount))
            return;

        ORG.changeSpectatorCamera(camera_type, mount);
    }

    function onKeyPress(context, event)
    {
        if (!GAME_STATUS.user_profile.option.lounge_keyboard_switcher)
            return false;

        var is_replay = gSequenceCondition.is_buffer_replay_mode;
        var is_bspec = gSequenceCondition.enable_director_command && !is_replay;
        if (is_bspec)
            return false;

        switch (event.keysym)
        {
            // Entry change (1-16) 
            case KEY_1:
            case KEY_2:
            case KEY_3:
            case KEY_4:
            case KEY_5:
            case KEY_6:
            case KEY_7:  
            case KEY_8:
            case KEY_9:
            case KEY_0:
            case KEY_q:
            case KEY_w:
            case KEY_e:
            case KEY_r: 
            case KEY_t:
            case KEY_y:
                var map = [
                    KEY_1 : 1,
                    KEY_2 : 2,
                    KEY_3 : 3,
                    KEY_4 : 4,
                    KEY_5 : 5,
                    KEY_6 : 6,
                    KEY_7 : 7,
                    KEY_8 : 8,
                    KEY_9 : 9,
                    KEY_0 : 10,
                    KEY_q : 11,
                    KEY_w : 12,
                    KEY_e : 13,
                    KEY_r : 14,
                    KEY_t : 15,
                    KEY_y : 16,
                ];

                changeTarget(context, map[event.keysym]);
                break;

            // Replay Camera
            case KEY_h:
                changeCamera(context, gtengine::CameraType::DESIGNER, 0);
                break;

            // Normal Camera
            case KEY_j:
                changeCamera(context, gtengine::CameraType::ONBOARD, gtengine::CameraOnboardMount::DRIVER);
                break;

            // Hood Camera
            case KEY_k:
                changeCamera(context, gtengine::CameraType::ONBOARD, gtengine::CameraOnboardMount::BONNET);
                break;

            // Chase Camera
            case KEY_l:
                changeCamera(context, gtengine::CameraType::ONBOARD, gtengine::CameraOnboardMount::CHASE);
                break;

            case KEY_F1: // Display no information.
            case KEY_F2: // Display all information.
            case KEY_F3: // Display the time and the lap number only.
            case KEY_F4: // Display instruments only.
                var map = [
                    KEY_F1 : "nothing",
                    KEY_F2 : "all",
                    KEY_F3 : "time_lap",
                    KEY_F4 : "meter",
                    KEY_F5 : "meter",
                ];

                changeInfo(context, map[event.keysym]);
                break;
                
            default:
                break;
        }

        return true;
    }
}