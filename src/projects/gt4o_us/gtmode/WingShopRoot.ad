










#define WING_COUNT 21
#define WING_PRICE_DEFAULT 1200

module GTmodeProject::WingShopRoot
{
    // Array of wing prices, [0] is revert to original so 500 Cr.
    // Default will be 1200 - to set custom prices, this array needs to be appended to.
    
    static wing_price = [500];

    static current_car;
    static last_tried_wing;

    function onInitialize(context)
    {
        hidden.visible = false;

        enterPage(context, ROOT, "WingShopTitle");
        ROOT["Common"]["ToolTip"][tip].remove();
        ROOT["Common"]["ToolTip"][tip].value = context.translate(ROOT, "how to try this on");

        current_car = main::game.garage.riding_car;
        current_car.setupPartsBuffer();

        if (main::game.garage.hasRidingCar())
        {
            CarFace.car_garage = current_car;
            CarFace.action_type = "normal";
            CarFace.quality_level = 1;
            CarFace.syncLoading();
            CarFace.car_model.motion = 2;
            CarFace.loadModelOptionMotion("image/gtmode/gtauto/wingShop_camera.mot");
        }
        
        CarFace.car_model.tx = 0.0;
        CarFace.car_model.tz = 0.0;
        CarFace.car_model.ry = 0.0;
        CarFace.car_model.warp();

        var size = current_list.size;
        for (var i = 0; i < WING_COUNT + 1; i++) // + original state
        {
            var wing = i == 0 ? "default" : "p%03d".format(i);
            var item = hidden::Item.doCopy();
            item["bg"].image_path = "image/piece/wing_mini/" + wing + ".png";
            ScrollBox::SelectBox.appendChild(context, item);
            item.defineStatic("parts_name", wing);

            var price = WING_PRICE_DEFAULT;
            if (i < wing_price.size && wing_price[i] != nil)
                price = wing_price[i];

            item.defineStatic("price", price);
            item["done"].visible = false;
        }

        ScrollBox::SelectBox.callFocus(ROOT);
    }

    function onFinalize(context)
    {
        ScrollBox::SelectBox.clearChildren(context);
        leavePage(context, ROOT);
        current_car = nil;
        last_tried_wing = nil;
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        start_page(context, GTAutoRoot);
        return STATE_YIELD;
    }

    function tryon(wing)
    {
        if (last_tried_wing != nil && last_tried_wing == wing)
            return;

        CarFace.wing = wing;
        last_tried_wing = wing;
    }

    function onKeyPress(context, event)
    {
        switch (event.keysym) 
        {

        }

        return STATE_EXIT;
    }

    function onActivate(context, event)
    {
        var wing = event.widget["parts_name"];
        var price = event.widget["price"];
        tryon(wing);

        if (wing == "default")
        {
            if (current_car.haveWing(nil))
            {
                main::sound.play("disable");
                openConfirmDialog(context, 2, context.translate(ROOT, "You do not have any wing"));
            }
            else
            {
                if (!sureEnoughMoney(context, price))
                    return STATE_YIELD;

                var res = openConfirmDialog(context, 1, context.translate(ROOT, "Do you remove your wing?"));
                if (res)
                {
                    main::game.incMoney(-price);
                    refreshMoney(ROOT);
                    main::game.calendar.putBuyWingEvent("");
                    current_car.setWing(nil);
                    refreshMoney(ROOT);
                
                    openConfirmDialog(context, 0, context.translate(ROOT, "You remove your wing"));
                    start_page(context, GTAutoRoot);
                }
            }
        }
        else
        {
            if (current_car.haveWing(nil))
            {
                main::sound.play("disable");
                openConfirmDialog(context, 2, context.translate(ROOT, "You have this wing"));
            }
            else
            {
                if (!sureEnoughMoney(context, price))
                    return STATE_YIELD;

                var res = openConfirmDialog(context, 1, context.translate(ROOT, "Do you buy this?"));
                if (res)
                {
                    main::game.incMoney(-price);
                    refreshMoney(ROOT);
                    main::game.calendar.putBuyWingEvent(wing);
                    current_car.setWing(wing);
                    refreshMoney(ROOT);
                
                    openConfirmDialog(context, 0, context.translate(ROOT, "You bought this"));
                    start_page(context, GTAutoRoot);
                }
            }
        }

        return STATE_YIELD;
    }
}

module GTmodeProject::WingShopRoot::ScrollBox::SelectBox
{
    function onValueChanged(context, index) { }
}

module GTmodeProject::WingShopRoot::hidden::Item
{
    function onFocusEnter(context, event)
    {
        var item = event.widget;
        var name = item["parts_name"];
        tryon(name);
        Price.text = main::menu::MUtility::GetMoneyString(price);

        if (name == "default")
            ROOT["Common"]["ToolTip"]["tip"].value = context.translate(ROOT, "Retrun when you bought");
        else
            Name.text = getWingName(context, name);

        return STATE_YIELD;
    }

    function onFocusLeave(context, event)
    {
        var item = event.widget;
        var name = item["parts_name"];

        if (name == "default")
        {
            ROOT["Common"]["ToolTip"]["tip"].value = context.translate(ROOT, "how to try this on");
        }
    }
}