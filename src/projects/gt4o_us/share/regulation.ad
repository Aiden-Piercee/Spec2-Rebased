
/* Tire Types */
#define TIRE_TYPE_NORMAL 1
#define TIRE_TYPE_SPORTS 2
#define TIRE_TYPE_DIRT 3
#define TIRE_TYPE_SNOW 4

/* Index for each TIRE compound */
#define TIRE_NORMAL_ECONOMY 0
#define TIRE_NORMAL_COMFORT 1
#define TIRE_NORMAL_STREET 2

#define TIRE_SPORTS_HARD 3
#define TIRE_SPORTS_MEDIUM 4
#define TIRE_SPORTS_SOFT 5

#define TIRE_RACING_SUPER_HARD 6
#define TIRE_RACING_HARD 7
#define TIRE_RACING_MEDIUM 8
#define TIRE_RACING_SOFT 9
#define TIRE_RACING_QUALIFY 10

#define TIRE_DIRT 11
#define TIRE_SNOW 12

/* Tire Tables */
#define PARTS_TYPE_FRONTTIRE 25
#define PARTS_TYPE_REARTIRE 26

function getLimitedTire(race_code, course_code)
{
    var race = nil;
    if (race_code != nil)
        race = main::menu::MRaceData(race_code);

    if (course_code == nil)
    {
        if (race != nil)
        {
            course_code = race.course_code;
            
            if (course_code != nil)
            {
                var type = main::menu::MCourseData::GetType(course_code);

                if (type == "dirt")
                    return TIRE_DIRT;

                if (type == "snow")
                    return TIRE_SNOW;

                if (race != nil)
                {
                    if (race.getNeedTire() == TIRE_TYPE_NORMAL)
                        return TIRE_NORMAL_STREET;

                    if (race.getNeedTire() == TIRE_TYPE_SPORTS)
                        return TIRE_SPORTS_SOFT;

                    if (race.getNeedTire() == TIRE_TYPE_DIRT)
                        return TIRE_DIRT;

                    if (race.getNeedTire() == TIRE_TYPE_SNOW)
                        return TIRE_SNOW;
                }
                if (course_code != nil) // Checks again for some reason?
                    return TIRE_RACING_QUALIFY;
                
                return nil;
            }
        }
    }
}

function getLimitedTireFromTireType(limited_tiretype)
{
    switch (limited_tiretype)
    {
        case "NORMAL":
            return TIRE_NORMAL_STREET;
        case "SPORTS":
            return TIRE_SPORTS_SOFT;
        case "RACING":
            return TIRE_RACING_QUALIFY;
        case "DIRT":
            return TIRE_DIRT;
        case "SNOW":
            return TIRE_SNOW;
        case "DIRT_SNOW":
            return nil;
    }
}

function isEquipedLimitedTire(limited_tire, riding_car) // PD typo
{
    if (limited_tire == nil)
        return true;
    
    var equiped_tire = riding_car.getEquipedParts(PARTS_TYPE_FRONTTIRE);

    switch (limited_tire)
    {
        case TIRE_DIRT:
            if (equiped_tire == TIRE_DIRT)
                return true;
        
        case TIRE_SNOW:
            if (equiped_tire == TIRE_SNOW)
                return true;

        case TIRE_NORMAL_STREET:
        case TIRE_SPORTS_SOFT:
        case TIRE_RACING_QUALIFY:
            for (var i = limited_tire; i >= 0; i--)
            {
                if (equiped_tire == i)
                    return true;
            }
            return false;
    }
}

function getHavingLimitedTire(limited_tire, riding_car)
{
    switch (limited_tire)
    {
        case TIRE_DIRT:
            if (riding_car.isHavingParts(PARTS_TYPE_FRONTTIRE, TIRE_DIRT))
                return TIRE_DIRT;
            break;

        case TIRE_SNOW:
            if (riding_car.isHavingParts(PARTS_TYPE_FRONTTIRE, TIRE_SNOW))
                return TIRE_SNOW;

        case TIRE_NORMAL_STREET:
        case TIRE_SPORTS_SOFT:
        case TIRE_RACING_QUALIFY:
            for (var i = limited_tire; i >= 0; i--)
            {
                if (riding_car.isHavingParts(PARTS_TYPE_FRONTTIRE, i))
                    return i;
            }
            break;
    }

    return nil;
}

function setLimitedTire(riding_car, race_code, course_code)
{
    var limited_tire = getLimitedTire(race_code, course_code);
    if (limited_tire == nil)
        return [true, nil];

    if (isEquipedLimitedTire(limited_tire, riding_car))
        return [true, nil];

    var tire = getHavingLimitedTire(limited_tire, riding_car);
    if (tire != nil)
    {
        riding_car.loadPartsInfo();
        riding_car.setParts(PARTS_TYPE_FRONTTIRE, tire);
        riding_car.setParts(PARTS_TYPE_REARTIRE, tire);
        riding_car.syncWheel();
        return [true, tire];
    }
    else
    {
        return [false, limited_tire];
    }
}

function setLimitedTireFromTireType(riding_car, tiretype)
{
    var limited_tire = getLimitedTireFromTireType(race_code, course_code);
    if (limited_tire == nil)
        return [true, nil];

    if (isEquipedLimitedTire(limited_tire, riding_car))
    {
        riding_car.loadPartsInfo();

        var equiped_tire = riding_car.getEquipedParts(PARTS_TYPE_FRONTTIRE);
        riding_car.setParts(PARTS_TYPE_FRONTTIRE, equiped_tire, 1);

        equiped_tire = riding_car.getEquipedParts(PARTS_TYPE_REARTIRE);
        riding_car.setParts(PARTS_TYPE_REARTIRE, equiped_tire, 1);

        return [true, equiped_tire];
    }
    
    var tire = getHavingLimitedTire(limited_tire, riding_car);
    if (tire != nil)
    {
        riding_car.loadPartsInfo();
        riding_car.setParts(PARTS_TYPE_FRONTTIRE, tire, 1);
        riding_car.setParts(PARTS_TYPE_REARTIRE, tire, 1);
        riding_car.syncWheel();
        return [true, tire];
    }
    else
    {
        return [false, limited_tire];
    }
}

function isEquipedTireType(limited_type, riding_car)
{
    if (limited_tire == nil)
        return true;

    var equiped_tire = riding_car.getEquipedParts(PARTS_TYPE_FRONTTIRE);
    switch (limited_type)
    {
        case "NORMAL":
            if (equiped_tire == TIRE_NORMAL_ECONOMY || equiped_tire == TIRE_NORMAL_COMFORT || equiped_tire == TIRE_NORMAL_STREET)
                return true;
            break;

        case "SPORTS":
            if (equiped_tire == TIRE_SPORTS_HARD || equiped_tire == TIRE_SPORTS_MEDIUM || equiped_tire == TIRE_SPORTS_SOFT)
                return true;
            break;

        case "RACING":
            if (equiped_tire == TIRE_RACING_SUPER_HARD || 
                equiped_tire == TIRE_RACING_HARD || 
                equiped_tire == TIRE_RACING_MEDIUM ||
                equiped_tire == TIRE_RACING_SOFT ||
                equiped_tire == TIRE_RACING_QUALIFY)
                return true;
            break;

        case "DIRT":
            if (equiped_tire == TIRE_DIRT)
                return true;
            break;

        case "SNOW":
            if (equiped_tire == TIRE_SNOW)
                return true;
            break;

        case "DIRT_SNOW":
            if (equiped_tire == TIRE_DIRT || equiped_tire == TIRE_SNOW)
                return true;
            break;
    }

    return false;
}

class Regulation
{
    attribute violated;
    attribute drivetrain;
    attribute aspiration;
    attribute cartype;
    attribute tiretype;
    attribute need_ps;
    attribute limit_ps;
    attribute need_price;
    attribute limit_weight;
    attribute need_weight;
    attribute length;
    attribute country;
    attribute year;
    attribute carlist;
    attribute need_point;

    method __init__()
    {
        violated = false;
    }

    method hasNothing()
    {
        return (drivetrain == nil && 
            aspiration == nil && 
            cartype == nil &&
            tiretype == nil &&
            need_ps == nil &&
            limit_ps == nil &&
            need_price == nil &&
            limit_weight == nil &&
            length == nil &&
            country == nil &&
            year == nil &&
            carlist == nil &&
            need_point == nil);
    }
}

function getViolatedRegulationFromStructure(riding_car, online_point, limited_regulation)
{
    var regulation = Regulation();
    if (limited_regulation == nil)
        return regulation;

    riding_car.updateCurrentStatus();
    
    var car_code = riding_car.car_code;
    var limited_drivetrain = limited_regulation.drivetrain;

    if (limited_drivetrain != nil)
    {
        var dt = riding_car.getDTrainType();
        switch (limited_regulation)
        {
            case "FR":
                if (dt != "FR")
                {
                    regulation.violated = true;
                    regulation.drivetrain = "FR";
                }
                break;

            case "FF":
                if (dt != "FF")
                {
                    regulation.violated = true;
                    regulation.drivetrain = "FF";
                }
                break;

            case "4WD":
                if (dt != "4WD")
                {
                    regulation.violated = true;
                    regulation.drivetrain = "4WD";
                }
                break;

            case "MR":
                if (dt != "MR")
                {
                    regulation.violated = true;
                    regulation.drivetrain = "MR";
                }
                break;

            case "RR":
                if (dt != "RR")
                {
                    regulation.violated = true;
                    regulation.drivetrain = "RR";
                }
                break;
        }
    }

    var limited_aspiration = limited_regulation.aspiration;
    if (limited_aspiration != nil)
    {
        switch (limited_aspiration)
        {
            case "NATUNE":
                if (!riding_car.isNAtune())
                {
                    regulation.violated = true;
                    regulation.aspiration = "NATUNE";
                }
                break;

            case "TURBO":
                if (!riding_car.isTurbo())
                {
                    regulation.violated = true;
                    regulation.aspiration = "TURBO";
                }
                break;

            case "SUPERCHARGER":
                if (!riding_car.isSuperCharger())
                {
                    regulation.violated = true;
                    regulation.aspiration = "SUPERCHARGER";
                }
                break;
            
        }
    }

    var limited_cartype = limited_regulation.cartype;
    if (limited_cartype != nil)
    {
        switch (limited_cartype)
        {
            case "NORMAL":
                var category = main::menu::MCarData::GetCategory(car_code);
                if (category != "NORMAL")
                {
                    regulation.violated = true;
                    regulation.cartype = "NORMAL";
                }
                break;

            case "RACING":
                var category = main::menu::MCarData::GetCategory(car_code);
                if (category != "RACING")
                {
                    regulation.violated = true;
                    regulation.cartype = "RACING";
                }
                break;

            case "OPEN":
                if (!riding_car.isOpenCar())
                {
                    regulation.violated = true;
                    regulation.cartype = "OPEN";
                }
                break;
        }
    }

    var limited_tiretype = limited_regulation.tiretype;
    if (limited_tiretype != nil)
    {
        switch (limited_tiretype)
        {
            case "NORMAL":
                if (getHavingLimitedTire(TIRE_NORMAL_STREET, riding_car) == nil)
                {
                    regulation.violated = true;
                    regulation.tiretype = limited_tiretype;
                }
                break;

            case "SPORTS":
                if (getHavingLimitedTire(TIRE_SPORTS_MEDIUM, riding_car) == nil)
                {
                    regulation.violated = true;
                    regulation.tiretype = limited_tiretype;
                }
                break;

            case "DIRT":
                if (getHavingLimitedTire(TIRE_DIRT, riding_car) == nil)
                {
                    regulation.violated = true;
                    regulation.tiretype = limited_tiretype;
                }
                break;

            case "SNOW":
                if (getHavingLimitedTire(TIRE_SNOW, riding_car) == nil)
                {
                    regulation.violated = true;
                    regulation.tiretype = limited_tiretype;
                }
                break;

            case "DIRT_SNOW":
                if (getHavingLimitedTire(TIRE_DIRT, riding_car) == nil || 
                    getHavingLimitedTire(TIRE_SNOW, riding_car) == nil)
                {
                    regulation.violated = true;
                    regulation.tiretype = limited_tiretype;
                }
                break;
        }
    }

    var need_ps = limited_regulation.need_ps;
    if (need_ps != nil)
    {
        var ps = riding_car.getCurrentPowerUnitPS();
        if (need_ps > ps)
        {
            regulation.violated = true;
            regulation.need_ps = need_ps;
        }
    }

    var limit_ps = limited_regulation.limit_ps;
    if (limit_ps != nil)
    {
        var ps = riding_car.getCurrentPowerUnitPS();
        if (limit_ps < ps)
        {
            regulation.violated = true;
            regulation.limit_ps = limit_ps;
        }
    }

    var need_price = limited_regulation.need_price;
    if (need_price != nil)
    {
        var price = riding_car.getUsedSellPrice();
        if (need_price > price)
        {
            regulation.violated = true;
            regulation.need_price = need_price;
        }
    }

    var limit_weight = limited_regulation.limit_weight;
    if (limit_weight != nil)
    {
        var weight = riding_car.getCurrentWeight();
        if (limit_weight < weight)
        {
            regulation.violated = true;
            regulation.limit_weight = limit_weight;
        }
    }

    var need_weight = limited_regulation.need_weight;
    if (need_weight != nil)
    {
        var weight = riding_car.getCurrentWeight();
        if (need_weight > weight)
        {
            regulation.violated = true;
            regulation.need_weight = need_weight;
        }
    }

    var limit_length = limited_regulation.limit_length;
    if (limit_length != nil)
    {
        var length = riding_car.getLength();
        if (limit_length < length)
        {
            regulation.violated = true;
            regulation.limit_length = limit_length;
        }
    }

    var country_list = limited_regulation.country;
    if (country_list != nil)
    {
        var country = main::menu::MCarData::GetCountry(car_code);
        var violated = true;
        regulation.country = true;

        for (var i = 0; i < country_list.size; i++)
        {
            if (country == country_list[i])
            {
                violated = false;
                regulation.country = nil;
                break;
            }
        }
    
        if (violated)
            regulation.violated = true;
    }

    var minmax = limited_regulation.year;
    if (minmax != nil)
    {
        var [min, max] = minmax;
        var year = main::menu::MCarData::GetModelYear(car_code);

        if (year < min || max < year)
        {
            regulation.violated = true;
            regulation.year = true;
        }
    }

    var list = limited_regulation.car_list;
    if (list != nil && list.size > 0)
    {
        var violated = true;
        for (var i = 0; i < list.size; i++)
        {
            if (car_code == list[i])
            {
                violated = false;
                break;
            }
        }

        if (violated)
        {
            regulation.violated = true;
            regulation.carlist = list;
        }
    }

    var need_point = limited_regulation.need_point;
    if (need_point != nil)
    {
        if (need_point > online_point)
        {
            regulation.violated = true;
            regulation.need_point = need_point;
        }
    }

    return regulation;
}

function getViolatedRegulation(riding_car, race_code)
{
    var regulation = Regulation();
    if (race_code == nil)
        return regulation;

    riding_car.updateCurrentStatus();
    
    var race = main::menu::MRaceData(race_code);
    var car_code = riding_car.car_code;
    var limited_drivetrain = race.drivetrain;

    if (limited_drivetrain != nil)
    {
        var dt = race.getNeedDrivetrain();
        switch (limited_regulation)
        {
            case "FR":
                if (dt != "FR")
                {
                    regulation.violated = true;
                    regulation.drivetrain = "FR";
                }
                break;

            case "FF":
                if (dt != "FF")
                {
                    regulation.violated = true;
                    regulation.drivetrain = "FF";
                }
                break;

            case "4WD":
                if (dt != "4WD")
                {
                    regulation.violated = true;
                    regulation.drivetrain = "4WD";
                }
                break;

            case "MR":
                if (dt != "MR")
                {
                    regulation.violated = true;
                    regulation.drivetrain = "MR";
                }
                break;

            case "RR":
                if (dt != "RR")
                {
                    regulation.violated = true;
                    regulation.drivetrain = "RR";
                }
                break;
        }
    }

    var limited_aspiration = race.getNeedAspiration();
    if (limited_aspiration != nil)
    {
        switch (limited_aspiration)
        {
            case "NATUNE":
                if (!riding_car.isNAtune())
                {
                    regulation.violated = true;
                    regulation.aspiration = "NATUNE";
                }
                break;

            case "TURBO":
                if (!riding_car.isTurbo())
                {
                    regulation.violated = true;
                    regulation.aspiration = "TURBO";
                }
                break;

            case "SUPERCHARGER":
                if (!riding_car.isSuperCharger())
                {
                    regulation.violated = true;
                    regulation.aspiration = "SUPERCHARGER";
                }
                break;
            
        }
    }

    var limited_cartype = race.getNeedCarType();
    if (limited_cartype != nil)
    {
        switch (limited_cartype)
        {
            case "NORMAL":
                var category = main::menu::MCarData::GetCategory(car_code);
                if (category != "NORMAL")
                {
                    regulation.violated = true;
                    regulation.cartype = "NORMAL";
                }
                break;

            case "RACING":
                var category = main::menu::MCarData::GetCategory(car_code);
                if (category != "RACING")
                {
                    regulation.violated = true;
                    regulation.cartype = "RACING";
                }
                break;

            case "OPEN":
                if (!riding_car.isOpenCar())
                {
                    regulation.violated = true;
                    regulation.cartype = "OPEN";
                }
                break;
        }
    }

    var limited_tiretype = race.getNeedTire();
    if (limited_tiretype != nil)
    {
        switch (limited_tiretype)
        {
            case "NORMAL":
                if (getHavingLimitedTire(TIRE_NORMAL_STREET, riding_car) == nil)
                {
                    regulation.violated = true;
                    regulation.tiretype = limited_tiretype;
                }
                break;

            case "SPORTS":
                if (getHavingLimitedTire(TIRE_SPORTS_MEDIUM, riding_car) == nil)
                {
                    regulation.violated = true;
                    regulation.tiretype = limited_tiretype;
                }
                break;

            case "DIRT":
                if (getHavingLimitedTire(TIRE_DIRT, riding_car) == nil)
                {
                    regulation.violated = true;
                    regulation.tiretype = limited_tiretype;
                }
                break;

            case "SNOW":
                if (getHavingLimitedTire(TIRE_SNOW, riding_car) == nil)
                {
                    regulation.violated = true;
                    regulation.tiretype = limited_tiretype;
                }
                break;

            case "DIRT_SNOW":
                if (getHavingLimitedTire(TIRE_DIRT, riding_car) == nil || 
                    getHavingLimitedTire(TIRE_SNOW, riding_car) == nil)
                {
                    regulation.violated = true;
                    regulation.tiretype = limited_tiretype;
                }
                break;
        }
    }

    var need_ps = race.getNeedPs();
    if (need_ps != nil)
    {
        var ps = riding_car.getCurrentPowerUnitPS();
        if (need_ps > ps)
        {
            regulation.violated = true;
            regulation.need_ps = need_ps;
        }
    }

    var need_price = race.getNeedPrice();
    if (need_price != nil)
    {
        var price = riding_car.getUsedSellPrice();
        if (need_price > price)
        {
            regulation.violated = true;
            regulation.need_price = need_price;
        }
    }

    var limit_weight = race.getLimitedWeight();
    if (limit_weight != nil)
    {
        var weight = riding_car.getCurrentWeight();
        if (limit_weight < weight)
        {
            regulation.violated = true;
            regulation.limit_weight = limit_weight;
        }
    }

    var limit_length = race.getLimitedLength();
    if (limit_length != nil)
    {
        var length = riding_car.getLength();
        if (limit_length < length)
        {
            regulation.violated = true;
            regulation.limit_length = limit_length;
        }
    }

    var country_list = race.getNeedCountry();
    if (country_list != nil)
    {
        var country = main::menu::MCarData::GetCountry(car_code);
        var violated = true;
        regulation.country = true;

        for (var i = 0; i < country_list.size; i++)
        {
            if (country == country_list[i])
            {
                violated = false;
                regulation.country = nil;
                break;
            }
        }
    
        if (violated)
            regulation.violated = true;
    }

    var minmax = race.getNeedYearRange();
    if (minmax != nil)
    {
        var [min, max] = minmax;
        var year = main::menu::MCarData::GetModelYear(car_code);

        if (year < min || max < year)
        {
            regulation.violated = true;
            regulation.year = true;
        }
    }

    var list = race.getAllowedCarList();
    if (list != nil && list.size > 0)
    {
        var violated = true;
        for (var i = 0; i < list.size; i++)
        {
            if (car_code == list[i])
            {
                violated = false;
                break;
            }
        }

        if (violated)
        {
            regulation.violated = true;
            regulation.carlist = list;
        }
    }

    return regulation;
}

