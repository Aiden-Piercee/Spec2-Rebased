











import main::menu;
import main::manager;

if (menu.defined("BasicColormap"))
{
    menu::BasicColormap = [
        ["basic_color_selected", 0xDC, 0xAC, 0x1E, 0xFF],
        ["basic_color_unselected", 0xC3, 0xC3, 0xC8, 0xFF],
        ["basic_color_insensitive", 0x78, 0x78, 0x7B, 0xFF],
        ["basic_color_most_bright", 0xD4, 0xD4, 0xD4, 0xFF],
        ["basic_color_next_bright", 0xC0, 0xC0, 0xC0, 0xFF],
        ["basic_color_popup_header_string", 0x7D, 0x7D, 0x80, 0xFF],
        ["basic_color_tooltip_string", 0x7D, 0x7D, 0x80, 0xFF],
        ["basic_color_panel_item_dark", 0x8D, 0x8D, 0x94, 0xDC],
        ["basic_color_panel_item_light", 0x9A, 0x9A, 0xA4, 0xE6],
    ];
}

manager = menu::MManager();
if (menu.defined("MBoolAttribute"))
    manager.registerClass(menu::MBoolAttribute);

if (menu.defined("MIntAttribute"))
    manager.registerClass(menu::MIntAttribute);

if (menu.defined("MFloatAttribute"))
    manager.registerClass(menu::MFloatAttribute);
    
if (menu.defined("MStringAttribute"))
    manager.registerClass(menu::MStringAttribute);

if (menu.defined("MColorAttribute"))
    manager.registerClass(menu::MColorAttribute);

if (menu.defined("MFaceColorAttribute"))
    manager.registerClass(menu::MFaceColorAttribute);

if (menu.defined("MVectorAttribute"))
    manager.registerClass(menu::MVectorAttribute);

if (menu.defined("MVector3Attribute"))
    manager.registerClass(menu::MVector3Attribute);

if (menu.defined("MActorSet"))
    manager.registerClass(menu::MActorSet);

manager.registerClass(menu::MBoolInterpolator);
manager.registerClass(menu::MColorInterpolator);
manager.registerClass(menu::MChaseActor);
manager.registerClass(menu::MFaceColorInterpolator);
manager.registerClass(menu::MFadeActor);

if (menu.defined("MIntInterpolator"))
    manager.registerClass(menu::MIntInterpolator);

manager.registerClass(menu::MMoveActor);
manager.registerClass(menu::MParallelActor);
manager.registerClass(menu::MScalarInterpolator);
manager.registerClass(menu::MSequenceActor);
manager.registerClass(menu::MVectorInterpolator);
manager.registerClass(menu::MVector3Interpolator);
manager.registerClass(menu::MDynamicActor);
manager.registerClass(menu::MEffectCamera);
manager.registerClass(menu::MEffectEdgeBlur);
manager.registerClass(menu::MEffectLightState);
manager.registerClass(menu::MEffectPointLight);

if (menu.defined("MEffectRound"))
    manager.registerClass(menu::MEffectRound);

if (menu.defined("MEffectWipe"))
    manager.registerClass(menu::MEffectWipe);

manager.registerClass(menu::MAnimationTextFace);

if (menu.defined("MChartFace"))
    manager.registerClass(menu::MChartFace);

manager.registerClass(menu::MBSpecMeterFace);
manager.registerClass(menu::MBlurFace);
manager.registerClass(menu::MCascadeRoot);
manager.registerClass(menu::MColorChipFace);
manager.registerClass(menu::MColorFace);
manager.registerClass(menu::MComposite);
manager.registerClass(menu::MComposite3D);
manager.registerClass(menu::MCourseEditorFace);
manager.registerClass(menu::MCourseMapFace);
manager.registerClass(menu::MCursorFace);
manager.registerClass(menu::MDataLoggerFace);
manager.registerClass(menu::MFBox);
manager.registerClass(menu::MFlashFace);
manager.registerClass(menu::MFrameImageFace);
manager.registerClass(menu::MGTView);
manager.registerClass(menu::MGraphFace);
manager.registerClass(menu::MHBox);
manager.registerClass(menu::MHScrollbar);
manager.registerClass(menu::MIconBox);
manager.registerClass(menu::MImageFace);
manager.registerClass(menu::MImageShape);

if (menu.defined("MImageText"))
    manager.registerClass(menu::MImageText);

manager.registerClass(menu::MInputNumberFace);
manager.registerClass(menu::MInputTextFace);
manager.registerClass(menu::MInstance);
manager.registerClass(menu::MInstanceActor);
manager.registerClass(menu::MListBox);
manager.registerClass(menu::MListBox3D);
manager.registerClass(menu::MMBox);
manager.registerClass(menu::MModelFace);
manager.registerClass(menu::MMovieFace);
manager.registerClass(menu::MOptionMenu);
manager.registerClass(menu::MPaintingBooth);

if (menu.defined("MParticleConfetti"))
    manager.registerClass(menu::MParticleConfetti);

manager.registerClass(menu::MParticleFace);

if (menu.defined("MParticleLeafDrop"))
    manager.registerClass(menu::MParticleLeafDrop);

if (menu.defined("MParticleSpark"))
    manager.registerClass(menu::MParticleSpark);

if (menu.defined("MPieChart"))
    manager.registerClass(menu::MPieChart);

if (menu.defined("MPieSeries"))
    manager.registerClass(menu::MPieSeries);

manager.registerClass(menu::MProgressFace);
manager.registerClass(menu::MProject);
manager.registerClass(menu::MQueueBox);
manager.registerClass(menu::MRaceDisplayFace);

if (menu.defined("MRaderChart"))
    manager.registerClass(menu::MRaderChart);

if (menu.defined("MRaderSeries"))
    manager.registerClass(menu::MRaderSeries);

manager.registerClass(menu::MRenderControl);
manager.registerClass(menu::MRootWindow);
manager.registerClass(menu::MSBox);
manager.registerClass(menu::MScaleBar);
manager.registerClass(menu::MSceneFace);
manager.registerClass(menu::MScrollArrow);
manager.registerClass(menu::MScrollBase);
manager.registerClass(menu::MScrollBox);
manager.registerClass(menu::MScrollClip);
manager.registerClass(menu::MScrollPinch);
manager.registerClass(menu::MScrollWindow);
manager.registerClass(menu::MScrolledWindow);
manager.registerClass(menu::MSelectBox);
manager.registerClass(menu::MShaderFace);
manager.registerClass(menu::MSliderBar);
manager.registerClass(menu::MSpectatorDisplayFace);

if (menu.defined("MStrokePoint"))
    manager.registerClass(menu::MStrokePoint);

manager.registerClass(menu::MTextBoxFace);
manager.registerClass(menu::MTextFace);
manager.registerClass(menu::MToolTipFace);
manager.registerClass(menu::MVBox);
manager.registerClass(menu::MVScrollbar);
manager.registerClass(menu::MVirtualFace);

if (menu.defined("MCourseMapBG"))
    manager.registerClass(menu::MCourseMapBG);

if (menu.defined("MCourseMapLine"))
    manager.registerClass(menu::MCourseMapLine);

if (menu.defined("MCourseMapMarker"))
    manager.registerClass(menu::MCourseMapMarker);
    
if (menu.defined("MCourseMapSpan"))
    manager.registerClass(menu::MCourseMapSpan);

manager.registerClass(menu::MComponent);
manager.registerClass('MScrollable', menu::MScrollable);
manager.registerClass('MScroller', menu::MScrollable);
manager.registerClass('MButton', menu::MWidget);
manager.registerClass('MColorWindow', menu::MColorFace);
manager.registerClass('MCourseEditorFace', menu::MWidget);

prototypes = manager.loadPrototype("Prototypes");
manager.registerPrimitives(prototypes);
