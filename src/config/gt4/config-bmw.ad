












static MpegRoot = "bmw_pal"; // Picked by engine
static RacePauseTimeOut = 90;
static StartSequence = "autodemo"; // Picked by engine
static StartProject = "arcade"; // Picked by engine
static MenuTimeLimit = 30;
static MenuForceGame = "SingleRace";
static ArcadeQuickSkip = true;
static RaceEndLoadingAdvertiseFile;

if (main::menu::MSystem::GetVersionBranch() == "bmw")
{
    main::game.option.arcade_time_limit = 180;
}

RaceEndLoadingAdvertiseFile = "bmw.img";

main::game.option.replay_bgm = false;
main::game.option.race_laps = 1;

#include "language.h"
UsingLanguages.push("GB");
UsingLanguages.push("FR");
UsingLanguages.push("DE");
UsingLanguages.push("IT");
UsingLanguages.push("ES");
static UsingLanguageNum = UsingLanguages.size;

#include "course.h"

static MenuOverrideCourse = true;
static race_crslist = [];
race_crslist.push(ArcadeCourse("nurburgring", 20832.0, 300.0));
race_crslist.push(ArcadeCourse("newyork", 4170.2, 9.2));
race_crslist.push(ArcadeCourse("capri", 4019.8, 303.9));

static MenuHotCarName = "hot";
static MenuOverrideHotCar = true;

static hot_carnum = 2;
static hot_carlist = [];
hot_carlist.push("_120d_04");
hot_carlist.push("_120i_04");

static hot_dirt_carnum = 2;
static hot_dirt_carlist = [];
hot_dirt_carlist.push("gt4e3_md__120d_04");
hot_dirt_carlist.push("gt4e3_md__120i_04");

class Demo
{
    attribute type;
    attribute name;
    attribute arg;

    method __init__(tp, nm, ag)
    {
        type = tp;
        name = nm;
        arg = ag;
    }

    method getType()
    {
        switch (type)
        {
            case 0:
                return "autodemo"
                break;

            case 1:
                return "menu";
                break;

            case 2:
                return "replay";
                break;
        }
    }
}

static DemonstrationFiles = [
    "demo_120d_cap",
    "demo_120d_nur",
    "demo_120d_ny",
];

static DemoList = [
    Demo(1, "demo_movie", "bmw_opening"),
    Demo(1, "demo_movie", "bmw%s"),
    Demo(3, "demo_120d_cap", "0"),
    Demo(3, "demo_120d_nur", "1"),
    Demo(3, "demo_120d_ny", "2"),
];

function setNextDemo(index)
{
    var num = DemoList.size;
    if (index < 0 || num <= index)
        index = 0;

    var demo = DemoList[index];
    var demonstration = main::game.demonstration;
    demonstration.type = demo.getType();
    demonstration.name = demo.name;
    return true;
}

main::game.demonstration.initialize(DemoList.size, 150, 4);
main::game.demonstration.restart_from_beginning = true;

function last_strap()
{
    main::menu::MSystem::SetLanguage("GB");
    setStaticLanguage();
}