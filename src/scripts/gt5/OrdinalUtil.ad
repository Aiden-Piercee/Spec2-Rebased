

//---------------------------------------------------------------------------------------
// OptionMenuUtil.ad
//
// Utility module for translating strings to ordinal
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module OrdinalUtil
{
    function getOrdinalNumber(context, project, num)
    {
        var use_lang = main::pdistd::MLocale::getLanguage();
        var ret_string;
        if (use_lang == "GB" || use_lang == "US") // British and Americans
        {
            var temp = num % 100;
            if (temp == 11 || temp == 12 || temp == 13)
                ret_string = context.translate(project, "Number", "ordinal_th");
            else
            {
                temp = num % 10;
                switch (temp)
                {
                    case 1:
                        ret_string = context.translate(project, "Number", "ordinal_st");
                        break;

                    case 2:
                        ret_string = context.translate(project, "Number", "ordinal_nd");
                        break;

                    case 3:
                        ret_string = context.translate(project, "Number", "ordinal_rd");
                        break;

                    default:
                        ret_string = context.translate(project, "Number", "ordinal_th");
                        break;
                }
            }
        }
        else if (use_lang == "FR") // French
        {
            if (num == 1)
                ret_string = context.translate(project, "Number", "ordinal_st");
            else 
                ret_string = context.translate(project, "Number", "ordinal_nd");
        }
        else // Anybody else..
        {
            ret_string = context.translate(project, "Number", "ordinal_st");
        }

        return ret_string;
    }

    function getOrdinalNumber(num, use_format = false)
    {
        var ret_string = getFormat(num);
        var number;

        if (use_format)
            number = pdiext::GetNumberString(num); 
        else
            number = num;

        var text = ret_string.build(number);
        return text;
    }

    function getOrdinalNumberSeparate(num, use_format = false)
    {
        var ret_string = getFormat(num);
        var number;

        if (use_format)
            number = pdiext::GetNumberString(num); 
        else
            number = num;

        return [ret_string.build(number), ret_string.build("")];
    }
}