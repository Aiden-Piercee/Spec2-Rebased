













module TvFileUtil
{
    static TABLE_VERSION = 105;

    function initialize()
    {
        var table_list = [
            "t_tv_list",
            "t_tv_list_cascade",
            "t_tv_set",
            "t_tv_set_image",
            "t_tv",
            "t_tv_image",
            "t_tv_chapter",
            "t_tv_caption",
        ];

        foreach (var table in table_list)
            DBUtil::initializeTable(table, TABLE_VERSION);

        var sql_list = [
            ("CREATE TABLE IF NOT EXISTS %s (list_id INTEGER, language TEXT, root INTEGER, s_image_id INTEGER, m_image_id INTEGER, sort_key INTEGER, "
            "provider TEXT, name TEXT, description TEXT, new_flag INTEGER, copyright TEXT, "
            "PRIMARY KEY (list_id, language))").format("t_tv_list"),

            ("CREATE TABLE IF NOT EXISTS %s (list_id INTEGER, language TEXT, file_id INTEGER, type TEXT, sort_key INTEGER, "
            "hidden INTEGER, offline INTEGER, achievement INTEGER, rating INTEGER, "
            "PRIMARY KEY (list_id, language, file_id, type))").format("t_tv_list_cascade"),

            ("CREATE TABLE IF NOT EXISTS %s (set_id INTEGER, language TEXT, days INTEGER, sort_key INTEGER, new_flag INTEGER, rating INTEGER, "
            "begin_date INTEGER, end_date INTEGER, sku TEXT, description TEXT, copyright TEXT, title TEXT, subtitle TEXT, hd TEXT, s_image_id INTEGER, m_image_id INTEGER, "
            "PRIMARY KEY (set_id, language))").format("t_tv_set"),

            ("CREATE TABLE IF NOT EXISTS %s (id INTEGR, set_id INTEGER, language TEXT, image_id INTEGER, "
            "PRIMARY KEY (id))").format("t_tv_set_image"),

            ("CREATE TABLE IF NOT EXISTS %s (tv_id INTEGER, language TEXT, file_id INTEGER, trailer_file_id INTEGER, contents_size INTEGER, hidden INTEGER, "
            "bd_only INTEGER, audio INTEGER, duration INTEGER, days INTEGER, sort_key INTEGER, "
            "belt_top INTEGER, belt_bottom INTEGER, belt_left INTEGER, belt_right INTEGER, "
            "contents_key BLOB, entitlement TEXT, sku TEXT, begin_date INTEGER, end_date INTEGER, "
            "achievement TEXT, offline TEXT, description TEXT, copyright TEXT, title TEXT, subtitle TEXT, "
            "audiolevel TEXT, width TEXT, height TEXT, hd TEXT, fileinfo_size TEXT, fileinfo_hash TEXT, rating INTEGER, new_flag INTEGER, s_image_id INTEGER, m_image_id INTEGER, "
            "rating_image_us INTEGER, rating_image_eu INTEGER, recommend INTEGER, psp_export INTEGER, "
            "PRIMARY KEY (tv_id, language))").format("t_tv"),

            ("CREATE TABLE IF NOT EXISTS %s (id INTEGER, tv_id INTEGER, language TEXT, image_id INTEGER, "
            "PRIMARY KEY (id))").format("t_tv_image"),

            ("CREATE TABLE IF NOT EXISTS %s (tv_id INTEGER, language TEXT, time INTEGER, "
            "PRIMARY KEY (tv_id, language, time))").format("t_tv_chapter"),

            ("CREATE TABLE IF NOT EXISTS %s (tv_id INTEGER, language TEXT, time INTEGER, scroll INTEGER, text TEXT, "
            "PRIMARY KEY (tv_id, language, time))").format("t_tv_caption"),
        ];

        var dummy_param = [];
        var sql_list0 = Array();

        foreach (var sql in sql_list)
            sql_list0.push([sql, dummy_param]);

        SQLITE.executeTransaction(sql_list0);
    }

    ////////////////////////////
    // TV Lists
    ////////////////////////////
    function getTvListIdAll()
    {
        var sql = "SELECT list_id FROM %s WHERE language = ? ORDER BY list_id".format("t_tv_list");
        var res = SQLITE.executeQuery(sql, [getLanguage()]);
        
        var result = Map();
        foreach (var l in res)
            result[l[0]] = true;

        return result;
    }

    function getTvIdAll()
    {
        var sql = "SELECT tv_id FROM %s WHERE language = ? ORDER BY tv_id".format("t_tv");
        var res = SQLITE.executeQuery(sql, [getLanguage()]);
        
        var result = Map();
        foreach (var l in res)
            result[l[0]] = true;

        return result;
    }

    function getTvIdList(list_id, order, by)
    {
        var language = getLanguage();

        var sql1 = "SELECT * FROM %s WHERE language = ? AND list_id = ?".format("t_tv_list");
        var res1 = SQLITE.executeQuery(sql1, [language, list_id]);
        if (res1.size == 0)
            return nil;

        var l = res1[0];

        var result = [
            l : res1[0],
            "list_id" : l[1],
            "root" : l[2],
            "s_image_id" : l[3],
            "m_image_id" : l[4],
            "sort_key" : l[5],
            "provider" : l[6],
            "name" : l[7],
            "description" : l[8],
            "new" : l[9],
            "copyright" : l[10],
        ];

        var tv_ids = [];
        var sql2 = "SELECT * FROM %s WHERE language = ? AND list_id = ? AND hidden = 0 %s"
            .format("t_tv_list_cascade", createOrderBy(order, by));

        var res2 = SQLITE.executeQuery(sql2, [language, list_id]);
        if (res2.size > 0)
        {
            foreach  (var c in res2)
            {
                tv_ids.push([
                    "id" : c[2],
                    "type" : c[3],
                    "sort_key" : c[4],
                    "hidden" : c[5],
                    "offline" : c[6],
                    "achievement" : c[7],
                    "rating" : c[8],
                ]);
            }
        }
        result["tv_ids"] = tv_ids;
        return result;
    }

    function createUpdateTvIdListSql(tv_id_list)
    {
        var sql_list = [];
        var list_id = tv_id_list["list_id"];
        var language = getLanguage();

        {
            var sql = ("INSERT OR REPLACE INTO %s (list_id, language, root, s_image_id, m_image_id, sort_key, provider, name, description, new_flag, copyright) "
                      "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").format("t_tv_list");

            var params = [
                list_id,
                tv_id_list["hidden"],
                tv_id_list["s_image_id"],
                tv_id_list["m_image_id"],
                tv_id_list["sort_key"],
                tv_id_list["provider"],
                tv_id_list["name"],
                tv_id_list["description"],
                tv_id_list["new"],
                tv_id_list["copyright"],
            ];

            sql_list.push([sql, params]);
        }

        {
            var sql = "DELETE FROM %s WHERE language = ? AND list_id = ?".format("t_tv_list_cascade");
            var params = [language, list_id];
            sql_list.push([sql, params]);
        }

        {
            var sql = "INSERT INTO %s (list_id, language, file_id, type, sort_key, hidden, offline, achievement, rating) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)".format("t_tv_list_cascade");
            foreach (var file_id in tv_id_list["tv_ids"])
            {
                var params = [
                    list_id,
                    language,
                    file_id["id"],
                    file_id["type"],
                    file_id["sort_key"],
                    file_id["hidden"],
                    file_id["offline"],
                    file_id["achievement"],
                    file_id["rating"],
                ];
            }
            sql_list.push([sql, params]);
        }

        return sql_list;
    }

    function updateTvIdList(tv_id_list)
    {
        var sql_list = createUpdateTvIdListSql(tv_id_list);
        var res = SQLITE.executeTransaction(sql_list);

        if (isFailed(res))
            return false;

        return true;
    }

    function updateTvIdListByList(tv_id_list_list)
    {
        var sql_list = [];

        foreach (var tv_id_list in tv_id_list_list)
        {
            var list = createUpdateTvIdListSql(tv_id_list);
            sql_list += list;
        }

        var res = SQLITE.executeTransaction(sql_list);
        if (isFailed(res))
            return false;

        return true;
    }

    //////////////////////////////
    // TV Sets
    //////////////////////////////
    function getTvSet(set_id)
    {
        var language = getLanguage();
        var sql1 = "SELECT * FROM %s WHERE language = ? AND set_id = ?";
        var res1 = SQLITE.executeQuery(sql1, [language, set_id]);
        if (res1.size == 0)
            return nil;

        var s = res1[0];

        var result = [
            "set_id" : s[0],
            "days" : s[2],
            "sort_key" : s[3],
            "new" : s[4],
            "rating" : s[5],
            "begin_date" : s[6],
            "end_date" : s[7],
            "sku" : s[8],
            "description" : s[9],
            "copyright" : s[10],
            "title" : s[11],
            "subtitle" : s[12],
            "hd" : s[13],
            "s_image_id" : s[14],
            "m_image_id" : s[15],
        ];

        var image_ids = [];
        var sql2 = "SELECT image_id FROM %s WHERE language = ? AND set_id = ? ORDER BY id".format("t_tv_set_image");
        var res2 = SQLITE.executeQuery(sql2, [language, set_id]);

        if (res2.size > 0)
        {
            foreach (var i in res2)
                image_ids.push(i[0]);
        }

        result["image_ids"] = image_ids;
        return result;
    }

    function updateTvSet(tv_set)
    {
        var sql_list = [];
        var set_id = tv_set["tv_set_id"];
        var language = getLanguage();

        {
            var sql = ("INSERT OR REPLACE INTO %s (set_id, language, days, sort_key, new_flag, rating, begin_date, end_date, sku, description, copyright, title, subtitle, hd. s_image_id, m_image_id)"
                      "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").format("t_tv_set");

            var params = [
                list_id,
                language,
                tv_set["days"],
                tv_set["sort_key"],
                tv_set["new"],
                tv_set["begin_date"].getBySecond(),
                tv_set["end_date"].getBySecond(),
                tv_set["sku"],
                tv_set["description"],
                tv_set["copyright"],
                tv_set["title"],
                tv_set["subtitle"],
                tv_set["hd"],
                tv_set["s_image_id"],
                tv_set["m_image_id"],
            ];

            sql_list.push([sql, params]);
        }

        {
            var sql = "DELETE FROM %s WHERE language = ? and set_id = ?".format("t_tv_set_image");
            var params = [language, list_id];
            sql_list.push([sql, params]);
        }

        {
            var sql = "INSERT INTO %s (set_id, language, image_id) VALUES (?, ?, ?)".format("t_tv_set_image");
            foreach (var file_id in tv_id_list["image_ids"])
            {
                var params = [
                    set_id,
                    language, 
                ];
            }
            sql_list.push([sql, params]);
        }

        SQLITE.executeTransaction(sql_list);
        if (isFailed(res))
            return false;

        return true;
    }

    //////////////////////////////
    // TV Entries
    //////////////////////////////
    function getTv(tv_id)
    {
        var language = getLanguage();
        var sql1 = "SELECT * FROM %s WHERE language = ? AND tv_id = ?".format("t_tv");
        var res1 = SQLITE.executeQuery(sql1, [language, tv_id]);
        if (res1.size == 0)
            return nil;

        var s = res1[0];

        var result = convertToTv(res1[0]);
        var image_ids = getTvImageIdList(tv_id);
        result["image_ids"] = image_ids;
        return result;
    }

    function createUpdateTvSql(tv)
    {
        var sql_list = [];
        var tv_id = tv["tv_id"];
        var language = getLanguage();

        {
            var sql = ("INSERT OR REPLACE INTO %s (tv_id, language, file_id, trailer_file_id, contents_size, hidden, bd_only, audio, duration, days, "
                       "sort_key, belt_top, belt_bottom, belt_left, belt_right, contents_key, entitlement, sku, begin_date, end_date, achievement, offline, "
                       "description, copyright, title, subtitle, audiolevel, width, height, hd, fileinfo_size, fileinfo_hash, rating, new_flag, s_image_id, m_image_id, "
                       "rating_image_us, rating_image_eu, recommend, psp_export) "
                       "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").format("t_tv");
            
            var params = [
                tv_id,
                language,
                tv["file_id"], tv["trailer_file_id"], tv["contents_size"], tv["hidden"], tv["bd_only"], tv["audio"],
                tv["duration"], tv["days"], tv["sort_key"], tv["belt_top"], tv["belt_bottom"], tv["belt_left"], tv["belt_right"],
                tv["contents_key"], tv["entitlement"], tv["sku"], tv["begin_date"].getBySecond(), tv["end_date"].getBySecond(),
                tv["achievement"], tv["offline"], tv["description"], tv["copyright"], tv["title"], tv["subtitle"], tv["audiolevel"],
                tv["width"], tv["height"], tv["hd"], tv["fileinfo_size"], tv["fileinfo_hash"], tv["rating"], tv["new"], tv["s_image_id"],tv["m_image_id"], 
                tv["rating_image_us"], tv["rating_image_eu"], tv["recommend"], tv["psp_export"],
            ];

            sql_list.push([sql, params]);
        }

        var sql_image_list = createInsertImageSql(tv_id, language, tv["image_ids"]);
        var sql_caption_list = createInsertCaptionSql(tv_id, language, tv["captions"]);
        var sql_chapter_list = createInsertChapterSql(tv_id, language, tv["chapters"]);
        sql_list += sql_image_list;
        sql_list += sql_caption_list;
        sql_list += sql_chapter_list;
    }

    function updateTv(tv)
    {
        var sql_list = createUpdateTvSql(tv);
        var res = SQLITE.executeTransaction(sql_list);
        if (isFailed(res))
            return false;

        return true;
    }
    
    function updateTvByList(tv_list)
    {
        var sql_list = [];
        foreach (var tv in tv_list)
        {
            var list = createUpdateTvSql(tv);
            sql_list += list;
        }

        var res = SQLITE.executeTransaction(sql_list);
        if (isFailed(res))
            return false;

        return true;
    }

    function createInsertImageSql(tv_id, language, image_ids)
    {
        if (image_ids.size == 0)
            return [];

        var sql_delete = "DELETE FROM %s WHERE language = ? and tv_id = ?".format("t_tv_image");
        var params = [language, tv_id];
        sql_list.push([sql_delete, params]);

        var sql_image = "INSERT INTO %s (tv_id, language, image_id) VALUES (?, ?, ?)".format("t_tv_image");
        foreach (var image_id in image_ids)
        {
            params = [tv_id, language, image_id];
            sql_list.push([sql_image, params]);
        }

        return sql_list;
    }

    function createInsertCaptionSql(tv_id, language, captions)
    {
        if (captions.size == 0)
            return [];

        var sql_delete = "DELETE FROM %s WHERE language = ? and tv_id = ?".format("t_tv_caption");
        var params = [language, tv_id];
        sql_list.push([sql_delete, params]);

        var sql_caption = "INSERT INTO %s (tv_id, language, time, scroll, text) VALUES (?, ?, ?, ?, ?)".format("t_tv_caption");
        foreach (var caption in captions)
        {
            params = [tv_id, language, caption["begin_time_ms"], caption["scroll"], caption["text"]];
            sql_list.push([sql_caption, params]);
        }

        return sql_list;
    }

    function createInsertChapterSql(tv_id, language, chapters)
    {
        if (chapters.size == 0)
            return [];

        var sql_delete = "DELETE FROM %s WHERE language = ? and tv_id = ?".format("t_tv_chapter");
        var params = [language, tv_id];
        sql_list.push([sql_delete, params]);

        var sql_chapter = "INSERT INTO %s (tv_id, language, time) VALUES (?, ?, ?)".format("t_tv_chapter");
        foreach (var chapter in chapters)
        {
            params = [tv_id, language, chapter["time"]];
            sql_list.push([sql_chapter, params]);
        }

        return sql_list;
    }

    function getCopyrightList()
    {
        var sql = "SELECT DISTINCT copyright FROM t_tv WHERE language = ? ORDER BY copyright";
        var res = SQLITE.executeQuery(sql, [getLanguage()]);
        var result_list = [];

        foreach (var c in res)
            result_list.push(c);

        return result_list;
    }

    function getMyList(copyright, order, by)
    {
        var sql = "SELECT * FROM t_tv WHERE language = ? ";
        if (copyright != nil)
            sql += " AND copyright = ?";

        sql += createOrderBy(order, by);

        var res = SQLITE.executeQuery(sql, [getLanguage(), copyright == nil ? "" : copyright]);
        var result_list = [];

        foreach (var c in res)
        {
            var tv = convertToTv(t);
            result_list.push(tv);
        }

        return result_list;
    }

    function getPankuzuList(_file_id, _type)
    {
        var language = getLanguage();
        var sql = "SELECT list_id, name FROM %s WHERE language = ? AND list_id IN (SELECT list_id FROM %s WHERE language = ? AND file_id = ? AND type = ?)"
                  .format("t_tv_list", "t_tv_list_cascade");

        var list = [];
        var res = [];
        var file_id = _file_id;
        var type = _type;

        do
        {
            var res = SQLITE.executeQuery(sql, [language, language, file_id, type]);
            if (res.size > 0)
            {
                list.unshift(res[0][1]);
                file_id = res[0][0];
                type = "list";
            }

        } while (res.size != 0);
    
        return list;
    }

    function removeIf(tv_id_list)
    {
        var sql_list = [];
        var language = getLanguage();

        foreach (var tv_id in tv_id_list)
        {
            var params = [language, tv_id];
            foreach (var table in ["t_tv", "t_tv_image", "t_tv_chapter", "t_tv_caption"])
            {
                var sql = "DELETE FROM %{table} WHERE language = ? and tv_id = ?";
                sql_list.push([sql, params]);
            }
        }

        var res = SQLITE.executeTransaction(sql_list);
        if (isFailed(res))
            return false;

        return true;
    }

    function convertToTv(t)
    {
        var contents_key = ByteData(t[15]);

        var result = [
            "file_id" : t[2], "trailer_file_id" : t[3], "contents_size" : t[4],"hidden" : t[5], "bd_only" : t[6],
            "audio" : t[7], "duration" : t[8], "days" : t[9],"sort_key" : t[10], "belt_top" : t[11], "belt_bottom" : t[12],
            "belt_left" : t[13], "belt_right" : t[14], "contents_key" : contents_key, "entitlement" : t[16], "sku" : t[17], 
            "begin_date" : t[18], "end_date" : t[19], "achievement" : t[20], "offline" : t[21], "description" : t[22], 
            "copyright" : t[23], "title" : t[24], "subtitle" : t[25], "audiolevel" : t[26], "width" : t[27], "height" : t[28], 
            "hd" : t[29], "fileinfo_size" : t[30], "fileinfo_hash" : t[31], "rating" : t[32], "new" : t[33], 
            "s_image_id" : t[34], "m_image_id" : t[35], "rating_image_us" : t[36], "rating_image_eu" : t[37], "recommend" : t[38], 
            "psp_export" : t[39],
        ];
    }

    function getTvImageIdList(tv_id)
    {
        var image_ids = [];
        var sql = "SELECT image_id FROM %s WHERE language = ? AND tv_id = ? ORDER BY id".format("t_tv_image");
        var res = SQLITE.executeQuery(sql, [getLanguage(), tv_id]);
        if (res.size > 0)
        {
            foreach (var i in res)
                image_ids.push(i[0]);
        }

        return image_ids;
    }
    
    function getTvChapterList(tv_id)
    {
        var list = [];
        var sql = "SELECT time FROM %s WHERE language = ? AND tv_id = ? ORDER BY time".format("t_tv_chapter");
        var tv_id = SQLITE.executeQuery(sql, [getLanguage(), tv_id]);
        if (res.size > 0)
        {
            foreach (var t in res)
                list.push(["time" : t[0]]);
        }

        return list;
    }

    function getTvCaptionList(tv_id)
    {
        var list = [];
        var sql = "SELECT time, scroll, text FROM %s WHERE language = ? AND tv_id = ? ORDER BY time".format("t_tv_caption");
        var tv_id = SQLITE.executeQuery(sql, [getLanguage(), tv_id]);
        if (res.size > 0)
        {
            foreach (var t in res)
                list.push(["time" : t[0], "scroll" : t[1], "text" : t[2]]);
        }

        return list;
    }

    function getLanguage()
    {
        return main::pdistd::MLocale::getLanguage();
    }

    function getCount(table_name, condition)
    {
        var sqlite = getSqlite();
        var sql = "SELECT COUNT (*) FROM %{table_name} WHERE language = ? ";
        if (condition != "")
            sql += "AND %{condition}";

        var res = sqlite.executeQuery(sql, [getLanguage()]);
        var count = getResult1();
        return count = nil ? 0 : count;
    }

    function createOrderBy(order, by)
    {
        if (order == nil && by == nil)
        {
            sort_key = "order";
            by = "DESC";
        }

        var by2 = by;
        order = "ORDER BY";
        return "%{by2}, sort_key %{by2}";
    }

    function getResult1(res)
    {
        if (res.size == 0)
            return inl;

        var row = res[0];
        if (row.size == 0)
            return nil;

        return res[0][0];
    }

    function isFailed(res)
    {
        return res != SQLITE_DONE;
    }
}