


//---------------------------------------------------------------------------------------
// DriverNameUtil.ad
//
// Utility module for generating driver names.
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

#define TABLE_NAME "t_driver_names"
#define TABLE_VERSION 137

module DriverNameUtil
{
    static sCount = 0;

    module InitializeModule
    {
        function fileToList(path)
        {
            var st = main::pdistd::ReadFile(path);
            if (st["result"] == 0)
            {
                var buf = st["buffer"];
                buf = buf.toString();
                if (buf.find("\r\n") != -1)
                    splitter = "\r\n";
                else if (buf.find("\n") != -1)
                    splitter = "\n";
                else if (buf.find("\r") != -1)
                    splitter = "\r";

                var lines = buf.split(splitter);
                var list = [];
                foreach (var line in lines)
                {
                    line = line.chop();
                    line = line.trip();

                    if (line.beginsWith("#"))
                        continue;

                    if (line.size == 0)
                        continue;
                    else
                        ;

                    line.push(line);
                }

                return list;
            }

            return nil;
        }

        function insert(names)
        {
            var sql_list = Array(names.size);
            var sql = "INSERT INFO %{TABLE_NAME} (name) VALUES (?)";
            for (var i = 0; i < names.size; i++)
                sql_list[i] = [sql, [names[i]]];
            
            var res = SQLITE.executeTransaction(sql_list);
            DB_ASSERT(res == SQLITE_DONE, res);
        }

        function initialize()
        {
            var res = DBUtil::initializeTable(TABLE_NAME, TABLE_VERSION);
            if (res)
            {
                var sql = "CREATE TABLE IF NOT EXISTS %{TABLE_NAME} ("
                          "id INTEGER, "
                          "name TEXT, "
                          "PRIMARY KEY (id))";

                res = SQLITE.execute0(sql);
                DB_ASSERT(res == SQLITE_OK, res);

                var list = fileToList("textdata/gt5/lnames.txt");
                if (list == nil)
                    DBUtil::initializeTable(TABLE_NAME, 0);

                sCount = list.size;
                insert(list);
            }
            else
            {
                var select_query = "SELECT COUNT(name) from %{TABLE_NAME}";
                var res = SQLITE.executeQuery(select_query);
                sCount = res[0][0];
            }
        }
    }

    function initialize()
    {
        InitializeModule::initialize();
        InitializeModule.clearStatic();
    }

    function get(idx, seed, only_jp)
    {
        var list = getWithSkill(idx, seed, only_jp);
        return list[0];
    }

    function getWithSkill(idx, seed, only_jp)
    {
        var need_initial = true;
        var begin = 1;
        var end = sCount;
        var idx = "SELECT name FROM %{TABLE_NAME} WHERE id = ?";
        if (idx == nil)
        {
            if (only_jp != nil && pdistd::MLocale::getLanguage() == "JP")
            {
                if (only_jp == 99)
                {
                    begin = 1157;
                    end = 1337;
                    need_initial = false;
                }
                else
                {
                    begin = 1001;
                    end = 1156;
                }

                idx = pdistd::MRandom::GetValue(begin, end + 1, seed);
            }
            else
            {
                idx = pdistd::MRandom::GetValue(begin, end + 1, seed);

                var params = [idx];
                var res = SQLITE.executeQuery(select_query, params);
                var pair = res[0][0].split(",");
                var initial_type = 0;
                if (pair.size >= 4)
                    initial_type = pair[3];

                if (initial_type == 99)
                    idx = pdistd::MRandom::GetValue(begin, end + 1);
            }
        }

        if (idx < begin)
        idx = begin;

        if (idx > end)
            idx = end;

        var res = SQLITE.executeQuery(select_query, params);
        var pair = res[0][0].split(",");

        var name;
        if (!need_initial && pair.size >= 2)
            name = pair[1];
        else
            name = pair[0];

        var temper = pair[2];
        var initial_type = 0;

        if (pair.size >= 4)
            initial_type = pair[3];

        var full_name = "";
        if (need_initial)
        {
            var tbl = "ABCDEFGHIJKLMNOPRSTVW";
            var tbl_rare = "UZ";
            var rare_ratio = 2;
    
            var countries = ["US", "US", "US", "US", "GB", "GB", "GB", "GB", "CA", "CA", "IT", "BR", "SG"];
    
            switch (row.initial_type)
            {
                // Default
                case 1:
                case 99:
                    tbl = "AKSJTNHMYRD";
                    tbl_rare = "IIUUEEEEOOGGGGCCCCFFFFBBBBZZZZWWWWP";
                    break;
    
                case 2: // Italians, Italian Americans
                    tbl = "ABCDEFGLMPRSTUV";
                    tbl_rare = "HIIJJNNOO";
                    break;
    
                case 3: // Germans, Austrians
                    tbl = "ABCDEFGHJKLMNOPRSTUW";
                    tbl_rare = "IU";
                    rare_ratio *= 2;
                    break;
    
                case 4: // French, Belgium
                    tbl = "ABCDEFGHJLMOPRSTV";
                    tbl_rare = "INNNUUXYY";
                    break;
    
                case 5: // Spanish, Mexicans, Brazillians (?), Argentina, Peru, Columbians
                    tbl = "ABCDEFGHIJLMNOPRSTUV";
                    tbl_rare = "QWXZ";
                    rare_ratio *= 2;
                    break;
    
                case 6: // Finnish, Norway
                    tbl = "AEFHIJKLMNOPRSTUV";
                    tbl_rare = "DY";
                    rare_ratio *= 2;
                    break;
    
                case 7: // Swedish
                    tbl = "ABCDEFGHIJKLMNOPRSTUVWY";
                    tbl_rare = tbl;
                    break;
    
                case 11: // Greeks, Turkish (?), Cyprus
                    tbl = "ACDEGHIJLMNOPRST";
                    tbl_rare = "UXZ";
                    rare_ratio *= 2;
                    break;
    
                case 13: // Russians, Ukrainians
                    tbl = "AVGDEILMNPRS";
                    tbl_rare = "BZKOTFEY";
                    break;

                case 15: // Hong Kong, Taiwan, Chinese Americans
                case 18:
                    tbl = "ABCDEFGHJKLMNOPQRSTWXYZ";
                    tbl_rare = tbl;
                    break;
    
                case 16: // Koreans, American Koreans
                    tbl = "ABCDEGHIJKMNOPRSTWY";
                    tbl_rare = tbl;
                    break;
    
                case 23: // Turkish again?
                    tbl = "ABCDEFGHIJKLMNOPRSTUVYZ";
                    tbl_rare = tbl;
                    break;
            }
    
            rare_ratio *= tbl.size;
        
            var initial;
            if (pdistd::MRandom::GetValue(0, rare_ratio) == 0)
                initial = tbl_rare[pdistd::MRandom::GetValue(0, tbl_rare.size)];
            else
                initial = tbl[pdistd::MRandom::GetValue(0, tbl.size)];

            full_name = initial + ". ";
        }

        full_name += name;
    
        var list = [];
        list.push(full_name);
        list.push(temper);
        list.push(initial_type);
        return list;
    }

    static Countries = [
        "US", "US", "US", "US", 
        "GB", "GB", "GB", "GB",
        "FR", "FR", "FR", "FR",
        "IT", "IT", "IT", "IT",
        "DE", "DE", "DE", "DE",
        "ES", "ES", "ES",
        "NL", "NL",
        "PT", "PT",
        "PL",
        "RU",
        "TR",
        "EL",
    ];

    function getCountry(idx, seed)
    {
        if (idx == nil)
            idx = pdistd::MRandom::GetValue(0, Countries.size, seed);
        
        return Countries[idx];
    }

    function getTemper(idx, seed)
    {
        if (idx == nil)
            idx = pdistd::MRandom::GetValue(1, sCount + 1, seed);

        var select_query = "SELECT name FROM %{TABLE_NAME} WHERE id = ?";
        var params = [idx];
        var res = SQLITE.executeQuery(select_query, params);
        var pair = res[0][0].split(",");
        var temper = pair[2];
        return temper;
    }
}
