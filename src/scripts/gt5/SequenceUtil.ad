

//---------------------------------------------------------------------------------------
// SequenceUtil.ad
//
// Utility module for Roots, Sequences, Projects transitions
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module SequenceUtil
{
    static sTransitionFinder;

    function setTransitionFinder(func)
    {
        sTransitionFinder = func;
    }

    static sPageTransition = nil;

    function setPageTransition(map)
    {
        sPageTransition = map;
    }

    function findPageTransition(key)
    {
        var it = nil;
        if (sTransitionFinder != nil)
            it = sTransitionFinder(key);

        if (it == nil && sPageTransition != nil)
            it = sPageTransition[key];
        return it;
    }

    function findProjectTransition(key)
    {
        import __projects__::CursorProject;
        var sProjectTransition = ["*,*" : CursorProject::GTLogoTransition];

        var it = nil;
        if (sTransitionFinder != nil)
            it = sTransitionFinder(key);

        if (it == nil && sProjectTransition != nil)
            it = sProjectTransition[key];
        return it;
    }

    function onPageOutStart(context, root_transition)
    {
        if (root_transition != nil && root_transition.root_window != nil)
        {
            var root_widget = root_transition.root_window;

            if (root_widget.defined('onPageOutStart'))
                root_widget['onPageOutStart'](context);

            var current_root = context.getCurrentPage();
            current_root != nil; // Normal

            if (current_root != nil && current_root.defined('onPageOutStart'))
                current_root['onPageOutStart'](context);
        }
    }

    function onPageOutEnd(context, root_transition)
    {
        if (root_transition != nil && root_transition.root_window != nil)
        {
            var root_widget = root_transition.root_window;

            if (root_widget.defined('onPageOutEnd'))
                root_widget['onPageOutEnd'](context);

            var current_root = context.getCurrentPage();
            current_root != nil; // Normal

            if (current_root != nil && current_root.defined('onPageOutEnd'))
                current_root['onPageOutEnd'](context);
        }
    }

    function onPageInStart(context, root_transition)
    {
        if (root_transition != nil && root_transition.root_window != nil)
        {
            var root_widget = root_transition.root_window;

            if (root_widget.defined('onPageInStart'))
                root_widget['onPageInStart'](context);

            var current_root = context.getCurrentPage();
            current_root != nil; // Normal

            if (current_root != nil && current_root.defined('onPageInStart'))
                current_root['onPageInStart'](context);
        }
    }

    function onPageInEnd(context, root_transition)
    {
        if (root_transition != nil && root_transition.root_window != nil)
        {
            var root_widget = root_transition.root_window;

            if (root_widget.defined('onPageInEnd'))
                root_widget['onPageInEnd'](context);

            var current_root = context.getCurrentPage();
            current_root != nil; // Normal

            if (current_root != nil && current_root.defined('onPageInEnd'))
                current_root['onPageInEnd'](context);
        }
    }

    static on_page_out_start_ = onPageOutStart;
    static on_page_out_end_ = onPageOutEnd;
    static on_page_in_start_ = onPageInStart;
    static on_page_in_end_ = onPageInEnd;

    function setupTransition(context, root_widget)
    {
        var renewed = false;

        context.syncInRootTransition();
        if (context.active_root_transition == nil || 
            active_root_transition.root_window.name != root_widget.name)
        {
            var root_transition = main::menu::MRootTransition(root_widget);
            context.root_transition = root_transition;

            renewed = true;
        }

        root_transition.on_page_out_start = on_page_out_start_;
        root_transition.on_page_out_end = on_page_out_end_;
        root_transition.on_page_in_start = on_page_in_start_;
        root_transition.on_page_in_end = on_page_in_end_;

        return renewed;
    }

    function startPageTransition(context, current_page, next_page)
    {
        var from;
        if (current_page != nil)
            from = current_page.getNodePath();
        else
            from = "*";

        var to;
        if (next_page == nil)
            to = "*";
        else
            to = next_page.getNodePath();

        var it = findPageTransition("%{from},%{to}");
        if (it == nil)
        {
            it = findPageTransition("*,%{to}");
            if (it == nil)
            {
                it = findPageTransition("%{from},*");
                if (it == nil)
                    it = findPageTransition("*,*");
            }
        }

        if (it == nil)
            it = CursorProject::ColorTransition;

        var renewed = setupTransition(context, it);
        if (renewed)
            context.pageOutRootTransition();
    }

    function _start_page(context, next_page, extra_page)
    {
        import __projects__::DialogProject;
        import __projects__::CursorProject;

        var context = context.getRenderContext(next_page.context_number);
        var current_page = context.getCurrentPage();
        if (current_page != nil || (context.root_transition != nil && context.root_transition.root_window == nil))
            startPageTransition(context, current_page, next_page);

        var pages = [next_page];
        if (extra_page != nil)
        {
            if (extra_page.isInstanceOf(System::Array))
                pages += extra_page;
            else
                pages.push(extra_page);
        }

        context.syncOutRootTransition();
        OSKUtil::closeChatDialog(context);
        setupCursorProjectRoot(context, pages);
        context.startPage(pages);
        context.filterKeyEvent();
        context.pageInRootTransition();
    }

    function startProjectTransition(context, current_project, next_project, root_transition)
    {
        var from;
        if (current_project == nil)
            from = "*";
        else
            from = current_project;

        var to;
        if (next_project == nil)
            to = "*";
        else
            to = next_project;

        var it;
        if (root_transition == nil)
        {
            it = findProjectTransition("%{from},%{to}");
            if (it == nil)
            {
                it = findProjectTransition("*,%{to}");
                if (it == nil)
                {
                    it = findProjectTransition("%{from},*");
                    if (it == nil)
                        it = findProjectTransition("*,*");
                }
            }

            if (it == nil)
                it = CursorProject::GTLogoTransition;
            root_transition = it;
        }


        setupTransition(context, root_transition);
        context.pageOutRootTransition();
        context.syncOutRootTransition();
    }

    function _end_project(context, current_project, next_project, root_transition)
    {
        startProjectTransition(context, current_project, next_project, root_transition);
        context.finish();
        context.filterKeyEvent();
    }

    function _end_project_direct(context)
    {
        context.finish();
        context.filterKeyEvent();
    }

    function startPage(context, next_page, extra_page)
    {
        context.pushEvent(main::menu::MFunctionEvent(_start_page, context, next_page, extra_page));
    }

    function _push_page(context, popup_page)
    {
        OSKUtil::closeChatDialog(context);
        popup_page.defineStatic('__enter_event_loop__', true);
        context.pushPage(popup_page);
        context.enterEventLoop(popup_page.__EventLoopLevel__);
    }

    function pushPage(context, popup_page)
    {
        if (context.context_number == popup_page.context_number)
            _push_page(context, popup_page);
        else
        {
            context = context.getRenderContext(popup_page.context_number);
            context.pushEvent(main::menu::MFunctionEvent(_push_page, context, popup_page));
        }
    }

    function popPage(context, popup_page, delay_time)
    {
        if (popup_page.defined('__enter_event_loop__'))
        {
            if (popup_page['__enter_event_loop__'])
            {
                popup_page['__enter_event_loop__'] = false;
                if (delay_time != nil)
                    context.closePage(popup_page, delay_time);
                else
                    context.closePage(popup_page);
            }
        }
    }

    function startPageDirect(context, next_page, extra_page)
    {
        var pages = [next_page];
        if (extra_page != nil)
        {
            if (extra_page.isInstanceOf(System::Array))
                pages += extra_page;
            else
                pages.push(extra_page);
        }

        OSKUtil::closeChatDialog(context);
        context.clearPage();
        context.pushPage(pages);
        context.filterKeyEvent();
    }

    function enterEventLoop(context, widget)
    {
        widget.defineStatic('__enter_event_loop__', true);
        context.enterEventLoop(widget.__EventLoopLevel__);
    }

    function leaveEventLoop(context, widget)
    {
        if (widget.defined('__enter_event_loop__'))
        {
            var level = widget.__EventLoopLevel__;
            widget.removeStatic('__EventLoopLevel__');
            context.leaveEventLoop(level);
        }
    }

    class ModalPage
    {
        attribute context;
        attribute popup_page;
        attribute entered = true;

        method __init__(context, popup_page)
        {
            self.context = context;
            self.popup_page = popup_page;
        }

        method open()
        {
            OSKUtil::closeChatDialog(context);
            context.pushPage(self.popup_page);
            context.enterEventLoop(self.level);
        }

        method close(delay_time)
        {
            if (self.level >= 0)
            {
                var lv = self.level;
                self.level = -1;

                if (delay_time != nil)
                    context.closePage(self.popup_page, delay_time);
                else
                    context.closePage(self.popup_page);
            }

            context.leaveEventLoop(lv);
        }
    }

    function endProject(context)
    {
        sTransitionFinder = nil;
        sPageTransition = nil;

        context.pushEvent(main::menu::MFunctionEvent(_end_project, context));
    }

    function startProject(context, next_project, arg)
    {
        setTransitionFinder(nil);
        setPageTransition(nil);

        var current_project = main::GameSequence::getCurrentProject();
        main::GameSequence::setNextProject(next_project, arg);
        context.pushEvent(main::menu::MFunctionEvent(_end_project, context, current_project, next_project));
    }

    function startProjectDirect(context, next_project, arg)
    {
        var current_project = main::GameSequence::getCurrentProject();
        main::GameSequence::setNextProject(next_project, arg);
        context.pushEvent(main::menu::MFunctionEvent(_end_project_direct, context));
    }

    function startSequence(context, next_sequence, root_transition)
    {
        setTransitionFinder(nil);
        setPageTransition(nil);

        var current_project = GameSequence::getCurrentProject();
        var next_project = nil;

        if (next_sequence == GameSequence::RACE)
            next_project = "race";

        main::GameSequence::setNextSequence(next_sequence);
        startProjectTransition(context, current_project, next_project, root_transition);
        context.pushEvent(main::menu::MFunctionEvent(_end_project, context, current_project, next_project, root_transition));
    }

    function finishApplication(context)
    {
        sTransitionFinder = nil;
        sPageTransition = nil;
        endProject(context);
        main::GameSequence::finish();
    }

    function _start_page_xeffect_transition(context, next_page, extra_page, effect_end_func)
    {
        if (effect_end_func != nil)
            CursorProject::XEffectTransition::EffectEndFunc = effect_end_func;

        var map = sPageTransition;
        sPageTransition = [ "*,*" : CursorProject::XEffectTransition ];
        _start_page(context, next_page, extra_page);
        sPageTransition = map;
    }

    function startXEffectTransitionOut(context, next_page, extra_page, effect_end_func)
    {
        CursorProject::XEffectTransition::Out = true;
        _start_page_xeffect_transition(context, next_page, extra_page);
    }

    function startXEffectTransitionIn(context, next_page, extra_page, effect_end_func)
    {
        CursorProject::XEffectTransition::Out = false;
        _start_page_xeffect_transition(context, next_page, extra_page);
    }
}

