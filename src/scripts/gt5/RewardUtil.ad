



















module RewardUtil
{
    static CourseEvalTable = 
    [
        "new_fisco" : 1.98,
        "new_fisco_gt" : 1.94,
        "suzuka" : 2.58,
        "suzuka_east" : 1.06,
        "suzuka_wet" : 3.1,
        "daytona" : 1.1,
        "daytona_road" : 2.24,
        "highspeedring" : 1.36,
        "r_highspeedring" : 1.36,
        "highspeedring_wet" : 1.62,
        "london" : 1,
        "r_london" : 1,
        "eiger_short" : 1.32,
        "r_eiger_short" : 1.3,
        "eiger_short_wet" : 1.6,
        "eiger_long" : 5.06,
        "r_eiger_long" : 5.16,
        "eiger_dirt_east" : 2.6,
        "r_eiger_dirt_east" : 2.7,
        "eiger_dirt_west" : 1.46,
        "r_eiger_dirt_west" : 1.48,
        "tsukuba" : 1.1,
        "sarthe2009" : 5.02,
        "sarthe2009_old" : 4.66,
        "sarthe2009_daynight" : 5.68,
        "sarthe2005" : 5.06,
        "sarthe2005_old" : 4.68,
        "nurburgring" : 8.78,
        "nurburgring_daynight" : 10.26,
        "nurburgring_GP" : 2.48,
        "nurburgring_24h" : 10.68,
        "nurburgring_24h_daynight" : 12.8,
        "nurburgring_dtm" : 1.84,
        "nurburgring_vln" : 10.56,
        "indianapolis" : 1.16,
        "indianapolis_f1" : 1.92,
        "monza" : 2.3,
        "monza_no_chicane" : 2.1,
        "monza_wet" : 2.6,
        "topgear" : 1.48,
        "topgear_license" : 0,
        "topgear_license_wet" : 0,
        "topgear_event" : 1.48,
        "cape_ring" : 3.24,
        "cape_ring_inner_periphery" : 1.06,
        "cape_ring_periphery" : 2,
        "cape_ring_north" : 1.9,
        "cape_ring_south" : 1.54,
        "rome" : 1.38,
        "r_rome" : 1.42,
        "madrid" : 1.68,
        "r_madrid" : 1.72,
        "madrid_short" : 0.96,
        "r_madrid_short" : 0.98,
        "akasaka" : 1.94,
        "r_akasaka" : 2.06,
        "route5" : 1.76,
        "r_route5" : 1.72,
        "route5_club" : 1.1,
        "r_route5_club" : 1.08,
        "route7" : 6.4,
        "snow_2010" : 4.82,
        "snow_2010_snow_" : 4.94,
        "snow_2010_east" : 1.82,
        "snow_2010_east_snow" : 1.88,
        "snow_2010_west" : 3.12,
        "snow_2010_west_snow" : 3.22,
        "snow_2010_mini" : 1,
        "snow_2010_mini_snow" : 1.04,
        "toscana" : 2.28,
        "r_toscana" : 2.26,
        "laguna" : 1.72,
        "montecarlo" : 2.02,
        "autumn" : 1.6,
        "r_autumn" : 1.54,
        "mini" : 0.78,
        "r_mini" : 0.74,
        "deepforest" :  1.56,
        "r_deepforest" : 1.56,
        "grandvalley" : 2.3,
        "r_grandvalley" : 2.32,
        "grandvalley_east" : 1.24,
        "r_grandvalley_east" : 1.3,
        "trialmt" : 1.76,
        "r_trialmt" : 1.78,
        "newindoorkart" : 0.78,
        "r_newindoorkart" : 0.74,
        "newindoorkart_short" : 0.6,
        "r_newindoorkart_short" : 0.58,
        "spa" : 3.02,
        "spa_wet" : 3.02,
        "routex" : 0.4,
        "routex_oval" : 3.56,
        "motegi" : 2.34,
        "motegi_east" : 1.72,
        "motegi_super_speedway" : 0.8,
        "motegi_west" : 0.76,
        "template01" : 0.36,
        "template05" : 0.36,
        "template06" : 0.36,
        "template07" : 0.48,
        "template08" : 0.6,
        "template10" : 0.54,
        "template11" : 0.62,
    ];

    static EventLevelRatioTable = 
    [
        1.0,
        1.12,
        1.25,
        1.4,
        1.56,
        1.74,
        1.94,
        2.17,
        2.43,
        2.72,
        3.04,
        3.4,
        3.8,
        4.25,
        4.76,
        5.33,
        5.96,
        6.67,
        7.47,
        8.36,
        9.36,
        10.48,
        11.73,
        13.13,
        14.7,
        16.46,
        18.43,
        20.64,
        23.11,
        25.88,
        28.98,
        32.45,
        36.34,
        40.7,
        45.58,
        51.04,
        57.16,
        64.01,
        71.69,
        80.29,
        89.92,
    ];

    static ResultRatioTable = [
        1.14,
        1.12,
        1.10,
        1.08,
        1.06,
        1.04,
        1.02,
        1.0,
        0.98,
        0.96,
        0.94,
        0.92,
        0.90,
        0.88,
        0.86,
        0.84,
    ];

    static PrizeExpTable = [
        LicenseUtil::CATEGORY::B : [50, 100, 200],
        LicenseUtil::CATEGORY::A : [75, 150, 300],
        LicenseUtil::CATEGORY::IC : [112, 225, 450],
        LicenseUtil::CATEGORY::IB : [168, 337, 675],
        LicenseUtil::CATEGORY::IA : [252, 505, 1012],
        LicenseUtil::CATEGORY::S : [378, 757, 1518],
    ];

    static BspecUserLevelExpTable = [
        100,
        120,
        144,
        173,
        208,
        250,
        300,
        360,
        432,
        518,
        622,
        746,
        895,
        1074,
        1289,
        1547,
        1856,
        2227,
        2672,
        3206,
        3847,
        4616,
        5539,
        6647,
        7976,
        9571,
        11485,
        13782,
        16538,
        19846,
        23815,
        28578,
        34294,
        41153,
        49384,
        59261,
        71113,
        85336,
        102403,
        122885,
        147461,
    ];

    function getCourseEval(course)
    {
        var course_eval = gtengine::MSpecDB::getCourseLabel(course);
        if (course_eval == nil)
            course_eval = 0;
        return course_eval;
    }

    function calculateBonus(value, bonus_ratio)
    {
        if (bonus_ratio != nil && bonus_ratio > 1.0)
        {
            var base_value = value;
            value = (value * bonus_ratio).toInt(); 
        }

        return value;
    }

    function getAspecEventExp(course, event_level, event_exp, laps, result, bonus_ratio)
    {
        if (result == -1)
            return 0;

        var course_exp = getCourseEval(course) * 50;
        course_exp *= laps;

        var user_level_exp = 100;
        var event_level_ratio = (event_level >= 0 && event_level < EventLevelRatioTable.size) ? EventLevelRatioTable[event_level] : 1.0;
        var result_ratio = result < ResultRatioTable.size ? ResultRatioTable[result] : 1.0;

        if (bonus_ratio == nil)
            bonus_ratio = 1.0;
        bonus_ratio = bonus_ratio.toFloat();

        var calculated_exp = ((event_exp + user_level_exp) + ((course_exp.toFloat() * event_level_ratio) * result_ratio));
        var calculated_exp_with_bonus = calculated_exp.toFloat() * bonus_ratio.toInt();
        return calculated_exp_with_bonus;
    }

    function getBspecEventExp(course, event_level, event_exp, laps, result, bonus_ratio)
    {
        if (result == -1)
            return 0;

        var course_exp = getCourseEval(course) * 50;
        course_exp *= laps;

        var user_level = GAME_STATUS.user_profile.getBspecLevel();
        var user_level_exp = (user_level >= 0 && user_level < BspecUserLevelExpTable.size) ? BspecUserLevelExpTable[user_level] : 0; 
        var event_level_ratio = (event_level >= 0 && event_level < EventLevelRatioTable.size) ? EventLevelRatioTable[event_level] : 1.0;
        var result_ratio = result < ResultRatioTable.size ? ResultRatioTable[result] : 1.0;

        if (bonus_ratio == nil)
            bonus_ratio = 1.0;
        bonus_ratio = bonus_ratio.toFloat();

        var calculated_exp = ((event_exp + user_level_exp) + ((course_exp.toFloat() * event_level_ratio) * result_ratio * 0.2));
        var calculated_exp_with_bonus = calculated_exp.toFloat() * bonus_ratio.toInt();
        return calculated_exp_with_bonus;
    }

    function getLicenseExp(category_id, result, bonus_ratio)
    {
        if (category_id >= PrizeExpTable.size)
            return 0;

        if (result >= PrizeExpTable[category_id].size)
            return 0;

        var license_exp = PrizeExpTable[category_id][result];
        var bonus;
        if (bonus_ratio == nil)
            bonus = 1.0;

        var bonus_ratio_ratio = bonus_ratio.toFloat();
        return ((license_exp.toFloat() + 100.0) * bonus_ratio).toInt();
    }

    function getPPRate(gp, player_cp)
    {
        var pp_base = gp.event.reward.pp_base;
        var pp_rate = 1.0;

        if (pp_base > 0)
        {
            player_cp.beginInfo();
            var diff = (pp_base - player_cp.getPP1000()) / 100.0;
            pp_rate = 1.0 + ((diff * gp.event.reward.percent_at_pp100) / 100.0);
            player_cp.endInfo();

            if (pp_rate < 1.0)
                pp_rate = 1.0;
        }

        return pp_rate;
    }

    function getPPDifference(gp, player_cp)
    {
        player_cp.beginInfo();
        var pp_diff = pp_base - player_cp.getPP1000();
        player_cp.endInfo();

        return pp_diff;
    }

    function checkABspecEventReward(context, gp, finish_result, bonus_ratio, onDriverGrowthCallback, before_result, player_cp)
    {
        if (finish_result == -1)
            return;

        if (bonus_ratio == nil)
            bonus_ratio = 1.0;

        var ol_login_bonus = GAME_STATUS.user_profile.context.exp_factor;
        if (bonus_ratio < ol_login_bonus)
            bonus_ratio = ol_login_bonus;

        var ol_login_bonus_precent = (bonus_ratio * 100.0).toInt();
        var pp_rate = getPPRate(gp, player_cp);
        bonus_ratio += pp_rate > 1.0 ? pp_rate - 1.0 : 0;
        
        var pp_diff = getPPRate(gp, player_cp);
        var bonus_args = [ol_login_bonus_precent, 0, pp_diff];
        var is_bspec = gp.event.play_style.bspec_type == gtengine::BSpecType::ONLY_B;
        var is_time_attack = false;

        if (gp.event.game_mode == gtengine::GameMode::TIME_ATTACK ||
            gp.event.game_mode == gtengine::GameMode::ONLINE_TIME_ATTACK)
            is_time_attack = true;

        var prize_table = gp.event.reward.prize_table;
        var prize_type = gp.event.reward.prize_type;

        if (prize_type > 0 && before_result != nil && before_result != -1 && finish_result >= before_result)
            return;

        // Handle Prize Money
        if (prize_type == 1)
        {
            var total_prize = 0;

            var before;
            if (before_result == nil || before_result < 0)
                before = prize_table.size;
            else
                before = before_result;

            for (var i = finish_result; i < before; i++)
                total_prize += prize_table[i];

            bonus_args[1] = ((total_prize * pp_rate) - total_prize).toInt();
            total_prize = calculateBonus(total_prize, bonus_ratio);

            if (total_prize > 0)
                DialogUtil::openPrizeMoneyDialog(context, total_prize, true, bonus_args);
        }
        else if (prize_table != nil && finish_result < prize_table.size)
        {
            var money = prize_table[finish_result];
            bonus_args[1] = ((money * pp_rate) - money).toInt();

            money = calculateBonus(money, bonus_ratio);

            if (money > 0)
                DialogUtil::openPrizeMoneyDialog(context, money, true, bonus_args);
        }

        // Handle EXP
        var course_code = gp.event.track.course_code;
        var event_level = ABspecUtil::getNeedLevel(gp.game_id, is_bspec);
        var laps = gp.event.race_parameter.race_limit_laps;
        var reflect_profile = true;

        var exp;
        if (prize_type == 1)
        {
            var total_point = 0;
            var point_table = gp.event.reward.point_table;

            var before;
            if (before_result == nil || before_result < 0)
                before = prize_table.size; // BUG?
            else
                before = before_result;

            for (var i = finish_result; i < before; i++)
                total_point += point_table[i];

            bonus_args[1] = ((total_point * pp_rate) - total_point).toInt();
            exp = calculateBonus(total_point, bonus_ratio);

            if (!is_bspec)
                DialogUtil::openPrizeAspecExpDialog(context, exp, true, bonus_args);
            else
                DialogUtil::openPrizeBspecExpDialog(context, exp, true, bonus_args);
        }
        else if (!is_bspec)
        {
            if (gp.event.reward.point_table[0] > 0)
                exp = gp.event.reward.point_table[finish_result];
            else
                exp = getAspecEventExp(course_code, event_level, 0, laps, finish_result);

            bonus_args[1] = ((exp * pp_rate) - exp).toInt();
            exp = calculateBonus(exp, bonus_ratio);
    
            if (exp > 0)
                DialogUtil::openPrizeAspecExpDialog(context, exp, true, bonus_args);
        }
        else
        {
            if (gp.event.reward.point_table[0] > 0)
                exp = gp.event.reward.point_table[finish_result];
            else
                exp = getBspecEventExp(course_code, event_level, 0, laps, finish_result);

            bonus_args[1] = ((exp * pp_rate) - exp).toInt();
            exp = calculateBonus(exp, bonus_ratio);
    
            if (exp > 0)
                DialogUtil::openPrizeBspecExpDialog(context, exp, true, bonus_args);
        }

        // Process driver growth (bspec)
        if (is_bspec && onDriverGrowthCallback != nil)
        {
            var driver_cnt = gp.event.regulation.limit_bspec_driver_count;
            if (driver_cnt > 0)
                exp *= driver_cnt;

            onDriverGrowthCallback(context, exp, finish_result);
        }

        // Grim Action Log
        if (finish_result == 0 && !is_time_attack)
        {
            var course_label = gtengine::MSpecDB::getCourseLabel(course_code);
            var file_id = ABspecUtil::getFileId(gp.game_id, is_bspec);

            if (is_bspec)
                ActionLogUtil::bspecEvent(file_id, course_label);
            else
                ActionLogUtil::aspecEvent(file_id, course_label);
        }

        var present = gp.event.reward.present;
        if (present != nil && present.size > 0 && !SeasonalEventPresentUtil::isPresented(gp))
        {
            var item_list = "";
            var present_item = Array();

            if (gp.event.reward.present_type == gtengine::RewardPresentType::ORDER)
            {
                if (finish_result < present.size)
                {
                    if (gp.event.reward.is_once)
                    {
                        var record = SeasonalEventPresentUtil::getRecordByGP(gp);
                        if (record == nil || record != nil && record > finish_result)
                        {
                            for (var i = 0; i < present.size - finish_result; i++)
                            {
                                if (record != nil && finish_result + i >= record)
                                    ;
                                else
                                {
                                    var reward_item = present[finish_result + i];
                                    if (reward_item == nil || reward_item.itemtype == nil)
                                        ;
                                    else
                                        present_item.push(reward_item);
                                }
                            }
                        }
                    }
                    else
                    {
                        present_item.push(present[finish_result]);
                    }
                }
            }
            else if (gp.event.reward.present_type == gtengine::RewardPresentType::RANDOM)
            {
                if (finish_result < 3)
                    present_item.push(present[main::pdistd::MRandom::GetValue(0, present.size)]);
            }

            if (present_item != nil && present_item.size != 0)
            {
                var res = SeasonalEventPresentUtil::presentItemGP(gp, present_item, finish_result, is_time_attack, context);
                if (res && gp.event.reward.is_once)
                {
                    if (!SeasonalEventPresentUtil::updateEventPresentGP(gp, finish_result))
                    {
                        if (!SeasonalEventPresentUtil::insertEventPresentGP(gp, finish_result))
                            ;
                    }
                }
                else if (!res)
                {
                    DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, context.translate(context.getCursorProject(), "Component", "MAX_ITEMBOX"));
                }
            }
        }
    }

    function checkABspecChampionshipReward(context, gp, finish_result, bonus_ratio)
    {
        if (finish_result == -1)
            return;

        if (bonus_ratio == nil)
            bonus_ratio = 1.0;

        var ol_login_bonus = GAME_STATUS.user_profile.context.exp_factor;
        if (bonus_ratio < ol_login_bonus)
            bonus_ratio = ol_login_bonus;

        var ol_login_bonus_precent = (bonus_ratio * 100.0).toInt();
        var bonus_args = [ol_login_bonus_precent, 0, 0];
        var is_bspec = gp.event.play_style.bspec_type == gtengine::BSpecType::ONLY_B;
        var prize_table = gp.event.reward.prize_table;

        if (prize_table != nil && finish_result < prize_table.size)
        {
            var money = prize_table[finish_result];
            money = calculateBonus(money, bonus_ratio);

            if (money > 0)
                DialogUtil::openPrizeMoneyDialog(context, money, true, bonus_args);
        }
    }

    function checkLicenseReward(context, gp, category_id, finish_result, best_result, bonus_ratio)
    {
        if (finish_result == -1)
            return;

        if (bonus_ratio == nil)
            bonus_ratio = 1.0;

        var ol_login_bonus = GAME_STATUS.user_profile.context.exp_factor;
        if (bonus_ratio < ol_login_bonus)
            bonus_ratio = ol_login_bonus;

        var ol_login_bonus_precent = (bonus_ratio * 100.0).toInt();
        var bonus_args = [ol_login_bonus_precent, 0, 0];
        var money = 0;
        var visible_trophies = [false, false, false];
        var prize_table = gp.series_reward.prize_table;

        // Money
        if (finish_result < prize_table.size)
        {
            var best_result_for_money = best_result;
            if (best_result_for_money == nil || best_result_for_money == -1)
                best_result_for_money = gp.event.reward.prize_table.size;

            for (var i = finish_result; i < best_result_for_money; i++)
            {
                if (i < visible_trophies.size && prize_table[i] > 0)
                    visible_trophies[i] = true;

                money += prize_table[i];
            }

            money = calculateBonus(money, bonus_ratio);
        }

        if (money > 0)
            DialogUtil::openPrizeMoneyDialog(context, money, true, bonus_args, visible_trophies);

        // EXP
        var exp = 0;
        visible_trophies = [false, false, false];
        var point_table = gp.event.reward.point_table;

        if (point_table[0] > 0)
        {
            if (finish_result < point_table.size)
            {
                var best_result_for_exp = best_result;
                if (best_result_for_exp == nil || best_result_for_exp == -1)
                    best_result_for_exp = point_table.size;

                for (var i = finish_result; i < best_result_for_exp; i++)
                {
                    if (i < visible_trophies.size && point_table[i] > 0)
                        visible_trophies[i] = true;

                    exp += point_table[i];
                }

                exp = calculateBonus(exp, bonus_ratio);
            }
        } 
        else
        {
            exp += getLicenseExp(category_id, finish_result, bonus_ratio);
        }

        if (exp > 0)
            DialogUtil::openPrizeAspecExpDialog(context, exp, true, bonus_args, visible_trophies);

        // Grim Action Log
        var license_id = GLOBAL_STATUS.user_profile.context.license_id;
        if (visible_trophies[0])
            ActionLogUtil::licenseEvent(license_id, 1);
        else if (visible_trophies[1])
            ActionLogUtil::licenseEvent(license_id, 2);
        else if (visible_trophies[2])
            ActionLogUtil::licenseEvent(license_id, 3);
    }

    function checkSpecialEventReward(context, gp, event_id, finish_result, best_result, bonus_ratio)
    {
        if (finish_result == -1)
            return;

        if (bonus_ratio == nil)
            bonus_ratio = 1.0;

        var ol_login_bonus = GAME_STATUS.user_profile.context.exp_factor;
        if (bonus_ratio < ol_login_bonus)
            bonus_ratio = ol_login_bonus;

        var ol_login_bonus_precent = (bonus_ratio * 100.0).toInt();
        var bonus_args = [ol_login_bonus_precent, 0, 0];
        var money = 0;
        var visible_trophies = [false, false, false];
        var prize_table = gp.event.reward.prize_table;

        // Money
        if (finish_result < prize_table.size)
        {
            var best_result_for_money = best_result;
            if (best_result_for_money == nil || best_result_for_money == -1)
                best_result_for_money = gp.event.reward.prize_table.size;

            for (var i = finish_result; i < best_result_for_money; i++)
            {
                if (i < visible_trophies.size && prize_table[i] > 0)
                    visible_trophies[i] = true;

                money += prize_table[i];
            }

            money = calculateBonus(money, bonus_ratio);
        }

        if (money > 0)
            DialogUtil::openPrizeMoneyDialog(context, money, true, bonus_args, visible_trophies);

        // EXP
        var exp = 0;
        visible_trophies = [false, false, false];
        var point_table = gp.event.reward.point_table;

        if (finish_result < point_table.size)
        {
            var best_result_for_exp = best_result;
            if (best_result_for_exp == nil || best_result_for_exp == -1)
                best_result_for_exp = point_table.size;

            for (var i = finish_result; i < best_result_for_exp; i++)
            {
                if (i < visible_trophies.size && point_table[i] > 0)
                    visible_trophies[i] = true;

                exp += point_table[i];
            }

            exp = calculateBonus(exp, bonus_ratio);
        }

        if (exp > 0)
            DialogUtil::openPrizeAspecExpDialog(context, exp, true, bonus_args, visible_trophies);

        // Grim Action Log
        var course_code = gp.event.track.course_code;
        var course_label = gtengine::MSpecDB::getCourseLabel(course_code);

        if (visible_trophies[0])
            ActionLogUtil::specialEvent(event_id, course_label, 1);
        else if (visible_trophies[1])
            ActionLogUtil::specialEvent(event_id, course_label, 2);
        else if (visible_trophies[2])
            ActionLogUtil::specialEvent(event_id, course_label, 3);
    }

    static sRacerNumBase = Grim2.getServerOptionToInt("game", "room.remote_racer_num_base", 16);

    function getRemoteRaceReward(context, gp, order, racers_num)
    {
        var prize = 0;
        var exp = 0;
        if (order < 0 || racers_num < 0)
            return [prize, exp];

        var num_base = sRacerNumBase;
        var shift = racers_num < num_base ? ((num_base - racers_num) / 2) + 1 : 0;
        var idx = order + shift;
        var prize_table = gp.event.reward.prize_table;
        var prize_type = gp.event.reward.prize_type;

        if (idx < prize_table.size)
            prize = prize_table[idx];

        var point_table = gp.event.reward.point_table;
        if (idx < point_table.size)
            exp = point_table[idx];

        return [prize.toInt(), exp.toInt()];
    }
}