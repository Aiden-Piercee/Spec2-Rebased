













module SeasonalEventPresentUtil
{
    static seasonal_event_base = 20000;

    function isPresented(gp)
    {
        var result = GLOBAL_STATUS.user_profile.record.event_present.getSeasonalEventResolt(10000 + gp.game_id);
        return result != nil && result == 0;
    }

    function getRecordByGP(gp)
    {
        return GLOBAL_STATUS.user_profile.record.event_present.getSeasonalEventResolt(10000 + gp.game_id);
    }

    function insertEventPresentGP(gp, finish_result)
    {
        var item = [
            10000 + gp.game_id,
            15,
            0,
            0,
            0,
            "",
            "",
            "",
            "",
            finish_result,
            0,
            0,
            0,
        ];

        return GLOBAL_STATUS.user_profile.record.event_present.insert(item);
    }

    function updateEventPresentGP(gp, finish_result)
    {
        return GLOBAL_STATUS.user_profile.record.event_present.updateSeasonalEventRecord(10000 + gp.game_id, finish_result);
    }

    function presentItemGP(gp, reward_present_list, finish_result, is_time_attack, context)
    {
        var item_list = Array();
        var message_code = "";
        var itemname_list = "";
        var result_text = finish_result + 1;

        if (is_time_attack || gp.event.game_mode == gtengine::GameMode::DRIFT_ATTACK)
        {
            if (gp.event.game_mode == gtengine::GameMode::DRIFT_ATTACK)
                message_code = "EVENT_DT_PREZENT";
            else
                message_code = "EVENT_TA_PREZENT";

            var cup = "";
            if (finish_result == 2)
                cup = "BRONZE";
            else if (finish_result == 1)
                cup = "SILVER";
            else if (finish_result == 0)
                cup = "GOLD";

            result_text = context.translate(context.getCursorProject(), "LicenseGT5", "THE_%{cup}");
        }
        else if (gp.event.game_mode == gtengine::GameMode::EVENT_RACE)
        {
            message_code = "EVENT_RACE_PREZENT";
        }

        foreach (var reward_present in reward_present_list)
        {
            var ticket = makePresentItem(reward_present.itemtype, reward_present.itemcategory, reward_present.argument4, 
                reward_present.argument1, reward_present.f_name, reward_present.argument3);
            
            if (ticket != nil)
            {
                item_list.push(ticket);

                var item_name = GameItemUtil::getItemText(ticket);
                var category_name = GameItemUtil::getCategoryName(ticket["category_id"]);
                Grim2Util::PUTLOG::RACE_PRESENT::get(ticket["type_id"], ticket["category_id"], ticket["argument1"], ticket["gameitem_id"], ticket["f_name"]);
                DialogUtil::openInformationDialog(
                    context, 
                    context.translate(context.getCursorProject(), "IntroductionGT5", message_code).build(result_text, category_name + " " + item_name[0]),
                    nil,
                    GameItemUtil::getItemImagePath(ticket["type_id"], ticket["gameitem_id"], ticket));
            }
        }

        if (!GameItemUtil::ItemBox::insertItemList(item_list))
            return false;

        return true;
    }

    function normalColorSelect()
    {
        // Colors from PAINT_COLOR_INFO
        var color = 214; // Nissan (Dark Blue Pearl)
        for (var i = 0; i < 5; i++)
        {
            var c = pdistd::MRandom::GetValue(1, 3303);
            if (c >= 2169 && c <= 2191) // Skip Polyphony Matte colors
                continue;

            if (c >= 3130 && c <= 3300) // Skip more polyphony colors
                continue;

            if (gtengine::MSpecDB::getPaintColorType(c) >= 99)
                ;
            else
            {
                color = c;
                break;
            }
        }

        return color;
    }

    function specialColorSelect()
    {
        return pdistd::MRandom::GetValue(2169, 2192); // Polyphony Matte colors
    }

    function checkEventFolderClear(event_id)
    {
        return GAME_STATUS.user_profile.record.event_present.checkEventFolderClear(event_id + seasonal_event_base);
    }

    function presentSeasonalEvent(event, context, title_text)
    {
        var event_id = event["id"];
        var item_type = event["gameitem_type"];
        var item_category = event["gameitem_category"];
        var item_id = event["gameitem_id"];
        var item_value = event["gameitem_value"];
        var argument1 = event["argument1"];
        var argument3 = event["argument3"];
        
        if (item_type == 0 || item_category == 0)
            return false;

        var ticket = makePresentItem(item_type, item_category, item_id, argument1, item_value, argument3);
        if (ticket != nil)
        {
            var item_name = GameItemUtil::getItemText(ticket);
            var category_name = GameItemUtil::getCategoryName(ticket["category_id"]);
            var argument1 = ticket["type_id"] == (gtengine
                ::GameItemType::SPECIAL && GameItemUtil::isCarTicket(ticket)) ? argument1 : item_value;
            var f_name = ticket["type_id"] == (gtengine
                ::GameItemType::SPECIAL && GameItemUtil::isCarTicket(ticket)) ? item_value : "";

            Grim2Util::PUTLOG::RACE_PRESENT::get(item_type, item_category, item_value, item_id, item_value);
            DialogUtil::openInformationDialog(
                context, 
                context.translate(context.getCursorProject(), "IntroductionGT5", "SEASONAL_EVENT_ALL_CLEAR").build(title_text, category_name + " " + item_name[0]),
                nil,
                GameItemUtil::getItemImagePath(item_type, item_id, ticket));

            if (GameItemUtil::ItemBox::insertItemList([ticket]))
            {
                var res = GAME_STATUS.user_profile.record.event_present.insertEventFolderClear(event_id + seasonal_event_base, ticket);
                return res;
            }
        }

        return false;
    }

    function makePresentItem(item_type, item_category, item_id, argument1, f_name, argument3)
    {
        var ticket = nil;
        if (item_id != nil && item_id > 0)
        {
            ticket = GameItemUtil::getItemByID(item_id);
            if (ticket["type_id"] == gtengine::GameItemType::SPECIAL && GameItemUtil::isCarTicket(ticket))
            {
                if (argument1 != nil && argument1 >= 0)
                {
                    ticket["code"] = f_name;

                    var variation = main::gtengine::MSpecDB::getCarVariation(f_name);
                    if (argument1.toInt() < variation.toInt())
                        ticket["argument1"] = argument1;
                    else
                    {
                        var color = main::pdistd::MRandom::GetValue(0, variation);
                        ticket["argument1"] = color;
                    }
                }
                else
                {
                    ticket["code"] = f_name;

                    var variation = main::gtengine::MSpecDB::getCarVariation(f_name);
                    var color = main::pdistd::MRandom::GetValue(0, variation);
                    ticket["argument1"] = color;

                }
            }
            else if (GameItemUtil::isPaintItem(ticket))
            {
                var color_id = argument1 == -1 ? normalColorSelect() : argument1;
                if (argument1 == -1 && item_id == 103)
                    color_id = specialColorSelect();

                var color_name = gtengine::MSpecDB::getPaintColorName_A(color_id);
                ticket["argument1"] = color_id;
                ticket["argument2"] = gtengine::MSpecDB::getPaintColorType(ticket["argument1"]);
                ticket["argument3"] = gtengine::MSpecDB::getPaintColorRGB(ticket["argument1"], 0).normalize * 10000;
                ticket["item_name"] = color_name;
                ticket["code"] = gtengine::MSpecDB::getPaintColorTunerString(ticket["argument1"]);
            }
            else if (GameItemUtil::isHornItem(ticket))
            {
                ticket["argument1"] = argument1 == -1 ? GameItemUtil::getHornSound() : argument1;
                ticket["item_name"] = GameItemUtil::getHornName(argument1);
            }
            else if (ticket["type_id"] != nil && ticket["type_id"] == gtengine::GameItemType::DRIVER_ITEM)
            {
                if (GameItemUtil::isSpecialWearSet(ticket["value"]))
                    ticket["argument1"] = 0;
                else if (argument1 == -1)
                    ticket["argument1"] = GameItemUtil::getRandomAvatorItemColor();
                else
                    ticket["argument1"] = argument1;
            }
            else if (ticket["category_id"] == gtengine::GameItemCategory::SPECIAL_TICKET)
                ticket = GameItemUtil::onNotPresentFlag(ticket);
        }
        else if (item_type != nil && item_type == gtengine::GameItemType::DRIVER_ITEM)
        {
            if (item_category == gtengine::GameItemCategory::DRIVER_HEAD)
            {
                var avator_item_id = GameItemUtil::getRandomColorVariationAvatorHead();
                ticket = GameItemUtil::getAvatorHeadItem(avator_item_id);
            }
            else if (item_category == gtengine::GameItemCategory::DRIVER_BODY)
            {
                var avator_item_id = GameItemUtil::getRandomColorVariationAvatorBody();
                ticket = GameItemUtil::getAvatorBodyItem(avator_item_id);
            }
            
            if (ticket != nil)
                ticket["argument1"] = GameItemUtil::getRandomAvatorItemColor();
        }
        else if (item_type != nil && item_category == gtengine::GameItemCategory::PAINT_ITEM)
        {
            if (item_id != 103)
            {
                ticket = GameItemUtil::getSpecialPaintItem();
                ticket["argument1"] = normalColorSelect();
            }
            else
            {
                ticket = GameItemUtil::getPaintItem();
                ticket["argument1"] = specialColorSelect();
            }

            var color_name = gtengine::MSpecDB::getPaintColorName_A(ticket["argument1"]);
            ticket["argument2"] = gtengine::MSpecDB::getPaintColorType(ticket["argument1"]);
            ticket["argument3"] = gtengine::MSpecDB::getPaintColorRGB(ticket["argument1"], 0).normalize * 10000;
            ticket["item_name"] = color_name;
            ticket["code"] = gtengine::MSpecDB::getPaintColorTunerString(ticket["argument1"]);
        }
        else if (item_type != nil && item_category != nil && item_category == gtengine::GameItemCategory::HORN)
        {
            ticket = GameItemUtil::getHornItem();
            ticket["argument1"] = GameItemUtil::getHornSound();
            ticket["item_name"] = ticket["argument1"];
        }

        if (argument3 != nil && argument3 == -1)
            ticket = GameItemUtil::onNotPresentFlag(ticket);

        return ticket;
    }
}