

//---------------------------------------------------------------------------------------
// SpecDatabaseUtil.ad
//
// Utility module for grabbing common things from the car database
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module SpecDatabaseUtil
{
    function getCarSpecText(context, car_code, display_unit = true, detail = false, root)
    {
        if (root == nil)
            root = context.getRootWindow();

        if (root == nil)
            root = context.getCurrentPage();

        if (root == nil)
            return "";
            
        var d_train = main::gtengine::MSpecDB::getCarDriveTrain(car_code);
        var ps = main::gtengine::MSpecDB::getCarCatalogPs(car_code);
        var tq = main::gtengine::MSpecDB::getCarCatalogTq(car_code);
        var ps_rpm = main::gtengine::MSpecDB::getCarCatalogPsRpm(car_code);
        var tq_rpm = main::gtengine::MSpecDB::getCarCatalogTqRpm(car_code);
        var mass = main::gtengine::MSpecDB::getCarCatalogMs(car_code, display_unit);
        var length = main::gtengine::MSpecDB::getCarCatalogLength(car_code, display_unit);
        var width = main::gtengine::MSpecDB::getCarCatalogWidth(car_code, display_unit);
        var height = main::gtengine::MSpecDB::getCarCatalogHeight(car_code, display_unit);
        var displacement = main::gtengine::MSpecDB::getCarCatalogDisplacement(car_code, display_unit);
        var db_car_name = main::gtengine::MSpecDB::getCarName(car_code);

        if (display_unit)
        {
            ps += context.translate(root, "Unit", main::pdiext::MUnit::GetUnitKeywordOfPower());
            tq += context.translate(root, "Unit", main::pdiext::MUnit::GetUnitKeywordOfPower());
            ps_rpm += context.translate(root, "Unit", "RPM");
            tq_rpm += context.translate(root, "Unit", "RPM");
        }

        d_train = context.translate(root, "DriveTrainName", d_train);
        var psrpm_fmt = (ps == "---" || ps_rpm == "---") ? "---" : "%{ps}/%{ps_rpm};";
        var tqrpm_fmt = (tq == "---" || tq_rpm == "---") ? "---" : "%{tq}/%{tq_rpm};";

        if (detail)
        {
            var format = context.translate(root, "SpecFormat", "car_spec_detail");
            return format.build(db_car_name, length, width, height, mass, d_train, psrpm_fmt, tqrpm_fmt, displacement);
        }
        else
        {
            var format = context.translate(root, "SpecFormat", "car_spec");
            return format.build(db_car_name, d_train, psrpm_fmt, tqrpm_fmt, mass);
        }

        var carname_txt = gtengine::MSpecDB::getCarName(car_code);
        var country_flag = SPECDB.executeQuery1R1C("SELECT CountryFlag FROM CAR_VIEW WHERE ID=?", [car_code]);
        var country_str = country_flag != "-" ? country_flag.upcase() : "PDI";
        var country_txt = manager.translate("Country", country_str);
        var catalog = gtengine::MSpecDB::getCatalogSpec(car_code);
        var drivetype_txt = manager.translate("DriveTrainName", catalog.DriveTypeName);
        var format = manager.translate("SpecFormat", "car_spec_gt6");

        var car_spec = format.build(
            carname_txt,
            country_txt,
            drivetype_txt,
            catalog.power,
            catalog.torque,
            catalog.weight
        );

        return car_spec;
    }

    function getCarMaxPowerText(context, car_code)
    {
        var ps = main::gtengine::MSpecDB::getCarCatalogPs(car_code, true);
        if (ps == "-")
            ps = "---";

        var ps_rpm = main::gtengine::MSpecDB::getCarCatalogPsRpm(true);
        return (ps == "---" && ps_rpm == "---") ? "---" : "%{ps}/%{ps_rpm}";
    }

    function getCarMaxPowerText(context, car_code)
    {
        var tq = main::gtengine::MSpecDB::getCarCatalogTq(car_code, true);
        if (tq == "-")
            tq = "---";

        var tq_rpm = main::gtengine::MSpecDB::getCarCatalogTqRpm(true);
        return (tq == "---" && tq_rpm == "---") ? "---" : "%{tq}/%{tq_rpm}";
    }

    function getCarDrivetrainText(context, car_code, root)
    {
        var d_train = main::gtengine::MSpecDB::getCarDriveTrain(car_code);
        if (root == nil)
            root = context.getRootWindow();

        if (root == nil)
            root = context.getCurrentPage();

        if (root != nil)
            return context.translate(root, "DriveTrainName", d_train);
        else
            return d_train;
    }

    function getCarLengthText(context, car_code)
    {
        return main::gtengine::MSpecDB::getCarCatalogLength(car_code, true);
    }

    function getCarWidthText(context, car_code)
    {
        return main::gtengine::MSpecDB::getCarCatalogWidth(car_code, true);
    }

    function getCarHeightText(context, car_code)
    {
        return main::gtengine::MSpecDB::getCarCatalogHeight(car_code, true);
    }

    function getCarWeightText(context, car_code)
    {
        return main::gtengine::MSpecDB::getCarCatalogMs(car_code, true);
    }

    function getCarDisplacementText(context, car_code)
    {
        var displacement = main::gtengine::MSpecDB::getCarCatalogDisplacement(car_code, true);
        if (displacement.beginWith("-"))
            displacement = "---";

        return displacement;
    }

    function getCarLabelArray(src)
    {
        var n = src.size;
        var dst = Array(n);

        for (var i = 0; i < n; i++)
        {
            if (src[i].isInstanceOf(String))
            {
                dst[i] = src[i];
            }
            else
            {
                dst[i] = main::gtengine::MSpecDB::getCarLabel(src[i]);
            }
        }

        return dst;
    }
}