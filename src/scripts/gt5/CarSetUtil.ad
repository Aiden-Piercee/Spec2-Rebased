

//---------------------------------------------------------------------------------------
// CarSetUtil.ad
//
// Utility module
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module CarSetUtil
{
    function create_col_table(cars)
    {
        var table = Array(cars.size);
        for (var i = 0; i < cars.size; i++)
        {
            var col_num = gtengine::MSpecDB::getCarVariation(cars[i]);
            if (col_num <= 0)
                table[i] = [0];
            else
            {
                var cols = Array(col_num);
                for (var j = 0; j < col_num; j++)
                    cols[j] = j;

                cols.randomShuffle();
                table[i] = cols;
            }
        }

        return table;
    }

    function moderate_shuffle(list, distance, prob)
    {
        for (var i = 0; i < list.size - distance; i++)
        {
            if (main::pdistd::MRandom::GetValue(0, prob) == 0)
            {
                var tmp = list[i + distance];
                list[i + distance] = list[i];
                list[i] = tmp;
            }
        }
    }

    function get_carset_plain(cars, entry_num, debug)
    {
        var trimmed_cars = Array(cars.size);
        
        var j = 0;
        for (var i = 0; i < cars.size; ++i)
        {
            if (cars[i] != gtengine::MSpecDB::NO_CODE)
            {
                trimmed_cars[j] = cars[i];
                ++j;
            }
        }

        if (j < cars.size)
        {
            trimmed_cars.resize(j);
            cars = trimmed_cars;
        }

        var col_table = create_col_table(cars);
        var col_idx_table = Array(cars.size);

        for (var i = 0; i < cars.size; i++)
            col_idx_table[i] = 0;

        var result = Array(entry_num);

        for (var i = 0; i < entry_num; i++)
        {
            var idx = i % cars.size;
            var car = cars[idx];
            var colidx = col_idx_table[idx];
            var col = col_table[idx][colidx];

            colidx++;
            if (colidx >= col_table[idx].size)
                colidx = 0;

            col_idx_table[idx] = colidx;
            result[i] = [car, col];
        }

        if (debug != nil && debug)
        {
            for (var i = 0; i < result.size; i++)
                result[i].push(i);
        }

        return result;
    }

    function get_carset_balance(cars, entry_num, params, debug)
    {
        var cars = get_carset_plain(cars, entry_num);

        if (debug != nil && debug)
        {
            for (var i = 0; i < cars.size; i++)
                cars[i].push(i);
        }

        if (params != nil)
        
        foreach (var pair in params)
        {
            if (pair[0] > 0 && pair[1] > 0)
                moderate_shuffle(cars, pair[0], pair[1];)
        }

        return cars;
    }

    function get_carset_shuffle(cars, entry_num)
    {
        cars.randomShuffle();
        return get_carset_plain(cars, entry_num);
    }

    function getCarSetPlain(race_spec, player_num, debug)
    {
        if (race_spec == nil)
            return nil;

        var cars = race_spec.cars;
        if (cars.size <= 0)
            return nil;

        var entry_num = race_spec.entry_num;
        if (player_num != nil)
            entry_num -= player_num;

        return get_carset_plain(cars, entry_num, debug);
    }

    function getCarSet(race_spec, params, player_num, debug)
    {
        if (race_spec == nil)
            return nil;

        var cars = race_spec.cars;
        if (cars.size <= 0)
            return nil;
    
        var entry_num = race_spec.entry_num;
        if (player_num != nil)
            entry_num -= player_num;
    
        return get_carset_balance(cars, entry_num, params, debug);
    }

    function getCarSetShuffle(cars, entry_num)
    {
        return get_carset_shuffle(cars, entry_num);
    }

    function getSameCarSet(make_car, make_col, entry_max, player_num)
    {
        var entry_num = entry_max;
        if (player_num != nil)
            entry_num -= player_num;
    
        var result = Array(entry_num);
        for (var i = 0; i < entry_num; i++)
            result[i] = [make_car, make_col];

        return result;
    }
}
