

//---------------------------------------------------------------------------------------
// ThumbnailUtil.ad
//
// Utility module for taking car thumbnails, getting paths
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module ThumbnailUtil
{
    function captureSettings(context, sceneface)
    {

    }

    function captureIcon(context, sceneface, cp, large, path, use_lod_model)
    {
        var free_size_byte = pdistd::GetDiskFreeSize("/APP_DATA");
        var threshold = 32 * 1024 * 1024;

        if (free_size_byte < threshold)
            return;

        var sf = sceneface;
        if (large)
        {
            sf.w = 384;
            sf.h = 216;
        }
        else
        {
            sf.w = 192;
            sf.h = 108;
        }

        sf.setDefaultCarParameter(cp);
        sf.setClearColorBuffer(true);

        var image_cmd = [
            "setDefaultSceneParameter",
            "setEnvClearMode 1",
            "setDynamicRangeCompress 5.0",
            "setDynamicRangeCompressEnv 5.0",
            "setGlobalAmbient 0 0 0",
            "setLightDir -0.34720 0.898783 -0.305177",
            "setGridDisp 0",
            "setPerspective     5.000000   0          0.100000   1000.000000",
            "setCameraPosition   -7 0.3 -24.5",
            "setCameraLookat    0.1 0.9 0",
            "setMirrorMode   0",
            "setAAMode     best",
            "clearAllModel",
            "loadModel code:mb82%env env1 false true",
            "setBGColor 0.03 0.03 0.03",
            "setGain 1.5",
        ];

        foreach (var c in image_cmd)
            sf.execCommand(c);

        sf.saveCommandQueue();
        sf.resetCommandQueue();

        if (use_lod_model != nil && use_lod_model)
            sf.execCommand("changeLodCar _default car0 true false");
        else
            sf.execCommand("changeCar _default car0 true false");

        sf.execCommand("setCarSteer -21.29");
        sf.execCommand("resetGlobalMotionFrame");
        
        context.wait(0.1);

        var counter = 0;
        while (sf.isUnderSetup())
        {
            context.wait(0.3);

            if (++counter > 50)
                return; // Assume stuck
        }

        sf.iconCaptureBegin();
        sf.iconShotImage();
        sf.waitTickEntry();

        var mask_cmd = [
            "setBGColor 0.35 0.35 0.35",
            "setGain 0.003",
            "setLightDiffuse  0 0 0 0",
            "setLightSpecular 0 0 0 0",
            "setAmbientCubeXp 0 0 0 0",
            "setAmbientCubeXm 0 0 0 0",
            "setAmbientCubeYp 0 0 0 0",
            "setAmbientCubeYm 0 0 0 0",
            "setAmbientCubeZp 0 0 0 0",
            "setAmbientCubeZm 0 0 0 0",
        ];

        foreach (var c in mask_cmd)
            sf.execCommand(c);

        sf.saveCommandQueue();
        sf.iconShotMask();
        sf.waitTickEntry();

        path -= ".png";
        pdistd::MakeDirectoryForFile(path);

        sf.iconCompositeSave(path);
        sf.iconCaptureEnd();
    }

    function captureFinalize(context, sceneface)
    {
        var sf = sceneface;
        sf.execCommand("clearAllModel");
        context.wait(0.3);
    }

    function captureIconImpl(context, sceneface, cp, large, path, use_lod_model)
    {
        var sf = sceneface;
        captureSettings(context, sceneface);
        captureIcon(context, sceneface, cp, large, path, use_lod_model);
        captureFinalize(context, sceneface, cp, large, path);
    }

    function captureIconForGarage(context, sceneface, garage_id, cpp_or_cp, type_list)
    {
        var cp;
        if (cpp_or_cp.isInstanceOf(Garage2::CarParameterProxy))
            cp = cpp_or_cp.getCP();
        else if (cpp_or_cp.isInstanceOf(gtengine::MCarParameter))
            cp = cpp_or_cp;

        captureSettings(context, sceneface);

        foreach (var type in type_list)
        {
            var path = GarageUtil::getThumbnailPath(garage_id, type);
            captureIcon(context, sceneface, cp, type == "L", path, true);
        }

        captureFinalize(context, sceneface);
    }

    function captureIconForArcadeIf(context, sceneface, cp_or_cplist)
    {
        var cp_list;
        if (cp_or_cplist.isInstanceOf(main::gtengine::MCarParameter))
            cp_list = [cp_or_cplist];
        else if (cp_or_cplist.isInstanceOf(Array))
            cp_list = cp_or_cplist;

        captureSettings(context, sceneface);

        foreach (var cp in cp_list)
        {
            var path = GarageUtil::getThumbnailPath2(cp.getCarLabel(), "M", cp.color);
            if (pdistd::Exist(path))
                continue;

            captureIcon(context, sceneface, cp, false, path, true);
        }

        captureFinalize(context, sceneface);
    }

    module Avatar
    {
        module Genre
        {
            static SIMPLE = 0;
            static SETUP = 1;
            static COMBO = 2;
        
            function getString(genre)
            {
                switch (genre)
                {
                    case SIMPLE:
                        return "simple";

                    case SETUP:
                        return "setup";

                    case COMBO:
                        return "combo";
                }
            }
        }

        module Type
        {
            static MET = 0;
            static SUITS = 1;
            static MET_SUITS = 2;
        
            function getString(type)
            {
                switch (type)
                {
                    case MET:
                        return "met";
                    
                    case SUITS:
                        return "suits";
                
                    case MET_SUITS:
                        return "met_suits";
                }
            }
        }

        function getImagePathImpl(genre, type, size_str, met_id, met_color, suits_id, suits_color)
        {
            var file_name;
            if (type == Type::MET_SUITS)
            {
                file_name = "%03d_%02d_%03d_%02d.png".format(met_id, 0, suits_id, 0);
            }
            else 
            {
                var id = 0;
                var color = 0;

                if (type == Type::MET)
                {
                    id = met_id;
                    if ((met_id >= 14 && met_id <= 36) || 
                        (met_id >= 51 && met_id <= 54) ||
                        (met_id >= 56 && met_id <= 57))
                        color = met_color;
                }
                else
                {
                    id = suits_id;
                    if ((suits_id >= 14 && suits_id <= 35) || 
                        (suits_id >= 51 && suits_id <= 54))
                        color = suits_color;
                }

                file_name = "%03d_%02d.png".format(id, color);

            }
            return "%{Genre::getString(genre)}/%{size_str}/%{Type::getString(type)}/%{file_name}";
        }

        function getImagePath(genre, type, size_str, met_id, met_color, suits_id, suits_color)
        {
            var path = getImagePathImpl(genre, type, size_str, met_id, met_color, suits_id, suits_color);
            path -= ".png";
            return "character/thumbnail/%{path}";
        }

        function getImagePathForDevelopment(dir, genre, type, size_str, met_id, met_color, suits_id, suits_color)
        {
            var path = getImagePathImpl(genre, type, size_str, met_id, met_color, suits_id, suits_color);
            return "%{dir}/%{path}";
        }

        module Capture { } // Empty, but attributes loaded from util script
        function loadAvatarUtil()
        {
            Capture.load("/scripts/gt5/util/ThumbnailAvatarUtil");
        }

        function unloadAvatarUtil()
        {
            Capture.clearStatic();
        }
    }
}