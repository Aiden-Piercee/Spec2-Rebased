

//---------------------------------------------------------------------------------------
// GameKeyValue.ad
//
// Creates the save profile entity
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module GameKeyValue
{
    #define KEY_VALUE_TABLE_NAME "t_key_value"
    #define KEY_VALUE_TABLE_VERSION 1

    function clearInitializer()
    {
        undef CreateStructure;
        undef Initialize;
        undef ReinitializeDB;
        undef clearInitializer;
    }

    function CreateStructure()
    {
        var st = STStructure("Impl");
        GameKeyValue.defineModule(st);

        DefineMethod();

        return st;
    }

    function Initialize(instance)
    {
        instance.initialize();
    }

    function ReinitializeDB(instance)
    {
        instance.initialize();
    }

    function getSqlite()
    {
        return GlobalStatus::getSqlite();
    }


    function DefineMethod()
    {
        module Impl
        {
            method initialize()
            {
                var sqlite = getSqlite();
                DBUtil::initializeTableCommon(sqlite, KEY_VALUE_TABLE_NAME, KEY_VALUE_TABLE_VERSION);
                var sql_list = [
                    "CREATE TABLE IF NOT EXISTS %s (category TEXT, key TEXT, value TEXT, PRIMARY KEY (category, key))".format(KEY_VALUE_TABLE_NAME),
                    "CREATE INDEX IF NOT EXISTS %s_idx1 ON %s (category)".format(KEY_VALUE_TABLE_NAME, KEY_VALUE_TABLE_NAME),
                    "CREATE INDEX IF NOT EXISTS %s_idx2 ON %s (key)".format(KEY_VALUE_TABLE_NAME, KEY_VALUE_TABLE_NAME),
                ];
        
                var dummy_param = [];
                var sql_list0 = Array();
        
                foreach (var sql in sql_list)
                    sql_list0.push([sql, dummy_param]);
                
                var res = sqlite.executeTransaction(sql_list0);
            }

            method begin()
            {
                var sqlite = getSqlite();
                sqlite.begin();
            }
        
            method commit()
            {
                var sqlite = getSqlite();
                sqlite.commit();
            }
            
            method get(category, key)
            {
                var sqlite = getSqlite();
                var sql = "SELECT value FROM %s WHERE category = ? AND key = ?".format(KEY_VALUE_TABLE_NAME);
                var res = sqlite.executeQuery(sql, [category, key]);
                var result = getResult1(res);

                return result == nil ? "" : result;
            }

            method getInt(category, key)
            {
                var value = get(category, key);
                return value.toInt();
            }

            method set(category, key, value)
            {
                var value0 = value.toString();
                var sqlite = getSqlite();
                var sql_update = "UPDATE %s SET value = ? WHERE category = ? AND key = ?".format(KEY_VALUE_TABLE_NAME);
                var res = sqlite.execute(sql_update, [value0, category, key]);
                DB_ASSERT(res == SQLITE_DONE, res);

                if (isFailed(res))
                    ;
                else
                {
                    if (sqlite.changes() == 0)
                    {
                        var sql_insert = "INSERT INTO %s (category, key, value) VALUES (?, ?, ?)".format(KEY_VALUE_TABLE_NAME);
                        res = sqlite.execute(sql_insert, [category, key, value0]);
                        DB_ASSERT(res == SQLITE_DONE, res);

                        if (isFailed(res))
                            ;
                    }
                }
            }

            method deleteByCategory(category)
            {
                var sqlite = getSqlite();
                var sql = "DELETE FROM %s WHERE category = ?".format(KEY_VALUE_TABLE_NAME);
                var res = sqlite.execute(sql, [category]);
                if (isFailed(res))
                    ;

                return;
            }

            method getResult1(res)
            {
                if (res.size == 0)
                    return nil;

                var row = res[0];
                if (row.size == 0)
                    return nil;

                return res[0][0];
            }

            method isFailed(res)
            {
                return res != SQLITE_DONE;
            }
            
        }
    }
}