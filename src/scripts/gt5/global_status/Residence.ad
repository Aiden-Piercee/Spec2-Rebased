

//---------------------------------------------------------------------------------------
// Residence.ad
//
// Creates the save profile entity
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module Residence
{
    function clearInitializer()
    {
        undef CreateStructure;
        undef create_player;
        undef Initialize;
    }

    function CreateStructure()
    {
        var st = STStructure("Impl");
        Residence.defineModule(st);
        st.define("players", STArray(STObject(gtengine::MCarDriverParameter), 3));
        st.define("pool", STArray(STObject(gtengine::MCarDriverParameter), 6));
        st.define("bspec_driver_num", STInt());
        st.define("bspec_obtain_id", STInt());
        st.define("bspec_sort_type", STByte());
        st.define("need_to_send_nickname", STByte());
        st.define("player_firstname", STString(12 + 1));
        st.define("player_lastname", STString(12 + 1));

        var st_properties = STStructure();
        st_properties.define("entried", STByte());
        st_properties.define("running", STByte());
        st_properties.define("online", STByte());
        st_properties.define("grim_driver_id", STULong());
        st.define("properties", STArray(st_properties, 6));

        DefineMethod();
        return st;
    }

    function create_player(is_arcade, port)
    {
        var dp = gtengine::MCarDriverParameter();
        dp.setDefault();
        dp.setPlayer(port);
        dp.display_driving_line = true;

        if (is_arcade)
        {
            dp.head_code = 0;
            dp.body_code = 0;
            dp.head_color_code = 0;
            dp.body_color_code = 0;
        }
        else
        {
            dp.head_code = 7;
            dp.body_code = 7;
            dp.head_color_code = 0;
            dp.body_color_code = 0;
        }

        if (is_arcade)
        {
            if (port == 0)
                dp.display_name = pdistd::getPlayerName();
            else
                dp.display_name = pdistd::getPlayerName() + "[2]";
        }
        else
            dp.display_name = pdistd::getPlayerName();
        return dp;
    }

    function Initialize(instance)
    {
        instance.players[0] = create_player(false, 0);
        instance.players[1] = create_player(true, 0);
        instance.players[2] = create_player(true, 1);

        for (var i = 0; i < 6; i++)
        {
            instance.pool[i] = gtengine::MCarDriverParameter();
            instance.properties[i].entried = 0;
            instance.properties[i].running = 0;
            instance.properties[i].online = 0;
            instance.properties[i].grim_driver_id = 0;
        }

        instance.bspec_driver_num = 0;
        instance.bspec_obtain_id = 0;
        instance.bspec_sort_type = 0;
        instance.need_to_send_nickname = false;
        instance.player_firstname = "";
        instance.player_lastname = "";
        
        for (var i = 0; i < 1; i++)
        {
            var dp = gtengine::MCarDriverParameter();
            dp.setGroveAIParameter("max_ai");
            ABspecUtil::getBSpecPlayerSkill(dp, 0);
            dp.display_name = "";
            var id = instance.addBSpecDriver(dp);
        }
    }

    function DefineMethod()
    {
        module Impl
        {
            import __toplevel__::main;
            import __toplevel__::System::*;

            method apply()
            {

            }

            method getPlayerName()
            {
                if (main::AppOpt["player_name"] != nil)
                    return main::AppOpt["player_name"];

                return pdistd::getPlayerName();
            }

            method refreshPlayerName()
            {
                var name = self.getPlayerName();
                self.players[0].display_name = name;
                self.players[1].display_name = name;
                self.players[2].display_name = name + "[2]";
            }

            method referPlayer()
            {
                return players[0];
            }

            method getPlayer()
            {
                var dp = gtengine::MCarDriverParameter();
                dp.deepCopy(players[0]);
                return dp;
            }

            method setPlayer(player_no, dp)
            {
                players[0].deepCopy(dp);
            }

            method referArcadePlayer(player_no)
            {
                return players[player_no + 1];
            }

            method getArcadePlayer(player_no)
            {
                var dp = gtengine::MCarDriverParameter();
                dp.deepCopy(players[player_no + 1]);
                return dp;
            }

            method setArcadePlayer(player_no, dp)
            {
                players[player_no + 1].deepCopy(dp);
            }

            method check_id(residence_id)
            {
                if (residence_id < 0)
                    return false;
                else if (residence_id >= 6)
                    return false;
                else if (self.pool[residence_id].isVacant())
                    return false;

                return true;
            }

            method addBSpecDriver(dp)
            {
                for (var i = 0; i < 6; i++)
                {
                    if (!self.pool[i].isVacant())
                        continue;
                    else
                    {
                        self.pool[i].deepCopy(dp);
                        self.bspec_obtain_id += 1;
                        self.bspec_driver_num += 1;
                        self.pool[i].residence_id = i;
                        return i;
                    }
                }

                return -1;
            }

            method getBSpecDriver(residence_id)
            {
                return self.pool[residence_id];
            }

            method setBSpecDriver(residence_id, dp)
            {
                if (check_id(residence_id))
                {
                    self.pool[residence_id].deepCopy(dp);
                    self.pool[residence_id].residence_id = residence_id;
                }
            }

            method removeDriver(residence_id)
            {
                if (!check_id(residence_id))
                    return false;
                else
                {
                    self.bspec_driver_num -= 1;
                    self.pool[residence_id].clear();
                    self.properties[residence_id].entried = 0;
                    self.properties[residence_id].running = 0;
                    self.properties[residence_id].online = 0;
                    self.properties[residence_id].grim_driver_id = 0;
                    return true;
                }
            }

            method retireDriver(residence_id)
            {
                if (!check_id(residence_id))
                    return false;
                else
                {
                    self.pool[residence_id].display_name = "";
                    self.properties[residence_id].entried = 0;
                    self.properties[residence_id].running = 0;
                    self.properties[residence_id].online = 0;
                    self.properties[residence_id].grim_driver_id = 0;
                    return true;
                }
            }
            
            method clear()
            {
                for (var i = 0; i < 6; i++)
                {
                    self.pool[i].clear();
                    self.properties[i].entried = 0;
                    self.properties[i].running = 0;
                    self.properties[i].online = 0;
                    self.properties[i].grim_driver_id = 0;
                }

                self.bspec_driver_num = 0;
                self.bspec_obtain_id = 0;
                self.bspec_sort_type = 0
            }

            method incBSpecDay()
            {
                var driver_list = getContractDriverList();
                for (var i = 0; i < driver_list.size; i++)
                {
                    var dp = driver_list[i][1];

                    if (!dp.isVacant() && !self.properties[dp.residence_id].online)
                    {
                        var id = dp.growth_parameter.spec_id;
                        var loop = 0;
                        if (id >= 0)
                        {
                            var info = BSpecDriverData::getBSpecDriverInfo(id);
                            loop = info["condition_loop"];
                        }

                        if (dp.growth_parameter.days < 1000 + loop)
                            dp.growth_parameter.days++;
                        else
                            dp.growth_parameter.days = 1000;

                        if (dp.growth_parameter.days >= 500)
                            PDINetwork.unlockTrophyAsync(gtengine::TrophyType::B_SPEC_TROPHY_VETERAN_DRIVER);

                        ABspecUtil::calcCondition(dp);
                        setBSpecDriver(dp.residence_id, dp);
                    }
                }
            }

            method getOnlineDriverList()
            {
                var list = Array();
                for (var i = 0; i < 6; i++)
                {
                    var dp = self.pool[i];
                    if (!dp.isVacant())
                    {
                        if (self.properties[i].online)
                        {
                            list.push([
                                i, dp, self.properties[i].entried, self.properties[i].online, self.properties[i].grim_driver_id
                            ]);
                        }
                    }
                }

                return list;
            }

            method getContractDriverList()
            {
                var list = Array();
                for (var i = 0; i < 6; i++)
                {
                    var dp = self.pool[i];
                    if (!dp.isVacant())
                    {
                        if (dp.display_name != "")
                        {
                            list.push([
                                i, dp, self.properties[i].entried, self.properties[i].online, self.properties[i].grim_driver_id
                            ]);
                        }
                    }
                }

                return list;
            }

            method getContractDriverCount()
            {
                var counter = 0;
                for (var i = 0; i < 6; i++)
                {
                    var dp = self.pool[i];
                    if (!dp.isVacant())
                    {
                        if (dp.display_name != "")
                            counter++;
                    }
                }

                return counter;
            } 

            method getContractDriver(residence_id)
            {
                if (residence_id < 0)
                    return nil;

                var dp = self.pool[residence_id];
                if (!dp.isVacant())
                {
                    if (dp.display_name != "")
                    {
                        return [residence_id, dp, self.properties[residence_id].entried, self.properties[residence_id].online, self.properties[residence_id].grim_driver_id];
                    }
                }

                return nil;
            }

            method getEntryDriverList()
            {
                var list = Array();
                for (var i = 0; i < 6; i++)
                {
                    if (!self.properties[i].entried)
                        continue;

                    var dp = self.pool[i];
                    if (!dp.isVacant())
                    {
                        list.push([
                            i, dp, self.properties[i].entried, self.properties[i].online, self.properties[i].grim_driver_id
                        ]);
                    }
                }

                return list;
            }

            method getEntryDriverParameterList()
            {
                var list = Array();
                for (var i = 0; i < 6; i++)
                {
                    if (!self.properties[i].entried)
                        continue;

                    var dp = self.pool[i];
                    if (!dp.isVacant() && !self.properties[i].online)
                        list.push(dp);
                }

                return list;
            }

            method addEntryDriver(residence_id)
            {
                if (!pool[residence_id].isVacant() && !self.properties[residence_id].entried)
                {
                    self.properties[residence_id].entried = true;
                    return true;
                }
                else
                    return false;
            }

            method removeEntryDriver(residence_id)
            {
                if (!pool[residence_id].isVacant() && self.properties[residence_id].entried)
                {
                    self.properties[residence_id].entried = false;
                    self.properties[residence_id].running = 0;
                    return true;
                }
                else
                    return false;
            }

            method clearEntryDrivers()
            {
                for (var i = 0; i < 6; i++)
                {
                    self.properties[i].entried = false;
                    self.properties[i].running = 0;
                }
            }

            method getOfflineDriverCount()
            {
                var count = 0;
                for (var i = 0; i < 6; i++)
                {
                    if (!self.pool[i].isVacant() && self.pool[i].display_name != "" && !self.properties[i].online)
                        count++;
                }

                return count;
            }

            method getDriverList(bspec_sort_type, num, begin)
            {
                var get_num;
                if (num != nil)
                    get_num = self.bspec_driver_num < num ? self.bspec_driver_num : num;
                else
                    get_num = self.bspec_driver_num;

                var list = Array(get_num);
                var added_num = 0;
                var count_num = 0;

                for (var i = 0; i < 6; i++)
                {
                    if (added_num >= get_num)
                        break;

                    var dp = self.pool[i];
                    if (!dp.isVacant())
                    {
                        count_num++;
                        if (begin != nil && count_num <= begin)
                            continue;
                        else
                        {
                            list[added_num] = [i, dp, self.properties[i].entried, self.properties[i].online, 
                                self.properties[i].grim_driver_id, self.properties[i].running];
                            added_num++;
                        }
                    }
                }

                return list;
            }

            method hasBSpecDriver(driver_code)
            {
                if (driver_code.isInstanceOf(String))
                    driver_code = main::gtengine::MSpecDBold::getDriverCode(driver_code);

                for (var i = 0; i < self.pool.size; i++)
                {
                    var dp = self.pool[i];
                    if (dp.getDriverCode() == driver_code)
                        return true;
                }
                
                return false;
            }

            method setOnline(residence_id, value, grim_driver_id)
            {
                if (!check_id(residence_id))
                    return false;
                else
                {
                    self.properties[residence_id].online = value ? 1 : 0;
                    self.properties[residence_id].grim_driver_id = grim_driver_id;
                    return true;
                }
            }

            method setForceOffline()
            {
                for (var i = 0; i < 6; i++)
                {
                    self.properties[i].online = 0;
                    self.properties[i].grim_driver_id = 0;
                }
            }
        }
    }
}