

//---------------------------------------------------------------------------------------
// GameBbs.ad
//
// Creates the save profile entity
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module GameBbs
{
    #define BBS_TABLE_VERSION 2

    function clearInitializer()
    {
        undef CreateStructure;
        undef Initialize;
        undef clearInitializer;
    }

    function CreateStructure()
    {
        var st = STStructure("Impl");
        GameBbs.defineModule(st);
        
        DefineMethod();

        return st;
    }

    function InitializeDB(instance)
    {
        var sqlite = GlobalStatus::getSqlite();
        DBUtil::initializeTableCommon(sqlite, "t_bbs", BBS_TABLE_VERSION);
    
        var sql_list = [
            "CREATE TABLE IF NOT EXISTS t_bbs (comment_id INTEGER NOT NULL PRIMARY KEY, board_id INTEGER NOT NULL, user_id TEXT NOT NULL, comment TEXT NOT NULL, date INTEGER NOT NULL, sample INTEGER NOT NULL)",
            "DROP INDEX IF EXISTS t_bbs_idx",
            "CREATE INDEX t_bbs_idx ON t_bbs (board_id)",
        ];

        foreach (var sql in sql_list)
        {
            var res = sqlite.execute0(sql);
            DB_ASSERT(res == SQLITE_OK, res);
        }
    }

    function DefineMethod()
    {
        module Impl
        {
            method removeAll()
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "DELETE FROM t_bbs";
                var params = [];

                var res = sqlite.execute(sql, params);
                if (isFailed(res))
                    return false;
                return true;
            }

            method addImpl(bbs_comment_list, sample)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "INSERT INTO t_bbs (comment_id, board_id, user_id, comment, date, sample) VALUES (?, ?, ?, ?, ?, ?)";
                var sql_list = [];

                foreach (var bbs_comment in bbs_comment_list)
                {
                    var params = [
                        bbs_comment["comment_id"],
                        bbs_comment["board_id"],
                        bbs_comment["user_id"],
                        bbs_comment["comment"],
                        bbs_comment["create_time"].getBySecond(),
                        sample
                    ];

                    sql_list.push([sql, params]);
                }

                var res = sqlite.executeTransaction(sql_list);
                if (isFailed(res))
                {
                    var error = sqlite.getLastError();
                    return false;
                }

                return true;
            }

            method add(bbs_comment_list)
            {
                var sample = 0;
                return addImpl(bbs_comment_list, sample);
            }

            method addSample(bbs_comment_list)
            {
                var sample = 1;
                return addImpl(bbs_comment_list, sample);
            }

            method getList(board_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "SELECT * FROM t_bbs WHERE board_id = ? ORDER BY date DESC LIMIT 50";
                var params = [board_id];
                var res = sqlite.executeQuery(sql, params);
                return res;
            }

            method getMaxCommentId(board_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "SELECT MAX (comment_id) FROM t_bbs WHERE board_id = ? AND sample = 0";
                var params = [board_id];
                var res = sqlite.executeQuery(sql, params);
                var max = getResult1(res);
                return max == nil ? 0 : max;
            }

            method remove(comment_id)
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "DELETE FROM t_bbs WHERE comment_id = ?";
                var params = [comment_id];
                var res = sqlite.execute(sql, params);
                if (isFailed(res))
                    return false;
                return true;
            }

            method removeSample()
            {
                var sqlite = GlobalStatus::getSqlite();
                var sql = "DELETE FROM t_bbs WHERE comment_id > 100000";
                var res = sqlite.execute(sql, []);
                if (isFailed(res))
                    return false;
                return true;
            }

            method isFailed(res)
            {
                return res != SQLITE_DONE;
            }

            method getResult1(res)
            {
                if (res.size == 0)
                    return nil;

                var row = res[0];
                if (row.size == 0)
                    return nil;

                return res[0][0];
            }
        }
    }
}