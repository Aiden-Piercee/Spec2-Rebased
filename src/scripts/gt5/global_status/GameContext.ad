

//---------------------------------------------------------------------------------------
// GameContext.ad
//
// Creates the save profile entity
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module GameContext
{
    static sMenuColorList = [
        [0x00, 0x1B, 0x36],
        [0x45, 0x0C, 0x1D],
        [0x00, 0x36, 0x24],
        [0x34, 0x2A, 0x64],
        [0x87, 0x17, 0x2C],
        [0x15, 0x76, 0x5C],
        [0x17, 0x52, 0x82],
        [0x76, 0x15, 0x5B],
        [0x76, 0x32, 0x15],
        [0x1F, 0x1F, 0x1F],
        [0x3D, 0x3D, 0x3D],
        [0xB5, 0xB5, 0xB5],
        [0x82, 0x7E, 0x7E],
        [0x4F, 0x4F, 0x4A],
        [0x1C, 0x30, 0x5D],
        [0x2F, 0x5F, 0x77],
        [0x07, 0x49, 0x11],
        [0x57, 0x8E, 0x02],
        [0x84, 0x70, 0x1A],
        [0x6B, 0x43, 0x13],
        [0x7C, 0x42, 0x65],
        [0x46, 0x28, 0x7F],
        [0x3F, 0x2F, 0x14],
        [0x05, 0x05, 0x05],
    ];

    function clearInitializer()
    {
        undef CreateStructure;
        undef Initialize;
        undef DefineMethod;
        undef clearInitializer;
    }

    function CreateStructure()
    {
        var st = STStructure("Impl");
        GameContext.defineModule(st);

        {
            st.define("_car", STObject(gtengine::MCarParameter));
            st.define("course", STString(32));
            st.define("game_mode", STByte());
            st.define("_arcade_car", STArray(STObject(gtengine::MCarParameter), 2));
            st.define("arcade_course", STString(32));
            st.define("arcade_onemake_race", STByte());
            st.define("arcade_game_mode", STByte());
            st.define("arcade_consumption", STByte());
            st.define("arcade_difficulty", STByte());
            st.define("arcade_low_mu_type", STByte());
            st.define("arcade_behavior_damage_type", STByte());
            st.define("saved_driving_option", STArray(SavedDrivingOption::CreateStructure(), 2));
            st.define("need_save", STByte());
            st.define("special_save", STByte());
            st.define("latest_news_id", STInt());
            st.define("latest_tv_id", STInt());
            st.define("museum_index", STInt());
            st.define("top_scene_index", STInt());
            st.define("pit_scene_index", STInt());
            st.define("latest_dealer_news_id", STArray(STInt(), main::gtengine::MSpecDB::getTunerSize()));
            st.define("dealer_news_index", STArray(STInt(), main::gtengine::MSpecDB::getTunerSize()));
            st.define("leavedemo_course_index", STInt());
            st.define("leavedemo_race_index", STInt());
            st.define("leavedemo_race_tarmac_index", STInt());
            st.define("leavedemo_race_dirt_index", STInt());

            st.define("online_news_index", STInt());
            st.define("prev_online_event_id", STInt());
            st.define("skip_online_top_menu", STByte());

            st.define("preserved_car_parameter", STObject(gtengine::MCarParameter));

            st.define("preserved_driver_parameter", STObject(gtengine::MCarDriverParameter));

            st.define("shopping_cart", STArray(STInt(), 16));

            st.define("latest_boot_eula_version", STInt());
            st.define("latest_pace_eula_version", STInt());

            st.define("detect_asset_download", STByte());

            st.define("race_edit_file", STString(256));

            st.define("eula_currver", STInt());
            st.define("bandwidth_probing_done", STByte());
            
            st.define("license_id", STShort());

            st.define("theme_color", STArray(STInt(), 3));

            st.define("gttv_id", STInt());

            st.define("myhome_color_id", STInt());
            st.define("myhome_wallpaper_id", STInt());
            st.define("myhome_setting_level", STInt());
            st.define("avatar_photo_id", STInt());
            st.define("avatar_body_id", STInt());

            st.define("used_car_visit_day", STInt());
            st.define("used_car_buy_list", STArray(STInt(), 30));
            st.define("used_car_new_list", STArray(STInt(), 30));
            st.define("online_used_car_version", STInt());
            st.define("online_used_car_buy_list", STArray(STInt(), 30));
            st.define("online_used_car_new_list", STArray(STInt(), 30));
            st.define("last_login", STULong());
            st.define("last_birthday_year", STInt());
            st.define("last_datetime_send_car", STULong());
            st.define("last_museum_getnum", STInt());
            st.define("exp_factor", STFloat());

            st.define("playing_event_id", STInt());
            st.define("playing_gp", STObject(gtengine::MGameParameter));
            st.define("playing_point_list", STArray(STArray(STShort(), 16), 32));

            st.define("special_event_type", STInt());
            st.define("special_event_id", STInt());
        }

        var st_online_bspec = STStructure();
        st_online_bspec.define("course_label", STString(32));
        st_online_bspec.define("laps", STInt());
        st_online_bspec.define("car_id_list", STArray(STULong(), 16));
        st_online_bspec.define("driver_id_list", STArray(STULong(), 16));
        st_online_bspec.define("user_list", STArray(STString(32), 16));
        st_online_bspec.define("lock_minutes", STInt());
        st_online_bspec.define("plan_id", STULong());
        st_online_bspec.define("start_time",STULong());
        st_online_bspec.define("user_number_list", STArray(STULong(), 16));
        st_online_bspec.define("driver_level_list", STArray(STULong(), 16));
        st_online_bspec.define("driver_list", STArray(STString(64), 16));
        st.define("online_bspec", st_online_bspec);

        st.define("trophy_state_list", STArray(STByte(), 64));

        var st_auto_message = STStructure();
        st_auto_message.define("entry", STString(100));
        st_auto_message.define("win", STString(100));
        st_auto_message.define("exit", STString(100));
        st.define("auto_message", st_auto_message);

        st.define("chat_restricted_eula", STByte());
        st.define("gtacademy_present2011uk", STByte());
        st.define("special_event2011uk", STByte());

        st.define("last_saved_project", STString(32));

        st.define("hotcar_dealer_new_date", STULong());
        st.define("seasonal_event_new_date", STULong());

        st.define("academy_folder_id", STInt());
        st.define("academy_event_id_list", STArray(STInt(), 15));
        st.define("academy_event_id_list_size", STShort());
        st.define("academy_round_number", STShort());
        st.define("academy_end_date_sec", STLong());
        st.define("academy_trophy_country_flag_list", STArray(STByte(), 60));

        st.define("academy_trophy_ranking_order_by", STByte());

        st.define("academy_round_id", STInt());
        st.define("academy_event_id", STInt());

        st.define("academy_deadline_sec", STLong());
        st.define("academy_opening_id", STByte());

        st.define("corvette_c7_proto_bm", STByte());

        DefineMethod();

        return st;
    }

    function Initialize(instance)
    {
        instance._car = main::gtengine::MCarParameter();
        instance.course = "suzuka";

        for (var i = 0; i < 2; i++)
            instance._arcade_car[i] = main::gtengine::MCarParameter();
        
        instance.arcade_course = "";
        instance.arcade_game_mode = -1;
        instance.arcade_consumption = false;
        instance.arcade_onemake_race = false;
        instance.arcade_difficulty = 0;
        instance.arcade_low_mu_type = gtengine::LowMuType::MODERATE;
        instance.arcade_behavior_damage_type = gtengine::BehaviorDamageType::WEAK;

        for (var i = 0; i < 2; i++)
            SavedDrivingOption::Initialize(instance.saved_driving_option[i]);

        instance.need_save = SaveDataUtilGT5::STATUSCODE::NO_NEED;
        instance.special_save = false;
        instance.latest_news_id = 0;
        instance.latest_tv_id = 0;
        instance.museum_index = -1;
        instance.top_scene_index = 0;
        instance.pit_scene_index = 0;

        var size = main::gtengine::MSpecDB::getTunerSize();
        for (var i = 0; i < size; ++i)
        {
            instance.latest_dealer_news_id[i] = 0;
            instance.dealer_news_index[i] = 0;
        }

        instance.leavedemo_course_index = 0;
        instance.leavedemo_race_index = 0;
        instance.leavedemo_race_tarmac_index = 0;
        instance.leavedemo_race_dirt_index = 0;
        instance.online_news_index = 0;
        instance.prev_online_event_id = 0;
        instance.skip_online_top_menu = false;
        instance.preserved_car_parameter = gtengine::MCarParameter();
        instance.preserved_driver_parameter = gtengine::MCarDriverParameter();

        for (var i = 0; i < instance.shopping_cart.size; i++)
            instance.shopping_cart[i] = 0;
        
        instance.latest_boot_eula_version = 0;
        instance.latest_pace_eula_version = 0;
        instance.detect_asset_download = false;
        instance.race_edit_file = "none";
        instance.eula_currver = 0;
        instance.bandwidth_probing_done = 0;
        instance.license_id = -1;
        instance.theme_color[0] = 0x77;
        instance.theme_color[1] = 0x24;
        instance.theme_color[2] = 0x51;
        instance.gttv_id = -1;
        instance.myhome_color_id = 0;
        instance.myhome_wallpaper_id = 0;
        instance.myhome_setting_level = 0;
        instance.avatar_photo_id = 0;
        instance.avatar_body_id = 0;
        instance.used_car_visit_day = 0;

        for (var i = 0; i < instance.used_car_buy_list.size; i++)
            instance.used_car_buy_list[i] = 0;
           
        for (var i = 0; i < instance.used_car_new_list.size; i++)
            instance.used_car_new_list[i] = 0;

        var online_used_car_version = 0;

        for (var i = 0; i < instance.online_used_car_buy_list.size; i++)
            instance.online_used_car_buy_list[i] = 0;

        for (var i = 0; i < instance.online_used_car_new_list.size; i++)
            instance.online_used_car_new_list[i] = 0;

        instance.last_login = 0;
        instance.last_birthday_year = 0;
        instance.last_datetime_send_car = 0;

        var last_museum_getnum = 0;
        var exp_factor = 1.0;

        instance.playing_event_id = 0;
        instance.playing_gp = nil;

        for (var i = 0; i < instance.playing_point_list.size; ++i)
        {
            for (var j = 0; j < instance.playing_point_list[i].size; ++j)
            {
                instance.playing_point_list[i][j] = -1;
            }
        }

        instance.special_event_type = -1;
        instance.special_event_id = -1;
        instance.online_bspec.course_label = "";
        instance.online_bspec.laps = 0;
        instance.online_bspec.lock_minutes = 0;
        instance.online_bspec.plan_id = 0;
        instance.online_bspec.start_time = 0;

        for (var i = 0; i < 16; ++i)
        {
            instance.online_bspec.car_id_list[i] = 0;
            instance.online_bspec.driver_id_list[i] = 0;
            instance.online_bspec.user_list[i] = "";
            instance.online_bspec.user_number_list[i] = 0;
            instance.online_bspec.driver_level_list[i] = 0;
            instance.online_bspec.driver_list[i] = "";
        }

        for (var i = 0; i < instance.trophy_state_list.size; ++i)
            instance.trophy_state_list[i] = 0;

        instance.auto_message.entry = main::manager.translateAtCursorProject("AutoMessage", "ENTRY");
        instance.auto_message.win = main::manager.translateAtCursorProject("AutoMessage", "WIN");
        instance.auto_message.exit = main::manager.translateAtCursorProject("AutoMessage", "EXIT");
        instance.chat_restricted_eula = false;
        instance.gtacademy_present2011uk = false;
        instance.special_event2011uk = false;
        instance.last_saved_project = "";
        instance.hotcar_dealer_new_date = 0;
        instance.seasonal_event_new_date = 0;
        instance.academy_folder_id = 0;

        for (var i = 0; i < instance.academy_event_id_list.size; ++i)
            instance.academy_event_id_list[i] = 0;

        instance.academy_event_id_list_size = 0;
        instance.academy_round_number = 0;
        instance.academy_end_date_sec = 0;
        instance.academy_trophy_ranking_order_by = 0;

        for (var i = 0; i < instance.academy_trophy_country_flag_list.size; ++i)
            instance.academy_trophy_country_flag_list[i] = 1;

        instance.academy_round_id = 0;
        instance.academy_event_id = 0;

        var datetime = pdistd::MTime("2012/12/31 15:00:00");
        instance.academy_deadline_sec = datetime.getBySecond();
        instance.academy_opening_id = 0;
        instance.corvette_c7_proto_bm = 0;
    }

    function DefineMethod()
    {
        module Impl
        {
            import __toplevel__::main;

            method setCar(cp)
            {
                self._car.deepCopy(cp);
            }

            method getCar()
            {
                return self._car;
            }

            method setArcadeCar(cp, player_no)
            {
                if (player_no == nil)
                    player_no = 0;

                self._arcade_car[player_no].deepCopy(cp);
                if (cp.rentacar && cp.getCarCode() != gtengine::MSpecDB::NO_CODE64)
                    self._arcade_car[player_no].ownArcadePartsAll();
            }

            method getArcadeCar(player_no)
            {
                if (player_no == nil)
                    player_no = 0;
                
                return self._arcade_car[player_no];
            }

            method startChampionShip(event_id, gp)
            {
                self.playing_event_id = event_id;
                self.playing_gp = gp;

                for (var i = 0; i < self.playing_point_list.size; ++i)
                {
                    for (var j = 0; j < self.playing_point_list[i].size; ++j)
                        self.playing_point_list[i][j] = 0;
                }
            }

            method endChampionShip()
            {
                self.playing_event_id = -1;
                self.playing_gp = nil;

                for (var i = 0; i < self.playing_point_list.size; ++i)
                {
                    for (var j = 0; j < self.playing_point_list[i].size; ++j)
                        self.playing_point_list[i][j] = -1;
                }
            }

            method clearOnlineBSpec()
            {
                self.online_bspec.course_label = "";
                self.online_bspec.laps = 0;
                self.online_bspec.lock_minutes = 0;
                self.online_bspec.plan_id = 0;
                self.online_bspec.start_time = 0;
        
                for (var i = 0; i < 16; ++i)
                {
                    self.online_bspec.car_id_list[i] = 0;
                    self.online_bspec.driver_id_list[i] = 0;
                    self.online_bspec.user_list[i] = "";
                    self.online_bspec.user_number_list[i] = 0;
                    self.online_bspec.driver_level_list[i] = 0;
                    self.online_bspec.driver_list[i] = "";
                }
            }

            method getMenuColor(index)
            {
                if (index < sMenuColorList.size)
                    return sMenuColorList[index];

                return sMenuColorList[0];
            }

            method getMenuColorList()
            {
                return sMenuColorList;
            }

            method apply()
            {

            }
        }
    }
}
