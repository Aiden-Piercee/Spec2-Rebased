













module SpecialEventUtil
{
    module EVENT_TYPE
    {
        static GT_KART_CMP = 1;
        static GRAND_TOUR = 2;
        static AMG_DS = 3;
        static STIG_CHG = 4;
        static JEFF_G_DS = 5;
        static LOEB_RC = 6;
        static GT_RALLY = 7;
        static X1_CHG = 8;
    }

    module CATEGORY
    {
        static BEGINNER = 0;
        static INTERMEDIATE = 1;
        static PROFESSIONAL = 2;
        static S_PROFESSIONAL = 3;
    }

    static localize_key_basename_table = 
    [
        nil,
        "kart",
        "tour",
        "amg",
        "stig_C",
        "gordon",
        "loeb",
        "rally",
        "vettel",
    ];

    static basename_table = 
    [
        nil,
        "kart",
        "tour",
        "amg",
        "stig",
        "gordon",
        "loeb",
        "rally",
        "vettel",
    ];

    function GetEventTitle(context, root, event_id)
    {
        var event_type = event_id / 1000;
        var basename = localize_key_basename_table[event_type];

        return context.translate(root, "SpecialEventInfoGT5", "EVENT_NAME_A_%s".format(basename));
    }

    function GetEventTitleJ(context, root, event_id)
    {
        var event_type = event_id / 1000;
        var basename = localize_key_basename_table[event_type];

        return context.translate(root, "SpecialEventInfoGT5", "EVENT_NAME_J_%s".format(basename));
    }

    function GetEventSubtitle(context, root, event_id)
    {
        return __translate_common(context, root, event_id, "t");
    }

    function GetEventDescription(context, root, event_id)
    {
        return __translate_common(context, root, event_id, "d"); 
    }

    function GetEventCode(event_type)
    {
        if (event_type >= 0 && event_type < basename_table.size)
            return basename_table[event_type];

        return nil;
    }

    function GetEventType(event_id)
    {
        return event_id / 1000;
    }

    function __translate_common(context, root, event_id, suffix)
    {
        var event_type = event_id / 1000;
        if (event_type >= 0 && event_type < localize_key_basename_table.size)
        {
            var game_id = event_id % 1000;
            var basename = localize_key_basename_table[event_type];
            return context.translate(root, "SpecialEventInfoGT5", "%s%03d%s".format(basename, game_id, suffix));
        }

        return "";
    }

    function clearInitializer()
    {
        undef loadXml;
        undef initializeGameRecord;
        undef clearInitializer;
    }

    function loadXml()
    {
        var file_path = "/textdata/gt5/special_event/special_event_data.xml";
        var event_list = Array();
        var fst = main::pdistd::ReadFile(file_path);
        var buf = fst["buffer"];
        var xml = main::pdistd::MXml();
        var dom = xml.result;
        var xml_nodes = dom["SpecialEventData"];
        var xml_node = xml_nodes[0];
        var game_nodes = xml_node["event"];

        for (var i = 0; i < game_nodes.size; i++)
        {
            var game_node = game_nodes[i];
            var event_id = game_node.getAttribute("event_id");
            var event_type = game_node.getAttribute("eventtype").toInt();
            var category = game_node.getAttribute("category").toInt();
            var index = game_node.getAttribute("index").toInt();
            var game_id = game_node.getAttribute("game_id").toInt();
            event_list.push([event_id, event_type, category, index, game_id]);
        }

        return event_list;
    }

    function initializeGameRecord()
    {
        var special_event = main::GLOBAL_STATUS.user_profile.record.special_event;
        if (special_event.isInitialized())
            return;

        special_event.initialize();
    }

}