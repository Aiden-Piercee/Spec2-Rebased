

//---------------------------------------------------------------------------------------
// bootstrap.ad
//
// First adhoc main boot sequence.
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

static module main
{
    static MINIMUM_HDD_SPACE = 10 * 1024 * 1024;
    static REPLAY_MINIMUM_HDD_SPACE = 32 * 1024 * 1024;

    static PROJECT_ROOT_DIR;
    static MGOM;
    static PDINetwork;
    static NP;
    static Recorder;
    static Transcoder;
    static FaceDetector;
    static Inflator;
    static ContextMain;
    static Context1P;
    static Context2P;
    static manager;
    static sound;
    static dialog_project;
    static cursor_project;
    static ui_kit_project;
    static setting_project;
    static race_project;
    static TVID_opening;
    static TVID_ending;
    static PLAY_STAGE_at_top;
    static Httpc;
    static Grim;
    static Pace;
    static AVChat;
    static Lobby;
    static Clan;
    static NUS;
    static OnlineUtility;
    static OnlineSession;
    static NpEula;
    static Grim2;
    static News2;
    static Tv2;
    static Museum2;
    static EventRace2;
    static Bbs2;
    static Matching2;
    static PrivateRoom2;
    static RaceUmpire2;
    static Ranking2;
    static Replay2;
    static UserProfile2;
    static ItemBox;
    static ActionLog;
    static GTMail;
    static Photo;
    static Course;
    static Race;
    static OnlineBSpec;
    static GAME_STATUS;
    static GLOBAL_STATUS;
    static ORG;
    static RaceOperator;
    static SaveUtil;
    static SQLITE;
    
    main::after_boot_project = "arcade";

    module main::menu
    {
        class EventLoop
        {
            attribute context;
            attribute level = -1;

            method __init__(context)
            {
                self.context = context;
            }

            method enter()
            {
                if (level == -1)
                    context.enterEventLoop(&level);
            }

            method leave()
            {
                if (level >= 0)
                {
                    context.leaveEventLoop(level);
                    level = -1;
                }
            }
        }
    }

    module region_hash
    {
        static jp = "1";
        static uk = "2";
        static us = "3";
        static tw = "4";
    }

    function GetDisplayVersionString(filesystem_version)
    {
        var text = "";
        if (filesystem_version != nil)
        {
            text += "0.";
            text += (filesystem_version / 59).toString();
        }
        else
        {
            text += main::pdiext::MProductInformation::GetPDIVersion() + ".";
            text += (main::pdistd::GetFileSystemVersion() / 59).toString();
        }

        var region = main::pdiext::MProductInformation::GetVersionRegion();
        var n = region_hash[region];
        if (n == nil)
            n = "0";

        return text + n;
    }

    function GetVersionBranch()
    {
        var branch = main::pdiext::MProductInformation::GetVersionBranch();
        if (main::AppOpt["branch"] != nil)
            branch = main::AppOpt["branch"];

        return branch;
    }

    static is_environment_local = -1;

    function isEnvironmentLocal()
    {
        if (is_environment_local != -1)
            return is_environment_local;
        else if ( (main::AppOpt.defined("fsroot") && main::AppOpt["fsroot"].find("mtarget") >= 0) || 
            main::pdiext::MProductInformation::GetVersionEnvironment().beginsWith("local"))
        {
            is_environment_local = true;
            return true;
        }
        else
        {
            is_environment_local = false;
            return false;
        }
    }
}

function initModules()
{
    module main::pdistd
    {
        require "pdistd";
    }

    module main::pdiext
    {
        require "pdiext";
    }

    module main::menu
    {
        require "menu";
        require "gtmenu";

        menu::ScreenWidth = 1920;
        menu::ScreenHeight = 1080;
    }

    module main::gtengine
    {
        require "gtengine";
    }

    module main::pdiapp
    {
        require "pdiapp";
    }
}

module main::AppOpt
{

}

function initArgs()
{
    var args = pdistd::GetArgs();
    args.shift();

    foreach (var arg in args)
    {
        var pair = arg.split("=");
        if (pair.size >= 2)
            AppOpt.defineStatic(pair[0], pair[1]);
        else
            AppOpt.defineStatic(pair[0], true);
    }

    if (!pdiext::MProductInformation::GetUseNPTrophyFlag() && GetVersionBranch() == "gt5")
    {
        AppOpt.defineStatic("tgs", true);
        AppOpt.defineStatic("disable_loaddata", true);
    }
}

function initStatic()
{
    main::TVID_opening = 14;
    main::TVID_ending = 15;
    main::PLAY_STAGE_at_top = true;
}

function initSpecDB()
{
    var specdb = AppOpt["specdb"];
    gtengine::MSpecDB::initialize(specdb);
    gtengine::MSpecDB::loadMenuInfo();
}

function initMenuSystem()
{
    var product_dir;
    switch (main::GetVersionBranch())
    {
        case "menudev":
        case "runviewer":
        case "runviewer-car":
        case "runviewer-crs":
        case "behavior":
        case "behavior-sa":
            main::PROJECT_ROOT_DIR = "/projects/dev2";
            product_dir = "dev2";
            break;

        default:
            main::PROJECT_ROOT_DIR = "/projects/gt5";
            product_dir = "gt5";
            break;
    }

    static module main
    {
        require "/products/%{product_dir}/script/MenuClassDefine";
    }

    main::sound = pdistd::MSound();
    main::MGOM = main::menu::MMenuGameObjectManager();

    main::MGOM.setProjectRoot(main::PROJECT_ROOT_DIR);
}

function initNetwork()
{
    main::Httpc = main::pdiext::MHttpc();
    main::Httpc.initialize();
    main::PDINetwork = main::pdistd::MPDINetwork();
    main::NP = PDINetwork.getNP();

    var communication_id = main::pdiext::MProductInformation::GetNPCommunicationID();
    main::PDINetwork.setNPCommunicationID(communication_id);

    var passphrase = main::pdistd::MDynRes::importBlob(communication_id + "_NP_PASSPHRASE", "NP_PASSPHRASE_SIZE");
    if (passphrase != nil)
        main::PDINetwork.setNPCommunicationPassphrase(passphrase);

    var signature = main::pdistd::MDynRes::importBlob(communication_id + "_NP_SIGNATURE", "NP_SIGNATURE_SIZE");
    if (signature != nil)
        main::PDINetwork.setNPCommunicationSignature(signature);

    var title_id = main::pdiext::MProductInformation::GetNPTitleID();
    main::PDINetwork.setNPTitleID(title_id);

    var service_id = main::pdiext::MProductInformation::GetServiceID();
    if (pdiext::isQABuild())
    {
        var path = "/APP_USB/ServiceID.txt";
        if (pdistd::Exist(path))
        {
            var st = pdistd::ReadFile(path);
            var buf = st["buffer"].toString();
            service_id = buf.chop();
        }
    }

    main::PDINetwork.setServiceID(service_id);

    main::Grim2 = main::pdiext::MGrim2();
    main::News2 = main::pdiext::MNews2();
    main::Museum2 = main::pdiext::MMuseum2();
    main::Tv2 = main::pdiext::MTv2();
    main::Bbs2 = main::pdiext::MBbs2();
    main::EventRace2 = main::pdiext::MEventRace2();
    main::Ranking2 = main::pdiext::MRanking2();
    main::Replay2 = main::pdiext::MReplay2();
    main::UserProfile2 = main::pdiext::MUserProfile2();
    main::PrivateRoom2 = main::pdiext::MPrivateRoom2();
    main::RaceUmpire2 = main::pdiext::MRaceUmpire2();
    main::ItemBox = main::pdiext::MItemBox();
    main::ActionLog = main::pdiext::MActionLog();
    main::GTMail = main::pdiext::MGTMail();
    main::Photo = main::pdiext::MPhoto();
    main::Course = main::pdiext::MCourse();
    main::Race = main::pdiext::MRace();
    main::OnlineBSpec = main::pdiext::MOnlineBSpec();
    main::Matching2 = main::pdiext::MMatching2();

    main::Pace = main::pdiext::MPace();
    main::Pace.initialize();
    
    main::AVChat = main::pdistd::MAVChat();
    main::Lobby = main::gtengine::MLobby();
    main::Clan = main::gtengine::MClan();
    main::OnlineUtility = main::gtengine::MOnlineUtility();
    main::NpEula = main::pdistd::MNpEula();
}

function initOthers()
{
    main::Recorder = pdistd::MRecorder();
    main::Inflator = pdistd::MInflator();
    main::FaceDetector = pdiext::MFaceDetector();
    main::Transcoder = pdistd::MSailTranscoder();
    main::SaveUtil = pdiext::MSaveDataUtil();
    main::SQLITE = pdistd::MSqlite();
}

function execBoot()
{
    initModules();

    pdistd::SetFileSystemOptionInt64("/", "PreCopyHddFreeSizeLimit", 32 * 1024 * 1024);
    initArgs();
    initStatic();
    initSpecDB();
    initMenuSystem();
    initNetwork();
    initOthers();
}