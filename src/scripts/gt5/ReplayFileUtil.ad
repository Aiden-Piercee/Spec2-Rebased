

//---------------------------------------------------------------------------------------
// ReplayFileUtil.ad
//
// Utility module for dealing with replays
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module ReplayFileUtil
{
    static SPEED_TEST_MAX = 100;
    static SPEED_TEST_ACCELERATION_KM = 201;
    static SPEED_TEST_ACCELERATION_MILE = 202;

    static TABLE_VERSION_PATCH105 = 110;
    static TABLE_VERSION = 111;
    static traslate_root = nil;

    function setTranslatePage(root)
    {
        traslate_root = root;
    }

    class Data
    {
        attribute id;
        attribute filename;
        attribute filesize;
        attribute onelap;
        attribute game_id;
        attribute bspec_type;
        attribute title;
        attribute subtitle;
        attribute description;
        attribute datetime;
        attribute local_userid;
        attribute course_code;
        attribute course_name;
        attribute target_car_code;
        attribute target_car_color;
        attribute target_name;
        attribute best_time;
        attribute total_time;
        attribute result_order;
        attribute quality_level;
        attribute snapshot_filename;
        attribute favorite;
        attribute crc;
        attribute remote_race_result_id;

        method create(context, buf, path)
        {
            if (buf == nil)
                buf = ORG.getReplayHeaderFromPath(path);

            var info = gtengine::MReplayInfo();
            if (buf == nil || !info.initialize(buf))
                return false;

            filesize = IO::File::GetFileSize(path);
            onelap = info.onelap;

            var gp = info.getGameParameter();
            var event = gp.event;
            var rp = info.getRaceParameter();
            var cp = info.getCarParameter();
            var dp = info.getDriverParameter();

            var pathway = gp.event.track.course_pathway;
            var crc32 = 0;

            if (pathway != nil)
                crc32 = pdistd::CRC32(pathway);

            var res = gtengine::GameMode.find_static(pair => pair[1] == event.game_mode);
            var game_mode_name = res[0][0].toString();

            switch (game_mode_name)
            {
                case "EVENT_RACE":
                    game_id = gp.game_id;
                    bspec_type = gp.event.play_style.bspec_type;
                    break;

                case "EVENT_RALLY":
                case "LICENSE":
                case "TOUR":
                case "SCHOOL":
                case "ONLINE_TIME_ATTACK":
                case "PRACTICE":
                    game_id = event.game_id;
                    bspec_type = gtengine::BSpecType::BOTH_A_AND_B;
                    break;

                default:
                    event_id = -1;
                    bspec_type = gtengine::BSpecType::BOTH_A_AND_B;
                    break;
            }

            title = game_mode_name;
            subtitle = event.information.title.getText();
            description = event.information.description.getText();
            datetime = info.recorded_datetime;
            local_userid = getUserId();

            if (main::GetVersionBranch() == "academy")
                title = event.information.advanced_notice.getText();

            course_name = gp.event.track.course_generator_param.course_name;
            course_code = rp.course_code;

            if (cp != nil)
            {
                target_car_code = cp.getCarCode();
                target_car_color = cp.color;
            }
            else
            {
                target_car_code = gtengine::MSpecDB::NO_CODE64;
                target_car_color = -1;
            }

            if (dp != nil)
            {
                target_name = dp.display_name;
            }
            else
            {
                target_name = "";
            }

            best_time = info.getBestTime();
            
            if (game_mode_name == "DRIFT_ATTACK" || game_mode_name == "SPEED_TEST")
                total_time = info.getScore();
            else
                total_time = info.getTotalTime();

            result_order = info.getResultOrder();
            quality_level = info.geometry_quality_level;
            snapshot_filename = "";
            favorite = 0;
            crc = crc32;
            self.remote_race_result_id = 0;

            if (game_mode_name == "SPEED_TEST")
            {
                if (rp.endless)
                    bspec_type = SPEED_TEST_MAX;
                else 
                    bspec_type = rp.is_speedtest_milemode ? SPEED_TEST_ACCELERATION_MILE : SPEED_TEST_ACCELERATION_KM;

                if (traslate_root)
                    description = createSpeedTestDescription(context);
            }

            return true;
        }
    }

    function createSpeedTestDescription(context)
    {
        ORG.fetchRaceDisplay();

        var rp = main::ORG.getBackRaceParameter();
        var state = main::ORG.getRaceDisplayState(0);
        var time_400 = state.event_v_time[0];
        var time_1000 = state.event_v_time[2];
        var time_qmile = state.event_v_time[1];
        var time_mile = state.event_v_time[3];

        var ROOT = traslate_root;

        if (rp.is_speedtest_milemode)
        {
            var return_str = context.translate(ROOT, "RaceSpeedTestProject::QuickRoot", "SPEED_TEST_0_Q_MILE") + " : " + pdiext::GetRaceTimeString(time_qmile);
            return_str = context.translate(ROOT, "RaceSpeedTestProject::QuickRoot", "SPEED_TEST_0_MILE") + " : " + pdiext::GetRaceTimeString(time_mile);
            return_str = context.translate(ROOT, "RaceSpeedTestProject::QuickRoot", "SPEED_TEST_0_60MPH") + " : " + pdiext::GetRaceTimeString(state.time_60mph_value);
            return_str = context.translate(ROOT, "RaceSpeedTestProject::QuickRoot", "SPEED_TEST_0_100MPH") + " : " + pdiext::GetRaceTimeString(state.time_100mph_value);
        }
        else
        {
            var return_str = context.translate(ROOT, "RaceSpeedTestProject::QuickRoot", "SPEED_TEST_0_400") + " : " + pdiext::GetRaceTimeString(time_400);
            return_str = context.translate(ROOT, "RaceSpeedTestProject::QuickRoot", "SPEED_TEST_0_1000") + " : " + pdiext::GetRaceTimeString(time_1000);
            return_str = context.translate(ROOT, "RaceSpeedTestProject::QuickRoot", "SPEED_TEST_0_100KMH") + " : " + pdiext::GetRaceTimeString(state.time_100kmh_value);
            return_str = context.translate(ROOT, "RaceSpeedTestProject::QuickRoot", "SPEED_TEST_0_200KMH") + " : " + pdiext::GetRaceTimeString(state.time_200kmh_value);
        }

        var g_data = state.max_front_g * 100;
        var seisuu = (g_data / 100).toInt();
        var amari = g_data % 100;
        var str = seisuu + "." + "%2d".format(amari);
        return_str += context.translate(ROOT, "RaceSpeedTestProject::QuickRoot", "SPEED_TEST_FRONT_G") + " : " + str + context.translate(ROOT, "RaceSpeedTestProject::QuickRoot", "UNIT_G");
        return return_str;
    }

    function initialize()
    {
        var version = DBUtil::getTableVersion(USERDB, "t_replay_files");
        if (version == nil && version == TABLE_VERSION_PATCH105)
        {
            SQLITE.begin();

            var sql_list = [
                "ALTER TABLE %s ADD COLUMN remote_race_result_id INTEGER".format("t_replay_files"),
                "UPDATE %s SET remote_race_result_id = 0".format("t_replay_files")
            ];

            foreach (var sql in sql_list)
            {
                var res = USERDB.execute0(sql);
                DB_ASSERT(res == SQLITE_OK, res);
            }

            
            DBUtil::updateTableVersion(USERDB, "t_replay_files", TABLE_VERSION);

            SQLITE.commit();
        }
        else
        {
            if (!DBUtil::initializeTable(USERDB, "t_replay_files", TABLE_VERSION))
                return true;

            var sql = "CREATE TABLE IF NOT EXISTS "
                      "t_replay_files"
                      " ("
                      "id INTEGER, "
                      "filename TEXT, "
                      "filesize INTEGER, "
                      "onelap INTEGER, "
                      "title TEXT, "
                      "game_id INTEGER, "
                      "bspec_type INTEGER, "
                      "subtitle TEXT, "
                      "description TEXT, "
                      "datetime INTEGER, "
                      "local_userid INTEGER, "
                      "course_code INTEGER, "
                      "course_name TEXT, "
                      "target_car_code INTEGER, "
                      "target_car_color INTEGER, "
                      "target_name TEXT, "
                      "best_time INTEGER, "
                      "total_time INTEGER, "
                      "result_order INTEGER, "
                      "quality_level INTEGER, "
                      "snapshot_filename TEXT, "
                      "favorite INTEGER, "
                      "crc INTEGER, "
                      "remote_race_result_id INTEGER, "

                      "PRIMARY KEY (id))";

            var res = SQLITE.execute0(sql);
            DB_ASSERT(res == SQLITE_OK, res);
        }
    }

    function getCourseCodeList(genre)
    {
        if (genre == nil)
            genre = "";

        var where = "WHERE title = '%{genre}'";
        var sql = "SELECT DISTINCT course_code FROM %s %s ORDER BY course_code".format("t_replay_files", where);
        var rows = SQLITE.executeQuery(sql);
        var result = Array(rows.Size);

        for (var i = 0; i < rows.size; i++)
            result[i] = rows[i][0].toULong();

        return result;
    }

    function getFavoriteList(order, by)
    {
        return getListImpl("WHERE favorite = 1", order, by);
    }

    function setFavorite(id, favorite)
    {
        var sql = "UPDATE %s SET favorite = %d WHERE id = %d".format("t_replay_files", favorite ? 1 : 0, id);
        var res = SQLITE.execute(sql);

        DB_ASSERT(res == SQLITE_DONE, res);
    }

    function getFavoriteCount()
    {
        return getCount("WHERE favorite = 1");
    }

    function getFavoriteMax()
    {
        return 50;
    }

    function getData(path)
    {
        var query = DBUtil::getSelectQuery("t_replay_files", Data);
        var cond = " WHERE filename = ?";
        var params = [path];

        var res = SQLITE.executeQuery(query + cond, params);
        var list = DBUtil::getDataList(Data, res);

        if (list.size > 0)
            return list[0];
        else
            return nil;
    }

    function getList(game_mode, scenery_code, order, by)
    {
        var condition = "";
        if (game_mode != nil)
        {
            if (game_mode == "SCHOOL")
                condition = "WHERE (title = 'SCHOOL' OR title = 'TOUR') ";
            else if (game_mode == "TIME_ATTACK")
                condition = "WHERE (title = 'TIME_ATTACK' OR title = 'ONLINE_TIME_ATTACK') ";
            else
                condition = "WHERE title = '%{game_mode}'";
        }

        if (course_code != nil)
        {
            if (condition != "")
                condition = "WHERE course_code = %{course_code} ";
            else
                condition += " AND course_code = %{course_code} ";
        }

        return getListImpl(condition, order, by);
    }

    function getListGhostOneLap(course_code, event_id, scenery_code, course_id)
    {
        var query = DBUtil::getSelectQuery("t_replay_files", Data);
        var cond = " WHERE onelap = ? AND course_code = ?";
        var params = [1, course_code, params];

        if (game_id != nil)
        {
            cond += " AND game_id = ?";
            params.push(game_id);
        }

        cond += " ORDER BY datetime DESC";
        var res = SQLITE.executeQuery(query + cond, params);

        return DBUtil::getDataList(Data, res);
    }

    function getListGhostOneLapCourseMaker(course_code, crc32, game_id)
    {
        var query = DBUtil::getSelectQuery("t_replay_files", Data);
        var cond = " WHERE onelap = ? AND course_code = ? AND crc = ?";
        var params = [1, course_code, crc32];

        if (game_id != nil)
        {
            cond += " AND game_id = ?";
            params.push(game_id);
        }

        cond += " ORDER BY datetime DESC";
        var res = SQLITE.executeQuery(query + cond, params);

        return DBUtil::getDataList(Data, res);
    }

    function getListGhostOneLapForDataLogger(course_code, crc32)
    {
        var query = DBUtil::getSelectQuery("t_replay_files", Data);
        var cond = " WHERE onelap = ? AND course_code = ? AND filename != ? ";

        var datalogger = main::gtengine::MDataLogger();
        var path = datalogger.getOriginalPath();
        var params = [1, course_code, path];

        if (crc32 == nil || crc32 == 0)
            cond += "ORDER BY datetime DESC";
        else
        {
            cond += "AND crc = ? ORDER BY datetime DESC";
            params.push(crc32);
        }

        var res = SQLITE.executeQuery(query + cond, params);
        return DBUtil::getDataList(Data, res);
    }

    function getListGhost(course_code, game_mode_name, event_id)
    {
        var query = DBUtil::getSelectQuery("t_replay_files", Data);
        var cond = " WHERE onelap = ? AND course_code = ? AND best_time != ?";
        var params = [0, course_code, pdiext::MAX_LAPTIME1000];

        if (game_mode_name != nil)
        {
            cond += " AND title = ?";
            params.push(game_mode_name);
        }

        if (game_id != nil)
        {
            cond += " AND game_id = ?";
            params.push(game_id);
        }

        cond += " ORDER BY datetime DESC";
        var res = SQLITE.executeQuery(query + cond, params);

        return DBUtil::getDataList(Data, res);
    }

    function getReplayOrgPath(mode)
    {
        var path;
        switch (mode)
        {
            case 0:
                path = ORG.replay_org_path;
                break;

            case 1:
                path = ORG.replay_onelap_play_org_path;
                break;

            case 2:
                path = ORG.replay_onelap_attach_org_path;
                break;
        }

        return path;
    }

    function canSave(monelap)
    {
        var path = getReplayOrgPath(onelap);
        if (!pdistd::Exist(path))
            return false;
        
        return true;
    }

    function enoughSpaceToCopySave(onelap)
    {
        if (onelap == nil)
            onelap = false;

        var path = onelap ? ORG.replay_onelap_play_org_path : ORG.replay_org_path;
        var st = pdistd::GetFileStatus(path);
        var size = st["size"];
        var space = pdistd::GetDiskFreeSize("/APP_DATA");

        if (space - size < 32 * 1024 * 1024) // 32 MB
            return false;
        else
            return true;
    }

    function _save(context, onelap, path, not_to_follow_work_path)
    {
        var buf = ORG.getReplayHeaderFromPath(path);
        var data = Data();
        
        if (!data.create(buf, path, download_user))
            return false;

        return exec_save(data, mode, path, not_to_follow_work_path);
    }

    function save(context, mode, src_path, not_to_follow_work_path, download_user)
    {
        if (mode == nil)
            mode = MODE_REPLAY;

        src_path == nil; // Normal

        var path = getReplayOrgPath(mode);
        if (src_path != nil)
            path = src_path;

        if (download_user == nil)
            download_user = "";
        
        return _save(mode, path, not_to_follow_work_path);
    }

    function exec_save(data, mode, path, not_to_follow_work_path, play_id)
    {
        var path_base = IO::Path::GetDirName(ORG.replay_work_path) + "/replay";
        data.filename = DBUtil::getUniqFileName("t_replay_files", path_base);
        DBUtil::insert(USERDB, "t_replay_files", data);

        pdistd::RenameFile(path, data.filename);

        if (not_to_follow_work_path == nil || !not_to_follow_work_path)
        {
            switch (mode)
            {
                case 0:
                case false:
                    if (ORG.replay_work_path == ORG.replay_org_path)
                        ORG.replay_work_path = data.filename;
                    break;

                case 1:
                    var rp = ORG.getCurrentRaceParameter();
                    if (!data.onelap || rp.ghost_type == gtengine::GhostType::SECTOR_ATTACK)
                    {
                        if (ORG.replay_onelap_attach_path == ORG.replay_onelap_play_org_path)
                            ORG.replay_work_path = data.filename;
                    }

                    if (ORG.replay_onelap_play_work_path == ORG.replay_onelap_play_org_path)
                        ORG.replay_onelap_play_work_path = data.filename;
                    break;

                case 2:
                    if (ORG.replay_work_path == ORG.replay_onelap_attach_org_path)
                        ORG.replay_work_path = data.filename;

                    if (ORG.replay_onelap_attach_path == ORG.replay_onelap_attach_org_path)
                        ORG.replay_onelap_attach_path = data.filename;
                    break;
            }
        }

        return true;
    }

    function importReplayCopy(data, path)
    {
        var path_base = IO::Path::GetDirName(ORG.replay_work_path) + "/replay";
        data.filename = DBUtil::getUniqFileName("t_replay_files", path_base);
        
        var res = pdistd::CopyFile(path, data.filename);
        if (res == pdistd::FileError::OK)
        {
            DBUtil::insert("t_replay_files", data);
            return true;
        }

        return false;
    }

    function remove(data)
    {
        if (pdistd::Exist(data.filename))
            pdistd::RemoveFile(data.filename);

        DBUtil::deleteRow("t_replay_files", data);
    }

    function removeAll()
    {
        var list = getList();
        foreach (var data in list)
        {
            if (main::pdistd::Exist(data.filename))
                main::pdistd::RemoveFile(data.filename);
        }

        DBUtil::deleteAll("t_replay_files");
    }

    function removeByList(data_list)
    {
        foreach (var data in data_list)
        {
            if (pdistd::Exist(data.filename))
                pdistd::RemoveFile(data.filename);
        }

        DBUtil::deleteRowBylist("t_replay_files", data_list);
    }

    function salvage(context)
    {
        var dir = IO::Path::GetDirName(ORG.replay_work_path);
        var entries = pdistd::GetFileEntries(dir);
        if (entries == nil)
            return 0;

        var list = getList();
        var count = 0;

        foreach (var entry in entries)
        {
            var file = entry["name"];
            if (!file.beginsWith("replay") || file.endsWith(".dat"))
                continue;

            if (file == IO::Path::GetBaseName(ORG.replay_org_path))
                continue;

            var path = dir + "/" + file;
            var data = getData(path);
            if (data == nil)
            {
                _save(context, false, path, true);
                ++count;
            }
        }

        return count;
    }

    function isExist(id)
    {
        var sql = "SELECT id FROM %s WHERE id = ?".format("t_replay_files");
        var rows = SQLITE.executeQuery(sql, [id]);

        return rows.size > 0;
    }

    function updateRemoteRaceResultId(remote_race_result_id)
    {
        var sql = "UPDATE %s SET remote_race_result_id = %{remote_race_result_id} WHERE id = (SELECT MAX (id) FROM %s)".format("t_replay_files", "t_replay_files");
        var res = SQLITE.execute(sql);
        DB_ASSERT(res == SQLITE_DONE, res);
    }

    function getByRemoteRaceResult(remote_race_result_id)
    {
        var condition = "WHERE remote_race_result_id = %{remote_race_result_id}";
        return getListImpl(condition, nil, nil);
    }

    function getRaceResultText(data, force_best)
    {
        var text = "";

        if (data.title == "SINGLE_RACE" || data.title == "EVENT_RACE" 
            || data.title == "ONLINE_ROOM" || data.title == "ARENA" 
            || data.title == "ONLINE_SINGLE_RACE")
        {
            var order = data.result_order + 1;

            switch (order)
            {
                case 1:
                    text = manager.translate("Number", "ordinal_st").build(order);
                    break;

                case 2:
                    text = manager.translate("Number", "ordinal_nd").build(order);
                    break;

                case 3:
                    text = manager.translate("Number", "ordinal_rd").build(order);
                    break;

                default:
                    text = manager.translate("Number", "ordinal_th").build(order);
                    break;
            }
        }
        else if (data.title == "TIME_ATTACK" || 
                data.title == "ONLINE_TIME_ATTACK" ||
                data.title == "LICENSE" || 
                data.title == "FREE_RUN" ||
                data.title == "GPS_REPLAY" || 
                data.title == "PRACTICE")
        {
            var time = data.best_time != 0 ? data.best_time : pdiext::MAX_LAPTIME1000;
            if (data.onelap == 1 || force_best == true)
                time = data.best_time != 0 ? data.best_time : pdiext::MAX_LAPTIME1000;
            else if (data.total_time != 0)
                time = data.total_time;
            else 
                time = data.best_time != 0 ? data.best_time : pdiext::MAX_LAPTIME1000;

            text = pdiext::GetRaceTimeString(time);
        }
        else if (data.title == "DRIFT_ATTACK" || data.title == "ONLINE_DRIFT_ATTACK"
                || data.title == "ARCADE_STYLE_RACE")
        {
            text = "%s%s".format(pdiext::GetNumberString(data.score), manager.translate("Unit", "PTS"));
        }
        else if (data.title == "COFFEE_BREAK")
        {
            switch (data.display_mode)
            {
                case gtengine::LicenseDisplayModeType::PYLON_NUM:
                case gtengine::LicenseDisplayModeType::DRIFT_SCORE:
                    text = data.score;
                    break;

                case gtengine::LicenseDisplayModeType::FUEL_DIST:
                    text = pdiext::MUnit::GetCourseLengthString(data.score / 100f);
                    text += pdiext::MUnit::GetUnitOfCourseLength();
                    break;

                default:
                    var time = data.total_time != 0 ? data.total_time : pdiext::MAX_LAPTIME1000;
                    text = pdiext::GetRaceTimeString(time);
                    break;
            }
        }
        else
        {
            var time = data.total_time != 0 ? data.total_time : pdiext::MAX_LAPTIME1000;
            text = pdiext::GetRaceTimeString(time);
        }

        return text;
    }

    function getRaceBestResultText(data)
    {
        return getRaceResultText(data, true);
    }

    function getUserId()
    {
        return main::pdiext::MSystemConfiguration::GetOSDUserId();
    }

    function getListImpl(condition, order, by)
    {
        var params = [];
        if (condition != "")
            condition += " AND local_userid = ?";
        else
            condition = "WHERE local_userid = ?";

        params.push(getUserId());

        var sql = "%s %s %s".format(DBUtil::getSelectQuery("t_replay_files", Data),
                    condition,
                    createOrderBy(order, by));
        var res = SQLITE.executeQuery(sql, params);
        return DBUtil::getDataList(Data, res);
    }

    function getCount(where)
    {
        var params = [];
        if (where != nil && where != "")
            where += " AND local_userid = ?";
        else
            where = "WHERE local_userid = ?";

        params.push(getUserId());

        var sql = "SELECT COUNT (*) FROM %s %s".format("t_replay_files", where);
        var res = SQLITE.executeQuery(sql, params);
        var count = getResult1(res);

        return count == nil ? 0 : count;
    }

    function getResult1(res)
    {
        if (res.size == 0)
            return nil;

        var row = res[0];
        if (row.size == 0)
            return nil;
        return res[0][0];
    }

    function createOrderBy(order, by)
    {
        if (order == nil)
            order = "datetime";

        if (by == nil)
            by = "ASC";

        var by2 = by;
        if (order == "datetime")
        {
            if (by == "ASC")
                by2 = "DESC";
            else if (by == "DESC")
                by2 == "ASC";
        }

        return "order by %{order} %{by2}, id";
    }
}