

//---------------------------------------------------------------------------------------
// NPUtil.ad
//
// Utility module for some Network Platform (PSN) operations.
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module NPUtil
{
    async function signIn(context, openQueryDialog = true, openUserCanceledDialog = true)
    {
        if (NP.isOnline())
            return true;

        if (GAME_STATUS != nil && GAME_STATUS.config.no_request_NP_sign_in)
            return false;

        var cursor_project = context.getCursorProject();
        var you_have_not_signed_in = context.translate(cursor_project, "Network", "NP_YOU_HAVE_NOT_SIGNED_IN");
        var canceled = false;

        if (openQueryDialog)
        {
            var do_you_sign_in = context.translate(cursor_project, "Network", "NP_DO_YOU_SIGN_IN");
            canceled = !DialogUtil::openConfirmDialog(context, DialogUtil::YESNO, do_you_sign_in);
        }

        if (canceled)
        {
            if (openUserCanceledDialog != nil && openUserCanceledDialog)
                DialogUtil::openConfirmDialog(context, DialogUtil::OK, you_have_not_signed_in);
        }
        else
        {
            await function () {
                NP.openSignInDialog();
            }

            if (!NP.isOnline())
            {
                if (openQueryDialog)
                    DialogUtil::openConfirmDialog(context, DialogUtil::OK, you_have_not_signed_in);
            }
        }

        return NP.isOnline();
    }

    function openErrorDialog(context, root)
    {
        var error_code = NP.getLastErrorCode();
        if (error_code == 0)
            return;

        var error_key = "NP_ERROR_0x%08x".format(error_code);
        var error_desc = context.translate(root, "Network", error_key);

        if (error_desc == error_key)
            main::pdistd::MSystemDialog::open(error_code);
        else
            DialogUtil::openConfirmDialog(context, DialogUtil::ERROR, error_desc);

        NP.clearErrorCode();
    }

    function checkPlayerName(context)
    {
        if (GAME_STATUS.user_profile.context.player_name_filtered)
            return true;

        var residence = GAME_STATUS.user_profile.residence;
        GAME_STATUS.user_profile.context.player_name_filtered = true;
        Grim2Util::updateNickName(context, residence.getPlayerName());
        return true;
    }
}