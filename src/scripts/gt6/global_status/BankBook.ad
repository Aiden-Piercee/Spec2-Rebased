

//---------------------------------------------------------------------------------------
// BankBook.ad
//
// Creates the save profile entity
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module BankBook
{
    function CreateStructure()
    {
        var st = STStructure("Impl");
        BankBook.defineModule(st);
        st.define("version", STLong());
        st.define("prev", STLong());
        st.define("diff", STLong());
        st.define("current", STLong());
        st.define("datetime_sec", STLong());
        st.define("history_index", STInt());
        st.define("history_loop_count", STInt());
        st.define("history_prev", STArray(STLong(), 256));
        st.define("history_diff", STArray(STLong(), 256));
        st.define("history_current", STArray(STLong(), 256));
        st.define("history_datetime_sec", STArray(STLong(), 256));

        DefineMethod();

        return st;
    }

    function DefineMethod()
    {
        module Impl
        {
            import __toplevel__::main;

            method initialize()
            {
                self.history_index = 0;
                self.history_loop_count = 0;
            }

            method checkin(prev, diff, current, datetime_sec)
            {
                if (self.version == 100)
                {
                    self.history_index = 0;
                    self.history_loop_count = 0;
                }

                self.version = 101;
                self.prev = prev;
                self.diff = diff;
                self.current = current;
                self.datetime_sec = datetime_sec;

                if (self.history_index < 0 || self.history_index >= 256)
                    self.history_index = 0;

                var idx = self.history_index;
                self.history_prev[idx] = prev;
                self.history_diff[idx] = diff;
                self.history_current[idx] = current;
                self.history_datetime_sec[idx] = datetime_sec;

                ++self.history_index;

                if (self.history_index >= 256)
                {
                    self.history_index = 0;
                    ++self.history_loop_count;
                }

                var blob_dummy = pdistd::MBlob();
                blob_dummy.reserve(((pdistd::MRandom::GetValue(0, 64) + 1) * 16) * 1024, true);
                var blob = pdistd::MBlob();
                blob.reserve(16 * 1024, true);
                self.serialize(blob);
                blob = pdistd::MCipher::encrypt(blob, true);
                return blob;
            }

            method checkout(blob)
            {
                var b = pdistd::MCipher::decrypt(blob, true);
                if (b != nil)
                {
                    self.deserialize(b);
                    return true;
                }
                else
                    return false;
            }
        }
    }
}