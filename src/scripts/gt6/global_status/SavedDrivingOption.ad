

//---------------------------------------------------------------------------------------
// SavedDrivingOption.ad
//
// Creates the save profile entity
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module SavedDrivingOption
{
    function clearInitializer()
    {
        undef CreateStructure;
        undef Initialize;
        undef clearInitializer;
    }

    function CreateStructure()
    {
        var st = STStructure("Impl");
        SavedDrivingOption.defineModule(st);
        st.define("manual", STByte());
        st.define("assist_asm", STByte());
        st.define("assist_tcs", STByte());
        st.define("assist_4was", STByte());
        st.define("active_brake_level", STByte());
        st.define("physics_pro", STByte());
        st.define("tire_front", STInt());
        st.define("tire_rear", STInt());
        st.define("driving_line", STInt());
        st.define("in_car_fovy", STInt());
        st.define("cam_speed", STInt());
        st.define("cam_y_inverse", STByte());

        DefineMethod();

        return st;
    }

    function Initialize(instance)
    {
        instance.manual = false;
        instance.assist_asm = true;
        instance.assist_tcs = 7;
        instance.assist_4was = true;
        instance.active_brake_level = 0;
        instance.physics_pro = 0;
        instance.tire_front = -1;
        instance.tire_rear = -1;
        instance.driving_line = true;
        instance.in_car_fovy = 0;
        instance.cam_speed = 0;
        instance.cam_y_inverse = false;
    }

    function DefineMethod()
    {
        module Impl
        {
            import __toplevel__::main;

            method setTo(cp, dp)
            {
                dp.manual = self.manual;
                dp.assist_asm = self.assist_asm;
                dp.assist_tcs = self.assist_tcs;
                dp.physics_pro = self.physics_pro;
                dp.display_driving_line = self.driving_line;
                cp.quicktune_tcs = self.assist_tcs;
            }

            method getFrom(cp, dp)
            {
                self.manual = dp.manual;
                self.assist_asm = dp.assist_asm;
                self.assist_tcs = dp.assist_tcs;
                self.physics_pro = dp.physics_pro;
                self.driving_line = dp.display_driving_line;
            }

            method apply(player_no)
            {
                
            }
        }
    }
}