

//---------------------------------------------------------------------------------------
// GameParameterUtil.ad
//
// Utility module for starting/executing/reading/writing event files.
// This is a bridge, and the actual implementation is inside GameParameterUtilImpl.ad.
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module GameParameterUtil
{
    module GameParameterUtilImpl
    {

    }

    static loaded_time = 0;

    function begin()
    {
        if (loaded_time == 0)
            var res = GameParameterUtilImpl.load("/scripts/gt6/util/GameParameterUtilImpl");
        loaded_time++;
    }

    function end()
    {
        loaded_time--;
        if (loaded_time == 0)
            GameParameterUtilImpl.clearStatic();
    }

    function createXML(gp_list)
    {
        begin();
        var xml_data = GameParameterUtilImpl::createXML(gp_list);
        end();
        return xml_data;
    }

    function parseXML(xml_data)
    {
        begin();
        var res = GameParameterUtilImpl::parseXML(xml_data);
        end();
        return res;
    }

    function execute(context, gp, player_cp_list, player_dp_list, bspec_dp_list, online_id_list)
    {
        LaunchRaceUtil::launch(context, gp, player_cp_list, player_dp_list, bspec_dp_list, online_id_list);
    }

    function executeEvent(context, gp, game_status, driving_option_cb)
    {
        begin();
        var res = GameParameterUtilImpl::executeEvent(context, gp, game_status, driving_option_cb);
        end();
        return res;
    }

    function executeArcade(context, gp, game_status, driving_option_cb)
    {
        begin();
        var res = GameParameterUtilImpl::executeArcade(context, gp, game_status, driving_option_cb);
        end();
        return res;
    }

    function executeAutoDemo(context, gp, game_status)
    {
        begin();
        var res = GameParameterUtilImpl::executeAutoDemo(context, gp, game_status);
        end();
        return res;
    }

    function executeEventFile(context, path)
    {
        begin();
        var res = GameParameterUtilImpl::executeEventFile(context, path);
        end();
        return res;
    }

    function createFromFile(path)
    {
        begin();
        var res = GameParameterUtilImpl::createFromFile(path);
        end();
        return res;
    }

    function createSingleRace(course_code, entry_num, arcade_laps, ai_skill, enemy_lv, boost_lv, penalty_level, prize_table, one_make)
    {
        begin();
        var gp = GameParameterUtilImpl::createSingleRace(course_code, entry_num, arcade_laps, ai_skill, enemy_lv, boost_lv, penalty_level, prize_table, one_make);
        end();
        return gp;
    }

    function createSingleRaceRacingKart(course_code, entry_num, arcade_laps, ai_skill, enemy_lv, boost_lv, penalty_level, prize_table, one_make)
    {
        begin();
        var gp = GameParameterUtilImpl::createSingleRaceRacingKart(course_code, entry_num, arcade_laps, ai_skill, enemy_lv, boost_lv, penalty_level, prize_table, one_make);
        end();
        return gp;
    }

    function createOnlineSingleRace(course_code, entry_num, arcade_laps, ai_skill, enemy_lv, boost_lv, penalty_level, prize_table, one_make)
    {
        begin();
        var gp = GameParameterUtilImpl::createOnlineSingleRace(course_code, entry_num, arcade_laps, ai_skill, enemy_lv, boost_lv, penalty_level, prize_table, one_make);
        end();
        return gp;
    }

    function createAutoDemo(course_code, entry_num, laps, one_make)
    {
        begin();
        var gp = GameParameterUtilImpl::createAutoDemo(course_code, entry_num, laps, one_make);
        end();
        return gp;
    }

    function createArcadeStyleRace(course_code)
    {
        begin();
        var gp = GameParameterUtilImpl::createArcadeStyleRace(course_code);
        end();
        return gp;
    }

    function createTimeAttack(course_code)
    {
        begin();
        var gp = GameParameterUtilImpl::createTimeAttack(course_code);
        end();
        return gp;
    }

    function createGpsReplay(course_code)
    {
        begin();
        var gp = GameParameterUtilImpl::createGpsReplay(course_code);
        end();
        return gp;
    }

    function createFreeRun(course_code)
    {
        begin();
        var gp = GameParameterUtilImpl::createFreeRun(course_code);
        end();
        return gp;
    }

    function createOnlineTimeAttack(course_code)
    {
        begin();
        var gp = GameParameterUtilImpl::createOnlineTimeAttack(course_code);
        end();
        return gp;
    }

    function createDriftAttack(course_code, layout, endless)
    {
        begin();
        var gp = GameParameterUtilImpl::createDriftAttack(course_code, layout, endless);
        end();
        return gp;
    }

    function createOnlineDriftAttack(course_code, layout, endless)
    {
        begin();
        var gp = GameParameterUtilImpl::createOnlineDriftAttack(course_code, layout, endless);
        end();
        return gp;
    }

    function createDragRace(course_code)
    {
        begin();
        var gp = GameParameterUtilImpl::createDragRace(course_code);
        end();
        return gp;
    }

    function createReplayWithPath(path, data_logger)
    {
        begin();
        var gp = GameParameterUtilImpl::createReplayWithPath(path, data_logger);
        end();
        return gp;
    }

    function createLicense(course_code)
    {
        begin();
        var gp = GameParameterUtilImpl::createLicense(course_code);
        end();
        return gp;
    }

    function createSplitBattle(course, cp_list, dp_list)
    {
        begin();
        var gp = GameParameterUtilImpl::createSplitBattle(course, cp_list, dp_list);
        end();
        return gp;
    }

    function createSplitOnlineBattle(course, cp_list, dp_list)
    {
        begin();
        var gp = GameParameterUtilImpl::createSplitOnlineBattle(course, cp_list, dp_list);
        end();
        return gp;
    }

    function createOnlineBattle(course_code, room_type)
    {
        begin();
        var gp = GameParameterUtilImpl::createOnlineBattle(course_code, room_type);
        end();
        return gp;
    }

    function createSchool()
    {
        begin();
        var gp = GameParameterUtilImpl::createSchool();
        end();
        return gp;
    }

    function createArena(course_code, cp_list, dp_list, arcade_laps)
    {
        begin();
        var gp = GameParameterUtilImpl::createArena(course_code, cp_list, dp_list, arcade_laps);
        end();
        return gp;
    }

    function setListForArena(gp, cp_list, dp_list)
    {
        begin();
        GameParameterUtilImpl::setListForArena(gp, cp_list, dp_list);
        end();
    }

    function createRally()
    {
        begin();
        var gp = GameParameterUtilImpl::createRally();
        end();
        return gp;
    }

    function createTour(course_code)
    {
        begin();
        var gp = GameParameterUtilImpl::createTour(course_code);
        end();
        return gp;
    }

    function createEvent()
    {
        begin();
        var gp = GameParameterUtilImpl::createEvent();
        end();
        return gp;
    }

    function createLeaveDemo(course_code, race_code, entry_num)
    {
        begin();
        var gp = GameParameterUtilImpl::createLeaveDemo(course_code, race_code, entry_num);
        end();
        return gp;
    }

    function createCourseEdit(scenery_code)
    {
        begin();
        var gp = GameParameterUtilImpl::createCourseEdit(scenery_code);
        end();
        return gp;
    }

    function createCacheForRelease(dir)
    {
        begin();
        GameParameterUtilImpl::createCacheForRelease(dir);
        end();
    }
}