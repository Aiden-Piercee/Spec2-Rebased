













module DLCUtil
{
    class Entitlement extends System::Object
    {
        method __init__(_type)
        {
            self.type = _type;
            self.entitlement_id = "%s-%s".format(pdiext::MProductInformation::GetServiceID(), _type);
            self.remaining_count = 0;
            self.consumed_count = 0;
        }

        attribute type;
        attribute entitlement_id;
        attribute remaining_count;
        attribute consumed_count;
        attribute sku_id;
        attribute installed;
    }

    module TYPE
    {

        static CREDIT_1MILLION = "GT6CR1";


        static CREDIT_100K = "GT6CR2";


        static CREDIT_500K = "GT6CR3";

        
        static CREDIT_0050 = "CR0050";
        static CREDIT_0100 = "CR0100";
        static CREDIT_0250 = "CR0250";
        static CREDIT_0700 = "CR0700";
    }


    function getContents(type)
    {
        if (TYPE::CREDIT_0050 == type)
        {
            return 500 * 1000;
        } 
        else if (TYPE::CREDIT_0100 == type)
        {
            return 1 * 1000 * 1000;
        }
        else if (TYPE::CREDIT_0250 == type)
        {
            return 2.5 * 1000 * 1000;
        }
        else if (TYPE::CREDIT_0700 == type)
        {
            return 7 * 1000 * 1000;
        }
        else if (TYPE::CREDIT_1MILLION == type)
        {
            return 1 * 1000 * 1000;
        }
        else if (TYPE::CREDIT_100K == type)
        {
            return 100 * 1000;
        }
        else if (TYPE::CREDIT_500K == type)
        {
            return 500 * 1000;
        }
        else
        {
            // Nothing
        }

        return 0;
    }

    function getEntitlement(type)
    {
        var entitlement = Entitlement(type);

        var res = NP.getEntitlementById(entitlement.entitlement_id);
        if (0x8002AA10 == res["result"])
        {
            NP.requestTicket();
            res = NP.getEntitlementById(entitlement.entitlement_id);
        }

        if (0x8002AA06 == res["result"])
            ;
        else if (res["result"] != 0)
        {
            
            entitlement.remaining_count = 0;
            entitlement.consumed_count = getKeyValueInt(getConsumedKey(type));
        }
        else
        {
            // Completed
            var value = res["value"];
            entitlement.remaining_count = value["remaining_count"];
            entitlement.consumed_count = getKeyValueInt(getConsumedKey(type));
        }
        
        return entitlement;
    }

    function begin() { KeyValueUtil::begin(); }

    function commit() { KeyValueUtil::commit(); }

    function getKeyValueInt(key) 
    {
        return KeyValueUtil::getInt("dlc", key);
    }

    function setKeyValue(key, value) 
    {
        KeyValueUtil::set("dlc", key, value);
    }


    function getInstalledKey(type)
    {
        return "%{type}_installed";
    }

    function getConsumedKey(type)
    {
        return "%{type}_consumed";
    }


    function setAvailableAnyTime(flag)
    {
        setKeyValue("anytime", flag ? 1 : 0);
    }

    function isAvailableAnyTime()
    {
        var value = getKeyValueInt("anytime");
        return value != 0;
    }

    function isInstalled(type)
    {
        var value = getKeyValueInt(getInstalledKey(type))
        return value != 0;
    }

    function install(type)
    {
        var consumed_key = getConsumedKey(type);
        var consumed_count = getKeyValueInt(consumed_key);

        begin();
        setKeyValue(getInstalledKey(type), 1);
        setKeyValue(consumed_key, consumed_count + 1);
        commit();
    }
}