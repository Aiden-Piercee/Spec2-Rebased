

//---------------------------------------------------------------------------------------
// UnitUtil.ad
//
// Utility module for getting unit strings (laps, time, size)
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module UnitUtil
{
    function getLapStr(num)
    {
        return manager.translate("Unit", num == 1 ? "LAP_SINGULAR" : "LAPS_PLURAL");
    }

    function getLapStrJP(context, num)
    {
        var project = context.getCursorProject();
        var key;

        if (num == 1)
            key = "LAP";
        else
            key = "LAPS";

        return context.translate(project, "Unit", key).build(num);
    }

    function getTimeStr(context, total_minute)
    {
        var h = (total_minute / 60).toInt();
        var m = (total_minute % 60).toInt();

        if (h > 0 && m > 0)
        {
            return manager.translate("Unit", "HOUR_MINUTE").build(h, m);
        }
        else if (h > 0)
        {
            var h_str = manager.translate("Unit", "HOUR").build(h);
            return h_str;
        }
        else if (m > 0)
        {
            var m_str = manager.translate("Unit", "MINUTE").build(m);
            return m_str;
        }
        else
        {
            return "--";
        }
    }

    function getDiskSizeString(context, size_byte)
    {
        var number = "";
        var unit = "";

        var project = context.getCursorProject();

        if (size_byte >= 1024 * 1024 * 1024)
        {
            var size10 = (10 * size_byte) / 1024 / 1024 / 1024;
            number = pdiext::GetNumberString(size10, 1);
            unit = "GIGA_BYTE";
        }
        else if (size_byte >= 1024 * 1024)
        {
            number = "%d".format(size_byte / 1024 / 1024);
            unit = "MEGA_BYTE";
        }
        else if (size_byte >= 1024)
        {
            number = "%d".format(size_byte / 1024);
            unit = "KILO_BYTE";
        }
        else
        {
            number = size_byte.toString();
            unit = "BYTE";
        }

        return "%s%s".format(number, context.translate(project, "Unit", unit));
    }
}