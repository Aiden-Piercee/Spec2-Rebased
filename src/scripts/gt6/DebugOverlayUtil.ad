//---------------------------------------------------------------------------------------
// DebugOverlayUtil.ad
//
// Custom, non official script-level utility for displaying debug overlays onto the screen.
// Overlays currently only support TextFaces, but can in theory be any widget that can be
// programatically created.
//
// This script depends on SequenceUtil.ad, which always appends the overlay to the current
// root (and cleans up overlays in previous ones), see reupdate()
//
// The utility is mostly intended to display real-time data, updating text faces on every
// event or tick will provide an update on the screen's overlays.
//---------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------
// Usage for adding an overlays onto the screen
//   DebugOverlayUtil::add("test", "overlay #1", 0, 0); // name, default text, x, y. see add()
//
//   var overlay = DebugOverlayUtil::get("test"); // Get a registered overlay by name
//   overlay.append(" with extra text"); // Appends text to the overlay's textface
//   overlay.clear() // Clears the text
//   overlay.set("new text"); // Sets the text
//   
//   DebugOverlayUtil::remove("test"); // Removes an overlay, stops displaying it
//---------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module DebugOverlayUtil
{
    class TextOverlay
    {
        attribute name;
        attribute textface;

        method __init__(name, textface)
        {
            self.textface = textface;
        }

        // Gets the overlay's name
        method getName()
        {
            return self.name;
        }

        // Gets access to the actual textface
        method getTextFace()
        {
            return self.textface;
        }

        // Appends text to the text face
        method append(str)
        {
            textface.text += str;
        }

        // Appends a line to the text face
        method appendLine(str)
        {
            textface.text += "\n%{str}";
        }

        // Sets the textface's text
        method setText(text)
        {
            textface.text = text;
        }

        method setMultilineEnabled(enabled)
        {
            textface.multiline = true;
        }

        // Clears the textface
        method clear()
        {
            textface.text = "";
        }
    }

    static sOverlays = [:];
    static sOverlayCompositeName = "Overlays";
    
    // Adds a new overlay to the screen
    function add(overlay_name, text = "", x = 0, y = 0, w = 1920, h = 1080, scale_x = 1.25, scale_y = 1.25)
    {
        if (sOverlays[overlay_name] != nil)
            return; // Already exists

        var overlay = _createOverlay(overlay_name, text, x, y, w, h, scale_x, scale_y);

        var window = main::ContextMain.getRootWindow();
        createOverlayCompositeIfNeeded(window);

        window[sOverlayCompositeName].appendChild(overlay.textface);
        sOverlays[overlay_name] = overlay;
    }

    // Gets an overlay by name
    // May return nil if it doesn't exist
    function get(overlay_name)
    {
        return sOverlays[overlay_name];
    }

    // Removes an overlay from the screen by name
    function remove(overlay_name)
    {
        if (sOverlays[overlay_name] != nil)
        {
            var overlay = sOverlays[overlay_name];
            var root = main::ContextMain.getRootWindow();
            if (root[sOverlayCompositeName] != nil)
                root[sOverlayCompositeName].removeChild(overlay);

            sOverlays.erase(overlay_name);
        }
    }

    // Clears all tracked overlays & on screen
    function clear_overlays()
    {
        foreach (var [overlay_name, overlay] in sOverlays)
        {
            var overlay = sOverlays[overlay_name];
            var window = main::ContextMain.getRootWindow();

            if (root[sOverlayCompositeName] != nil)
                root[sOverlayCompositeName].removeChild(overlay);

            sOverlays.erase(overlay_name);
        }
    }

    /////////////////////////////
    // Private functions
    /////////////////////////////

    // Creates a new overlay object
    function _createOverlay(name, text, x, y, w, h, scale_x, scale_y)
    {
        var text_face = menu::MTextFace("Overlay_%{name}");
        text_face.text = text;
        text_face.scale_x = scale_x;
        text_face.scale_y = scale_y;
        text_face.x = x;
        text_face.y = y;
        text_face.w = w;
        text_face.h = h;
        text_face.align = 0; // Top left
        text_face.multiline = true; // For logging stuff

        var overlay = TextOverlay(name, text_face);
        return overlay;
    }


    // Not intended for public use
    // Reupdates the overlays by swapping to new textfaces when switching pages
    // Used in SequenceUtil.ad
    function reupdate()
    {
        var pages = main::ContextMain.getPageList();
        if (pages.size == 0)
            return;

        var last = pages[pages.size - 1];

        // Clear previous root window's overlays
        // root window inherits from composite, so we can remove stuff from it
        foreach (var [overlay_name, overlay] in sOverlays)
        {
            var root = overlay.textface.root_window;
            if (root != nil && root[sOverlayCompositeName] != nil)
                root[sOverlayCompositeName].removeChild(overlay.textface);
        }
                
        // Add to newest page
        foreach (var [overlay_name, overlay] in sOverlays)
        {
            var old_tf = overlay.textface;
            var new_overlay = _createOverlay(overlay_name, old_tf.text, 
                old_tf.x, old_tf.y, old_tf.w, old_tf.h, old_tf.scale_x, old_tf.scale_y);
            sOverlays[overlay_name] = new_overlay;

            createOverlayCompositeIfNeeded(last);
            last[sOverlayCompositeName].appendChild(new_overlay.textface);
        }
    }

    // Creates the composite housing all overlays
    function createOverlayCompositeIfNeeded(root)
    {
        if (root[sOverlayCompositeName] == nil)
        {
            var composite = menu::MComposite(sOverlayCompositeName);
            root.appendChild(composite);
        }
    }
}