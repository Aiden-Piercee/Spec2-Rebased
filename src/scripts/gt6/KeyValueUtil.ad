

//---------------------------------------------------------------------------------------
// KeyValueUtil.ad
//
// Utility module for getting key/value elements from the save
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module KeyValueUtil
{
    function initialize()
    {
        var instance = getInstance();
        instance.initialize();
    }

    function begin()
    {
        var instance = getInstance();
        instance.begin();
    }

    function commit()
    {
        var instance = getInstance();
        instance.commit();
    }

    function get(category, key)
    {
        var instance = getInstance();
        return instance.get(category, key);
    }

    function getInt(category, key)
    {
        var instance = getInstance();
        return instance.getInt(category, key);
    }

    function getFlag(category, key)
    {
        var instance = getInstance();
        var value = instance.get(category, key);
        return value != "" ? value.toBool() : nil;
    }

    function getFlag_NotNil(category, key)
    {
        var instance = getInstance();
        var value = instance.get(category, key);
        return value != "" ? value.toBool() : false;
    }

    function set(category, key, value)
    {
        var instance = getInstance();
        instance.set(category, key, value);
    }

    function deleteByCategory(category)
    {
        var instance = getInstance();
        instance.deleteByCategory(category);
    }

    function getList(category)
    {
        var instance = getInstance();
        return instance.getList(category);
    }

    function addFloat(category, key, value)
    {
        var instance = getInstance();
        var current_value = instance.get(category, key).toFloat();
        instance.set(category, key, current_value + value);
    }

    function addInt(category, key, value)
    {
        var instance = getInstance();
        var current_value = instance.getInt(category, key);
        instance.set(category, key, current_value + value);
    }

    function setCarUnlock(car_label, is_unlock)
    {
        var instance = getInstance();
        instance.set("car_unlock", car_label, is_unlock);
    }

    function isCarUnlock(car_label)
    {
        var instance = getInstance();
        var value = instance.get("car_unlock", car_label);
        return value != "" ? value.toBool() : false;
    }

    function setCarUnveil(car_label, is_unlock)
    {
        var instance = getInstance();
        instance.set("car_unveil", car_label, is_unlock);
    }

    function isCarUnveil(car_label)
    {
        var instance = getInstance();
        var value = instance.get("car_unveil", car_label);
        return value != "" ? value.toBool() : false;
    }

    function setCourseUnlock(course_label, is_unlock)
    {
        var instance = getInstance();
        instance.set("course_unlock", course_label, is_unlock);
    }

    function isCourseUnlock(course_label, return_code_when_no_value = false)
    {
        var instance = getInstance();
        var value = instance.get("course_unlock", course_label);
        return value != "" ? value.toBool() : return_code_when_no_value;
    }

    function initPresentCar(car)
    {
        if (!car.isInstanceOf(String))
            car = gtengine::MSpecDB::getCarLabel(car);

        var instance = getInstance();
        var value = instance.get("present_car", car);
        if (value == "")
        {
            instance.set("present_car", car, true);
            return true;
        }

        return false;
    }

    function setPresentCarFlag(car, flag)
    {
        if (!car.isInstanceOf(String))
            car = gtengine::MSpecDB::getCarLabel(car);

        var instance = getInstance();
        instance.set("present_car", car, flag);
    }

    function hasPresentCar(car)
    {
        if (!car.isInstanceOf(String))
            car = gtengine::MSpecDB::getCarLabel(car);

        var instance = getInstance();
        var value = instance.get("present_car", car);
        return value == true;
    }

    function getInstance()
    {
        return main::GAME_STATUS.user_profile.key_value;
    }
}