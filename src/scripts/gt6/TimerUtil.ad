

//---------------------------------------------------------------------------------------
// TimerUtil.ad
//
// Utility module for creating timers
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module TimerUtil
{
    class Timer
    {
        attribute stime_;
        attribute ftime_;
        attribute isStarted_;

        method __init__()
        {
            reset();
        }

        method reset()
        {
            self.stime_ = 0;
            self.ftime_ = 0;
            self.isStarted_ = false;
        }

        method start()
        {
            self.stime_ = pdistd::GetSystemTimeMilliSecond();
            self.ftime_ = self.stime_;
            self.isStarted_ = true;
        }

        method restart()
        {
            self.stime_ = pdistd::GetSystemTimeMilliSecond();
            self.isStarted_ = true;
        }

        method getElapsed()
        {
            if (!self.isStarted_)
                return 0;

            return pdistd::GetSystemTimeMilliSecond() - self.stime_;
        }

        method getTotalElapsed()
        {
            if (!self.isStarted_)
                return 0;

            return pdistd::GetSystemTimeMilliSecond() - self.ftime_;
        }
    }

    class IntervalTimer : Timer
    {
        attribute func_;
        attribute interval_;

        method __init__(interval = 0, func)
        {
            __super__::__init__();
            self.func_ = func;
            self.interval_ = interval;
        }

        method reset()
        {
            __super__::reset();
            self.func_ = nil;
            self.interval_ = 0;
        }

        method check(context)
        {
            if (!self.isStarted_)
                return;

            if (self.getElapsed() >= self.interval_)
            {
                if (context.isInstanceOf(Array))
                {
                    var args = context;
                    self.func_.call(args);
                }
                else
                    self.func_(context);

                self.restart();
            }
        }

        method setFunction(func)
        {
            self.func_ = func;
        }

        method getInterval()
        {
            return self.interval_;
        }
    }

    function CreateIntervalTimer(interval, func)
    {
        return IntervalTimer(interval, func);
    }

    function CreateIntervalTimerStart(interval, func)
    {
        var timer = IntervalTimer(interval, func);
        timer.start();
        return timer;
    }

    function Check(context, timer)
    {
        timer.check(context);
    }
}
