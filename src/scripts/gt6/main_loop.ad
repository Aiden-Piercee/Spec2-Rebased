












static module main
{    
    static menu_resource_loaded = false;

    function LoadMenuResource()
    {
        if (menu_resource_loaded)
            return;

        if (main::AppOpt["no_package"] == nil)
        {
            manager.loadPackage("%{PROJECT_ROOT_DIR}/arcade/arcade");
            manager.loadPackage("%{PROJECT_ROOT_DIR}/option/option");
            manager.loadPackage("%{PROJECT_ROOT_DIR}/gtmode/gtmode");
            manager.loadPackage("%{PROJECT_ROOT_DIR}/garage/garage");
            manager.loadPackage("%{PROJECT_ROOT_DIR}/gtauto/gtauto");
            manager.loadPackage("%{PROJECT_ROOT_DIR}/community/community");
        }

        menu_resource_loaded = true;
    }

    function UnloadMenuResource()
    {
        if (!menu_resource_loaded)
            return;

        if (main::AppOpt["no_package"] == nil)
            manager.unloadPackageAll();

        menu_resource_loaded = false;
    }

    function MainLoop()
    {
        var no_package = main::AppOpt["no_package"] == nil;

        if (main::AppOpt.defined("adhoc_trace_object"))
            System::adhoc_trace_object = true; // Functions stripped engine wise by release compiling
        
        while (!GameSequence::context.finished && !pdiext::MSystemCondition::IsExitGame())
        {
            if (!pdistd::CheckRights())
            {
                pdiext::MSystemCondition::ExitGame();
                break;
            }

            if (GameSequence::getCurrentSequence() == GameSequence::MENU)
                LoadMenuResource();
            else
                UnloadMenuResource();

            ORG.enableIconCapture(false);

            switch (GameSequence::getCurrentSequence())
            {
                case GameSequence::MENU:
                    Login.resetCheckNpEula();
                    GameSequence::setMode(GameSequence::getCurrentSequence());
                    MGOM.start(GameSequence::getCurrentProject());
                    break;

                case GameSequence::RACE:
                    RaceOperator.relocateGameParameter();
                    if (RaceOperator.game_parameter.event.game_mode == gtengine::GameMode::ONLINE_ROOM)
                        var success = RaceOperator.allocateResource();

                    GameSequence::setMode(GameSequence::getCurrentSequence());
                    GameSequence::executeRace();
                    break;

                case GameSequence::REPLAY_THEATER:
                    RaceOperator.relocateGameParameter();
                    GameSequence::setMode(GameSequence::getCurrentSequence());
                    GameSequence::executeRace();
                    GameSequence::setNextSequence(GameSequence::MENU);
                    break;

                case GameSequence::MULTIMONITOR_CLIENT:
                    GameSequence::setMode(GameSequence::getCurrentSequence());
                    ORG.startMonitorClient();
                    MGOM.start("multimonitor", ORG);
                    MGOM.sync();
                    GameSequence::setNextProject(main::after_boot_project, nil);
                    GameSequence::setNextSequence(GameSequence::MENU);
                    break;
            }
        }
    }
}