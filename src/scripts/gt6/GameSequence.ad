

//---------------------------------------------------------------------------------------
// GameSequence.ad
//
// Utility module
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
module GameSequence
{
    static UNDEFINED = 0;
    static MENU = 1;
    static SINGLE_RACE = 2;
    static EVENT_RACE = 3;
    static TIMEATTACK = 4;
    static DRIFTATTACK = 5;
    static ONLINE_BATTLE = 6;
    static SPLIT_BATTLE = 7;
    static REPLAY_THEATER_OLD = 8;
    static AUTO_DEMO = 9;
    static LEAVE_DEMO = 10;
    static FREERUN = 11;
    static ONLINE_TRACKDAY = 12;
    static ONLINE_ROOM = 13;
    static MULTIMONITOR_CLIENT = 14;
    static RACE_EDIT = 15;
    static DRAGRACE = 16;
    // Intentional gap here
    static RACE = 20;
    static REPLAY_THEATER = 21;
    static BEHAVIOR = 100;


    var st = STStructure();
    st.define("finished", STInt());
    st.define("current_sequence", STInt());
    st.define("prev_sequence", STInt());
    st.define("current_mode", STInt());
    st.define("prev_mode", STInt());
    st.define("current_project", STString(32));
    st.define("prev_project", STString(32));
    st.define("arg", STString(32));
    st.define("result", STString(32));
    st.define("prev_page", STString(32));
    st.define("prev_page_arg", STString(32));
    
    static context = st();
    context.data = [
        "finished" : false,
        "current_sequence" : MENU,
        "prev_sequence" : UNDEFINED,
        "current_mode" : MENU,
        "prev_mode" : UNDEFINED,
        "current_project" : "boot",
        "prev_project" : "undefined",
        "arg" : "",
        "result" : "",
        "prev_page" : "undefined",
        "prev_page_arg" : ""
    ];

    static argument = nil;

    function setNextSequence(sequence)
    {
        context.prev_sequence = context.current_sequence;
        context.current_sequence = sequence;
    }

    function setMode(mode)
    {
        context.prev_mode = context.current_mode;
        context.current_mode = mode;
    }

    function setArgument(arg)
    {
        context.arg = arg == nil ? "" : arg.toString();
    }

    function setNextProject(project, arg)
    {
        context.prev_project = context.current_project;
        context.current_project = project;
        setArgument(arg);
    }

    function getCurrentSequence()
    {
        return context.current_sequence;
    }

    function getPrevSequence()
    {
        return context.prev_sequence;
    }

    function getCurrentMode()
    {
        return context.current_mode;
    }

    function getCurrentProject()
    {
        return context.current_project;
    }

    function getPrevProject()
    {
        return context.prev_project;
    }

    function setPrevPage(string, arg)
    {
        context.prev_page = string;
        context.prev_page_arg = arg == nil ? "" : arg.toString();
    }

    function getPrevPage()
    {
        return context.prev_page;
    }

    function getPrevPageArgument()
    {
        return context.prev_page_arg;
    }

    function getArgument()
    {
        return context.arg;
    }

    function setResult(value)
    {
        context.result = value;
    }

    function getResult()
    {
        return context.result;
    }

    function setArgumentObject(arg)
    {
        main::manager.setHistory("GameSequence::ArgumentObject", arg);
    }

    function getArgumentObject()
    {
        return main::manager.getHistory("GameSequence::ArgumentObject");
    }

    function finish()
    {
        context.finished = true;
    }

    function executeRace(arg)
    {
        setArgument(arg);
        setResult("");
        MGOM.start("race", ORG);
        MGOM.sync();
        return getResult();
    }
}
