

//---------------------------------------------------------------------------------------
// bootstrap.ad
//
// First adhoc main boot sequence.
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

static module main
{
    static MINIMUM_HDD_SPACE = 10 * 1024 * 1024;
    static REPLAY_MINIMUM_HDD_SPACE = 32 * 1024 * 1024;
    static INSTALL_MINIMUM_HDD_SPACE = 5 * 1024 * 1024 * 1024;

    static PROJECT_ROOT_DIR;
    static PRODUCT_ROOT_DIR;
    static MGOM;
    static PDINetwork;
    static networkServerEnabled = false;
    static NP;
    static Login;
    static Recorder;
    static Transcoder;
    static Inflator;
    static ContextMain;
    static Context1P;
    static Context2P;
    static manager;
    static sound;
    static dialog_project;
    static cursor_project;
    static ui_kit_project;
    static setting_project;
    static race_project;
    static PLAY_STAGE_at_top;
    static EnableResultConfetti;
    static Httpc;
    static AVChat;
    static Lobby;
    static Clan;
    static NUS;
    static OnlineUtility;
    static OnlineSession;
    static GTServiceManager;
    static ServicePublisher;
    static WebAd;
    static NpEula;
    static MMmDNSConfig;
    static MMmDNSPublish = false;
    static MMmDNSBrowser;
    static Grim2;
    static News2;
    static Tv2;
    static EventRace2;
    static Matching2;
    static Ranking2;
    static Replay2;
    static UserProfile2;
    static GTMail;
    static Photo;
    static Community;
    static Activity;
    static Bbs2;
    static Course;
    static GAME_STATUS;
    static ORG;
    static RaceOperator;
    static SaveUtil;
    static SaveCallback;
    static SaveUtil2;
    static SPECDB;
    static MENUDB;
    static USERDB;
    static AUTODEMO_INDEX_LIST;
    
    module AppOpt
    { 

    }
    static after_boot_project = "gtmode";
}

module main::bootstrap_phase1_module
{
    module main::pdistd
    {
        #require "pdistd"
    }
    module main::pdiext
    {
        #require "pdiext"
    }
    module main::menu
    {
        #require "menu"
        #require "gtmenu"

        menu::ScreenWidth = 1920;
        menu::ScreenHeight = 1080;
        menu::ScreenDepth = 2000;
    }

    module main::gtengine
    {
        #require "gtengine"
    }
    module main::pdiapp
    {
        #require "pdiapp"
    }

    function initApp()
    {
        var r = pdistd::MRandom();
        r.mt_seed = pdiext::getBetterTime().getBySecond();
        
        var hi = r.getMTInt().toULong();
        r.mt_seed = pdistd::GetSystemTimeMicroSecond();
        
        var low = r.getMTInt().toULong();
        pdiapp::play_id = hi << 32 | low;
    }

    function initArgs()
    {
        var args = pdistd::GetArgs();
        args.shift();
        foreach (var arg in args)
        {
            var pair = arg.split("=");
            if (pair.size >= 2)
                AppOpt.defineStatic(pair[0], pair[1];)
            else
                AppOpt.defineStatic(pair[0], true);
        }
    }
    function initMenuSystem()
    {
        var product_name;
        switch (main::GetVersionBranch())
        {
            case "runviewer":
            case "gt6":
            case "academy":
            case "behavior":
            case "behavior-sa":
            case "demo":
                product_name = "gt6";
                break;

            default:
                break;
        }
        
        if (AppOpt.defined("gt5"))
            product_name = "gt5";
        main::PROJECT_ROOT_DIR = "/projects/%{product_name}";
        main::PRODUCT_ROOT_DIR = "/products/%{product_name}";

        static module main
        {
            #require "%{PRODUCT_ROOT_DIR}/script/MenuClassDefine";
        }

        manager.product_name = product_name;
        manager.is_local_target = isEnvironmentLocal();

        if (main::AppOpt.defined("project_prefix"))
            manager.project_prefix = main::AppOpt["project_prefix"];

        main::sound = pdistd::MSound();
        main::MGOM = main::menu::MMenuGameObjectManager();

        MGOM.setProjectRoot(main::PROJECT_ROOT_DIR);
        manager.rtext_manager.reserveMemoryCommon(832 * 1024);
        manager.rtext_manager.setRegion(pdiext::MProductInformation::GetGameRegionCode());

        LangUtil::load();
        main::MGOM.initialize();

        var context = main::manager.getUpdateContext();
        main::ContextMain = context.getRenderContext();
        main::Context1P = main::ContextMain.getSubContext(0);
        main::Context2P = main::ContextMain.getSubContext(1);
        
        main::EnableResultConfetti = false;

        AUTODEMO_INDEX_LIST = pdistd::MRandom::GetShuffledList(42, 42);
        if (AppOpt.defined("demo_idx"))
            AUTODEMO_INDEX_LIST = nil;
    }

    function execBoot()
    {
        initApp();
        pdistd::SetFileSystemOptionInt64("/", "PreCopyHddFreeSizeLimit", INSTALL_MINIMUM_HDD_SPACE);
        initArgs();
        UpdateVersionBranch();
        initMenuSystem();

        main::MGOM.start("boot");
    }
}
